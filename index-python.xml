<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>blog.nshephard.dev</title>
<link>https://blog.nshephard.dev/#category=python</link>
<atom:link href="https://blog.nshephard.dev/index-python.xml" rel="self" type="application/rss+xml"/>
<description>Software development in a Research Environment</description>
<generator>quarto-1.6.11</generator>
<lastBuildDate>Tue, 24 Sep 2024 00:00:00 GMT</lastBuildDate>
<item>
  <title>Pytest Matplotlib</title>
  <dc:creator>Neil Shephard</dc:creator>
  <link>https://blog.nshephard.dev/posts/pytest-mpl/</link>
  <description><![CDATA[ 





<p><a href="https://docs.pytest.org/en/latest/" target="_blank">Pytest</a> is an excellent framework for writing tests in <a href="https://python.org" target="_blank">Python</a>. Sometimes the code you want to test will generate images using <a href="https://matplotlib.org/" target="_blank">Matplotlib</a> or related libraries based around it such as <a href="https://seaborn.pydata.org" target="_blank">Seaborn</a> or <a href="https://plotnine.org" target="_blank">plotnine</a> and ideally your <a href="https://docs.pytest.org/en/latest/" target="_blank">pytest</a> suite should check that your functions generate the images you expect. There is an excellent <a href="https://docs.pytest.org/en/stable/reference/plugin_list.html" target="_blank">pytest plugin</a> to help with this <a href="https://pytest-mpl.readthedocs.io/en/stable/" target="_blank">pytest-mpl</a> and this post covers how to use it and a <em>very</em> useful feature to help you investigate differences in images when your tests of images fail.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://live.staticflickr.com/65535/54027972058_d8dec0acca_3k.jpg" class="img-fluid figure-img"></p>
<figcaption><a href="https://flic.kr/p/2qjgtMC" target="_blank">Histograms (not plotted using Matplotlib!) by Me.</a></figcaption>
</figure>
</div>
<section id="installation" class="level2">
<h2 class="anchored" data-anchor-id="installation">Installation</h2>
<p>Setup a new virtual environment, here I use virtualenvwrapper to create a temporary virtual environment (which will be deleted on deactivation) and install the <a href="https://pytest-mpl.readthedocs.io/en/stable/" target="_blank">pytest-mpl</a> package (it pulls in <a href="https://matplotlib.org/" target="_blank">matplotlib</a>, <a href="https://docs.pytest.org/en/latest/" target="_blank">pytest</a> and a bunch of other dependencies).</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mktmpenv</span></span>
<span id="cb1-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install pytest-mpl</span></code></pre></div>
</section>
<section id="function-and-test" class="level2">
<h2 class="anchored" data-anchor-id="function-and-test">Function and Test</h2>
<p>We need a simple example to write tests for. As with previous posts I’ve made the code available in the <a href="https://github.com/ns-rse/pytest-examples" target="_blank">pytest-examples</a> repository. You can clone this repository to follow along and play around with this worked example.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> clone git@github.com:ns-rse/pytest-examples.git</span>
<span id="cb2-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cd</span> pytest-examples</span></code></pre></div>
<section id="scatter" class="level3">
<h3 class="anchored" data-anchor-id="scatter"><code>scatter()</code></h3>
<p>This repository contains the module <code>pytestexample/mpl_example.py</code> and the function <code>scatter()</code> to plot a scatter-plot of two random variables along with a few common options.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#| label: python-test</span></span>
<span id="cb3-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#| code-fold: true</span></span>
<span id="cb3-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#| code-link: true</span></span>
<span id="cb3-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#| code-tools: true</span></span>
<span id="cb3-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#| eval: false</span></span>
<span id="cb3-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#| echo: true</span></span>
<span id="cb3-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Example code for pytest-mpl exposition."""</span></span>
<span id="cb3-8"></span>
<span id="cb3-9"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb3-10"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy.typing <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> npt</span>
<span id="cb3-11"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb3-12"></span>
<span id="cb3-13"></span>
<span id="cb3-14"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> scatter(</span>
<span id="cb3-15">    n_obs: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>,</span>
<span id="cb3-16">    figsize: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">tuple</span>[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>],</span>
<span id="cb3-17">    title: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>,</span>
<span id="cb3-18">    seed: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3513387</span>,</span>
<span id="cb3-19">) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">tuple</span>:</span>
<span id="cb3-20">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb3-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Generate a scatter plot of two random variables.</span></span>
<span id="cb3-22"></span>
<span id="cb3-23"></span>
<span id="cb3-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Parameters</span></span>
<span id="cb3-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ----------</span></span>
<span id="cb3-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    n_obs : int</span></span>
<span id="cb3-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Number of random observations to generate.</span></span>
<span id="cb3-28"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    figsize : tuple[int, int]</span></span>
<span id="cb3-29"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Shape to plot.</span></span>
<span id="cb3-30"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    seed : int</span></span>
<span id="cb3-31"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Seed for pseudo-random number generation.</span></span>
<span id="cb3-32"></span>
<span id="cb3-33"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns</span></span>
<span id="cb3-34"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    -------</span></span>
<span id="cb3-35"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    tuple(fig, ax)</span></span>
<span id="cb3-36"></span>
<span id="cb3-37"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb3-38">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate two random sets of numbers</span></span>
<span id="cb3-39">    rng <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.default_rng(seed)</span>
<span id="cb3-40">    x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.randn(n_obs)</span>
<span id="cb3-41">    y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.randn(n_obs)</span>
<span id="cb3-42">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the figure</span></span>
<span id="cb3-43">    fig <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>figsize)</span>
<span id="cb3-44">    ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fig.add_subplot()</span>
<span id="cb3-45">    ax.scatter(x, y)</span>
<span id="cb3-46">    plt.title(title)</span>
<span id="cb3-47"></span>
<span id="cb3-48">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> (fig, ax)</span></code></pre></div>
</section>
<section id="defining-a-test" class="level3">
<h3 class="anchored" data-anchor-id="defining-a-test">Defining a test</h3>
<p>We now need a test to check that, for a given set of inputs, the same output is always returned. Following the naming conventions used by <a href="https://docs.pytest.org/en/latest/" target="_blank">pytest</a> we create this at <code>tests/test_mpl_example.py</code>. Matplotlib provides its own <a href="https://matplotlib.org/devdocs/devel/testing.html#writing-an-image-comparison-test" target="_blank"><code>image_comparison</code></a> decorator from Matplotlib itself which requires at a bare minimum the <code>baseline_image</code>. I’m going to skip over its usage and instead introduce the <a href="https://pytest-mpl.readthedocs.io/en/stable/" target="_blank"><code>pytest-mpl</code></a> extension as it offers a few extra features which are really neat. Instead of using the <code>@image_comparsion()</code> decorator we can add the <code>pytest-mpl</code> package to the optional <code>test</code> dependencies in <code>pyproject.toml</code>.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode toml code-with-copy"><code class="sourceCode toml"><span id="cb4-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[project.optional-dependencies]</span></span>
<span id="cb4-2"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">tests</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb4-3">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"py"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb4-4">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pytest"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb4-5">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pytest-cov"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb4-6">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pytest-mpl"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb4-7">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pytest-tmp-files"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb4-8"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span></code></pre></div>
<p>We use the <code>@pytest.mark.mpl_image_compare()</code> decorator to mark a test as having Matplotlib output to indicate that we want to compare images. We need to set the <code>baseline_dir</code> which is where the images against which tests will be compared are stored here it is set to <code>baseline</code> which is relative to the position of the file. We then call our function, in this case <code>mpl_example.scatter()</code> with different sets of parameters (courtesy of <a href="https://blog.nshephard.dev/posts/pytest-param/" target="_blank">pytest parameterisation</a>).</p>
<p>The test itself must <code>return fig</code> of the desired plot so that it can be compared to the reference image each time the test is run.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>We also use the <a href="https://blog.nshephard.dev/posts/pytest-param/" target="_blank">pytest.mark.parametrize()</a> to setup two test scenarios.</p>
</div>
</div>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Tests of the mpl_example module."""</span></span>
<span id="cb5-2"></span>
<span id="cb5-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pytest</span>
<span id="cb5-4"></span>
<span id="cb5-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pytest_examples <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> mpl_example</span>
<span id="cb5-6"></span>
<span id="cb5-7"></span>
<span id="cb5-8"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@pytest.mark.mpl_image_compare</span>(baseline_dir<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"baseline"</span>)</span>
<span id="cb5-9"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@pytest.mark.parametrize</span>(</span>
<span id="cb5-10">    (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n_obs"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"figsize"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"title"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"seed"</span>),</span>
<span id="cb5-11">    [</span>
<span id="cb5-12">        pytest.param(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">300</span>, (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3513387</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"300 points; 6x6; no title"</span>),</span>
<span id="cb5-13">        pytest.param(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3000</span>, (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Lots of points!"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3513387</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"3000 points; 6x6; Lots of points"</span>),</span>
<span id="cb5-14">    ],</span>
<span id="cb5-15">)</span>
<span id="cb5-16"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> test_scatter(n_obs: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>, figsize: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">tuple</span>[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>], title: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, seed: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb5-17">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Test of the scatter() function."""</span></span>
<span id="cb5-18">    fig, _ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mpl_example.scatter(n_obs, figsize, title, seed)</span>
<span id="cb5-19">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> fig</span></code></pre></div>
<p>Once you have decorated your test you need to generate the images against which subsequent tests are to be compared to. This is done using the <code>--mpl-generate-path=</code> flag and providing an appropriate argument. The path is relative to where <code>pytest</code> is running from, in this example we use <code>tests/baseline</code>. We can restrict the test to the specific one we are working by specifying the path to the file and optionally the test within the file as in the below example where the path to the test file (<code>tests/test_mpl_example.py</code>) and the test name (<code>test_scatter_hist</code>) are separated by double colons (<code>::</code>).</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mkdir</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-p</span> tests/resources/img</span>
<span id="cb6-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pytest</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--mpl-generate-path</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>tests/baseline <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">`</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">tests/test_mpl_example.py::test_scatter</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">`</span></span></code></pre></div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>There is subtle difference between the <code>baseline_dir</code> parameter specified in the fixture itself (<code>baseline</code>) and the argument given to <code>--mpl-generate-path=</code> (<code>tests/baseline</code>).</p>
<p>This is because <code>pytest</code> searches for all files beginning with <code>test_</code> in the directory <code>tests</code> and when running <code>pytest</code> you do so from the directory level above where <code>tests</code> resides which is typically the root of your package. Because the test files reside <em>within</em> the <code>tests/</code> directory the relative path to the directory the parameter <code>baseline_dir</code> argument must omit this leading directory.</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> ./tests</span>
<span id="cb7-2"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">&nbsp;&nbsp;</span> ├── ./tests/baseline</span>
<span id="cb7-3"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">&nbsp;&nbsp;</span> └── ./tests/test_mpl_example.py</span></code></pre></div>
</div>
</div>
<p>The tests are skipped “<em>since generating image.</em>”</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb8-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">❱</span> pytest <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--mpl</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--mpl-generate-path</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>baseline tests/test_mpl_example.py</span>
<span id="cb8-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">========================</span> test session starts ==========================</span>
<span id="cb8-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">platform</span> linux <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--</span> Python 3.12.7, pytest-8.3.3, pluggy-1.5.0</span>
<span id="cb8-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Matplotlib:</span> 3.9.2</span>
<span id="cb8-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Freetype:</span> 2.6.1</span>
<span id="cb8-6"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">rootdir:</span> /mnt/work/git/hub/ns-rse/pytest-examples/main</span>
<span id="cb8-7"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">configfile:</span> pyproject.toml</span>
<span id="cb8-8"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">plugins:</span> regtest-2.1.1, anyio-4.6.0, icdiff-0.9, pylint-0.21.0, pytest_tmp_files-0.0.2, syrupy-4.7.1, mpl-0.17.0, cov-5.0.0, mock-3.14.0, xdist-3.6.1, durations-1.3.1</span>
<span id="cb8-9"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">collected</span> 2 items</span>
<span id="cb8-10"></span>
<span id="cb8-11"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">tests/test_mpl_example.py</span> ss                                                                                                                            <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">100%</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb8-12"></span>
<span id="cb8-13"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">----------</span> coverage: platform linux, python 3.12.7-final-0 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-----------</span></span>
<span id="cb8-14"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Name</span>                            Stmts   Miss  Cover</span>
<span id="cb8-15"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">---------------------------------------------------</span></span>
<span id="cb8-16"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pytestexamples/divide.py</span>           16     16     0%</span>
<span id="cb8-17"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pytestexamples/mpl_example.py</span>      13      0   100%</span>
<span id="cb8-18"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pytestexamples/shapes.py</span>            5      5     0%</span>
<span id="cb8-19"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">---------------------------------------------------</span></span>
<span id="cb8-20"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">TOTAL</span>                              34     21    38%</span>
<span id="cb8-21"></span>
<span id="cb8-22"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">========================</span> short test summary info =====================</span>
<span id="cb8-23"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">SKIPPED</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">2</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> ../../../../../../../home/neil/.virtualenvs/pytest-examples/lib/python3.12/site-packages/pytest_mpl/plugin.py:925: Skipped test, since generating image.</span>
<span id="cb8-24"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">========================</span> 2 skipped in 2.46s ===========================</span></code></pre></div>
<p>We can look at the generated images, nothing fancy just some random dots.</p>
<p><img src="https://blog.nshephard.dev/posts/pytest-mpl/img/test_scatter_hist_300_points_baseline.png" style="height:50.0%" alt="First test image of 300 points"> <img src="https://blog.nshephard.dev/posts/pytest-mpl/img/test_scatter_hist_3000_points_baseline.png" style="height:50.0%" alt="Second test image of 3000 points"></p>
<p>The generated images reside within the <code>tests/baseline/</code> directory and as the <code>baseline_dir=baseline</code> argument to the <code>@pytest.mark.mpl_image_compare()</code> is <em>relative</em> to the location of the test file itself which is in <code>test</code> we are good to go. We can re-run the tests with the <code>--mpl</code> flag to check they pass.</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb9-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pytest</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--mpl</span> tests/test_mpl_example::test_scatter</span></code></pre></div>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb10-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">========================</span> test session starts ==========================</span>
<span id="cb10-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">platform</span> linux <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--</span> Python 3.12.7, pytest-8.3.3, pluggy-1.5.0</span>
<span id="cb10-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Matplotlib:</span> 3.9.2</span>
<span id="cb10-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Freetype:</span> 2.6.1</span>
<span id="cb10-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">rootdir:</span> /mnt/work/git/hub/ns-rse/pytest-examples/main</span>
<span id="cb10-6"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">configfile:</span> pyproject.toml</span>
<span id="cb10-7"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">plugins:</span> regtest-2.1.1, anyio-4.6.0, icdiff-0.9, pylint-0.21.0, pytest_tmp_files-0.0.2, syrupy-4.7.1, mpl-0.17.0, cov-5.0.0, mock-3.14.0, xdist-3.6.1, durations-1.3.1</span>
<span id="cb10-8"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">collected</span> 2 items</span>
<span id="cb10-9"></span>
<span id="cb10-10"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">tests/test_mpl_example.py</span> ..                                                                                                                            <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">100%</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb10-11"></span>
<span id="cb10-12"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">----------</span> coverage: platform linux, python 3.12.7-final-0 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-----------</span></span>
<span id="cb10-13"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Name</span>                            Stmts   Miss  Cover</span>
<span id="cb10-14"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">---------------------------------------------------</span></span>
<span id="cb10-15"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pytestexamples/divide.py</span>           16     16     0%</span>
<span id="cb10-16"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pytestexamples/mpl_example.py</span>      13      0   100%</span>
<span id="cb10-17"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pytestexamples/shapes.py</span>            5      5     0%</span>
<span id="cb10-18"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">---------------------------------------------------</span></span>
<span id="cb10-19"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">TOTAL</span>                              34     21    38%</span>
<span id="cb10-20"></span>
<span id="cb10-21"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">===========================</span> 2 passed in 2.56s ===========================</span></code></pre></div>
</section>
<section id="update-pytest-options" class="level3">
<h3 class="anchored" data-anchor-id="update-pytest-options">Update <code>pytest</code> options</h3>
<p>We don’t want to have to remember to use the <code>--mpl</code> flag each time we run the test and we also want to make sure its used in Continuous Integration. This can be achieved by adding the <code>--mpl</code> flag to the <code>pytest</code> options that are defined in <code>pyproject.toml</code>.</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode toml code-with-copy"><code class="sourceCode toml"><span id="cb11-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[tool.pytest.ini_options]</span></span>
<span id="cb11-2">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">...</span></span>
<span id="cb11-3">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">addopts</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"--cov"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"--mpl"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-ra"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"--showlocals"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"--strict-config"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"--strict-markers"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb11-4">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">...</span></span></code></pre></div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>Don’t forget to stage and commit these changes to your repository.</p>
</div>
</div>
<p>Now each time you run your test suite the output of calling the test is compared to the reference images that reside under <code>tests/baseline/</code> (or whatever directory you specified).</p>
</section>
</section>
<section id="failing-tests" class="level2">
<h2 class="anchored" data-anchor-id="failing-tests">Failing tests</h2>
<p>Sometimes your tests might fail. To demonstrate this we change the title of one of for one of the parameters to <code>Another title</code> in <code>tests/test_mpl_example.py</code> and re-run the tests, sure enough the test fails. We are told the <code>RMS Value</code> (the Root Mean Square difference value) along with the location of the test files of which there are three images, a copy of the baseline, the result and a difference between the two.</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb12-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">❱</span> pytest <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--mpl</span>  tests/test_mpl_example.py</span>
<span id="cb12-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">==========================</span> test session starts =======================</span>
<span id="cb12-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">platform</span> linux <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--</span> Python 3.12.7, pytest-8.3.3, pluggy-1.5.0</span>
<span id="cb12-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Matplotlib:</span> 3.9.2</span>
<span id="cb12-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Freetype:</span> 2.6.1</span>
<span id="cb12-6"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">rootdir:</span> /mnt/work/git/hub/ns-rse/pytest-examples/main</span>
<span id="cb12-7"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">configfile:</span> pyproject.toml</span>
<span id="cb12-8"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">plugins:</span> regtest-2.1.1, anyio-4.6.0, icdiff-0.9, pylint-0.21.0, pytest_tmp_files-0.0.2, syrupy-4.7.1, mpl-0.17.0, cov-5.0.0, mock-3.14.0, xdist-3.6.1, durations-1.3.1</span>
<span id="cb12-9"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">collected</span> 2 items</span>
<span id="cb12-10"></span>
<span id="cb12-11"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">tests/test_mpl_example.py</span> F.                                                                                                                            <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">100%</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb12-12"></span>
<span id="cb12-13"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">==========================</span> FAILURES ==================================</span>
<span id="cb12-14"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">________________</span> test_scatter[300 points<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">6x6</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">no</span> title] ______</span>
<span id="cb12-15"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Error:</span> Image files did not match.</span>
<span id="cb12-16">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">RMS</span> Value: 8.551853600243634</span>
<span id="cb12-17">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Expected:</span></span>
<span id="cb12-18">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">/tmp/tmpn9ucgc47/tests.test_mpl_example.test_scatter_300</span> points<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">6x6</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">no</span> title/baseline.png</span>
<span id="cb12-19">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Actual:</span></span>
<span id="cb12-20">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">/tmp/tmpn9ucgc47/tests.test_mpl_example.test_scatter_300</span> points<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">6x6</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">no</span> title/result.png</span>
<span id="cb12-21">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Difference:</span></span>
<span id="cb12-22">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">/tmp/tmpn9ucgc47/tests.test_mpl_example.test_scatter_300</span> points<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">6x6</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">no</span> title/result-failed-diff.png</span>
<span id="cb12-23">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Tolerance:</span></span>
<span id="cb12-24">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb12-25"></span>
<span id="cb12-26"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">----------</span> coverage: platform linux, python 3.12.7-final-0 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-----------</span></span>
<span id="cb12-27"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Name</span>                            Stmts   Miss  Cover</span>
<span id="cb12-28"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">---------------------------------------------------</span></span>
<span id="cb12-29"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pytestexamples/divide.py</span>           16     16     0%</span>
<span id="cb12-30"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pytestexamples/mpl_example.py</span>      13      0   100%</span>
<span id="cb12-31"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pytestexamples/shapes.py</span>            5      5     0%</span>
<span id="cb12-32"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">---------------------------------------------------</span></span>
<span id="cb12-33"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">TOTAL</span>                              34     21    38%</span>
<span id="cb12-34"></span>
<span id="cb12-35"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">==========================</span> short test summary info ======================</span>
<span id="cb12-36"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">FAILED</span> tests/test_mpl_example.py::test_scatter[300 points<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">6x6</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">no</span> title] <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-</span> Failed: Error: Image files did not match.</span>
<span id="cb12-37"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">==========================</span> 1 failed, 1 passed in 2.45s ==================</span></code></pre></div>
<p>Navigating to and viewing these files is pretty easy when there is only one test that has failed but when more than one test fails they are all in their own directory and navigating and viewing them takes a bit longer.</p>
<section id="mpl-generate-summary" class="level3">
<h3 class="anchored" data-anchor-id="mpl-generate-summary"><code>--mpl-generate-summary</code></h3>
<p>This is where the <code>--mpl-generate-summary</code> option comes in really handy as it will generate a report of the differences in either <code>html</code>, <code>json</code> or <code>basic-html</code>. Here I’ll show the use of the <code>html</code> option and what it produces.</p>
<p>By default the report is created under <code>/tmp/</code> but with the <code>--mpl-results-path</code> you can specify a location relative to where the tests are being run from. You do not need to create the directory/path it will be created for you. That said I’m not that bothered about keeping the test image comparisons though so I typically omit the <code>--mpl-generate-path</code> option and instead the output and use the <code>/tmp/</code> directory, that way my project directory doesn’t get cluttered with files as this is wiped when the computer is rebooted.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>If you do use <code>--mpl-results-path</code> to specify a nested directory within your repository you would probably want to exclude it from being included in version control though so add the path to <code>.gitignore</code>.</p>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>Remember we have added the <code>--mpl</code> flag to the general <code>tool.pytest.ini_options</code> in <code>pyproject.toml</code> to ensure <code>pytest-mpl</code> extension is enabled and run.</p>
</div>
</div>
<p>Lets run the tests, which we know will fail, with the <code>--mpl-generate-summary=html</code> option enabled (and not using <code>--mpl-results-path</code>) .</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb13-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pytest</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--mpl-generate-summary</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>html tests/test_mpl_example.py</span></code></pre></div>
<p>The output is virtually identical but there is an additional line at the end…</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb14-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">❱</span> pytest <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--mpl</span>  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--mpl-generate-summary</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>html tests/test_mpl_example.py</span>
<span id="cb14-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">==========================</span> test session starts =======================</span>
<span id="cb14-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">platform</span> linux <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--</span> Python 3.12.7, pytest-8.3.3, pluggy-1.5.0</span>
<span id="cb14-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Matplotlib:</span> 3.9.2</span>
<span id="cb14-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Freetype:</span> 2.6.1</span>
<span id="cb14-6"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">rootdir:</span> /mnt/work/git/hub/ns-rse/pytest-examples/main</span>
<span id="cb14-7"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">configfile:</span> pyproject.toml</span>
<span id="cb14-8"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">plugins:</span> regtest-2.1.1, anyio-4.6.0, icdiff-0.9, pylint-0.21.0, pytest_tmp_files-0.0.2, syrupy-4.7.1, mpl-0.17.0, cov-5.0.0, mock-3.14.0, xdist-3.6.1, durations-1.3.1</span>
<span id="cb14-9"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">collected</span> 2 items</span>
<span id="cb14-10"></span>
<span id="cb14-11"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">tests/test_mpl_example.py</span> F.                                                                                                                            <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">100%</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb14-12"></span>
<span id="cb14-13"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">==========================</span> FAILURES ==================================</span>
<span id="cb14-14"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">_________________</span> test_scatter[300 points<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">6x6</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">no</span> title<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">green]</span> _____</span>
<span id="cb14-15"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Error:</span> Image files did not match.</span>
<span id="cb14-16">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">RMS</span> Value: 8.551853600243634</span>
<span id="cb14-17">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Expected:</span></span>
<span id="cb14-18">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">/tmp/tmp1bzvguuq/tests.test_mpl_example.test_scatter_300</span> points<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">6x6</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">no</span> title<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">green/baseline.png</span></span>
<span id="cb14-19">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Actual:</span></span>
<span id="cb14-20">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">/tmp/tmp1bzvguuq/tests.test_mpl_example.test_scatter_300</span> points<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">6x6</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">no</span> title<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">green/result.png</span></span>
<span id="cb14-21">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Difference:</span></span>
<span id="cb14-22">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">/tmp/tmp1bzvguuq/tests.test_mpl_example.test_scatter_300</span> points<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">6x6</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">no</span> title<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">green/result-failed-diff.png</span></span>
<span id="cb14-23">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Tolerance:</span></span>
<span id="cb14-24">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb14-25"></span>
<span id="cb14-26"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">----------</span> coverage: platform linux, python 3.12.7-final-0 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-----------</span></span>
<span id="cb14-27"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Name</span>                            Stmts   Miss  Cover</span>
<span id="cb14-28"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">---------------------------------------------------</span></span>
<span id="cb14-29"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pytestexamples/divide.py</span>           16     16     0%</span>
<span id="cb14-30"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pytestexamples/mpl_example.py</span>      13      0   100%</span>
<span id="cb14-31"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pytestexamples/shapes.py</span>            5      5     0%</span>
<span id="cb14-32"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">---------------------------------------------------</span></span>
<span id="cb14-33"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">TOTAL</span>                              34     21    38%</span>
<span id="cb14-34"></span>
<span id="cb14-35"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">==========================</span> short test summary info ======================</span>
<span id="cb14-36"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">FAILED</span> tests/test_mpl_example.py::test_scatter[300 points<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">6x6</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">no</span> title<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">green]</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-</span> Failed: Error: Image files did not match.</span>
<span id="cb14-37"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">==========================</span> 1 failed, 1 passed in 2.50s ==================</span>
<span id="cb14-38"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">A</span> summary of test results can be found at: /tmp/tmp1bzvguuq/fig_comparison.html</span></code></pre></div>
<p>If we open the test results in our browser we have a nice summary of the tests that have passed and failed.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.nshephard.dev/posts/pytest-mpl/img/mpl_generate_summary_overview.png" class="img-fluid figure-img"></p>
<figcaption>Overview generated by <code>pytest --mpl-generate-summary=html</code></figcaption>
</figure>
</div>
<p>If we want to look at a specific failed test we can, on the left we see the baseline image, on the right the test image and in-between a plot showing the differences between the two. We also have the “Root Mean Square Error” reported for the test.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.nshephard.dev/posts/pytest-mpl/img/mpl_generate_summary_failed_detail.png" class="img-fluid figure-img"></p>
<figcaption>Detailed view of a failed test generated by <code>pytest --mpl-generate-summary=html</code></figcaption>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.nshephard.dev/posts/pytest-mpl/img/mpl_generate_summary_pass_detail.png" class="img-fluid figure-img"></p>
<figcaption>Detailed view of a pass test generated by <code>pytest --mpl-generate-summary=html</code></figcaption>
</figure>
</div>
</section>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>If your package produces plots its easy to write tests that check they are correctly generated using the <a href="https://pytest-mpl.readthedocs.io/en/stable/" target="_blank">pytest-mpl</a> extension and there is a neat convenience option to generate summaries of tests to make viewing the failures and differences in your browser convenient.</p>
<section id="key-points" class="level3">
<h3 class="anchored" data-anchor-id="key-points">Key Points</h3>
<ul>
<li>You have to generate reference images against which the tests are run.</li>
<li>You should add the <code>--mpl</code> option to the <code>tools.pytest.ini_options</code> section of your <code>pyproject.toml</code> under <code>addopts</code> to ensure the extension is used whenever tests are run, be that locally or in Continuous Integration.</li>
<li>If you find tests are failing you can easily generate a web-page summarising the passes and failures using the <code>--mpl-generate-summary=html</code> flag when invoking <code>pytest</code> to get an HTML summary that is easy to navigate.</li>
</ul>



</section>
</section>

<div class="quarto-listing quarto-listing-container-default" id="listing-listing">
<div class="list quarto-listing-default">

</div>
<div class="listing-no-matching d-none">
No matching items
</div>
</div><div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{shephard2024,
  author = {Shephard, Neil},
  title = {Pytest {Matplotlib}},
  date = {2024-09-24},
  url = {https://blog.nshephard.dev/posts/pytest-mpl/},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-shephard2024" class="csl-entry quarto-appendix-citeas">
Shephard, Neil. 2024. <span>“Pytest Matplotlib .”</span> September 24,
2024. <a href="https://blog.nshephard.dev/posts/pytest-mpl/">https://blog.nshephard.dev/posts/pytest-mpl/</a>.
</div></div></section></div> ]]></description>
  <category>python</category>
  <category>testing</category>
  <category>pytest</category>
  <category>matplotlib</category>
  <category>pytest-mpl</category>
  <guid>https://blog.nshephard.dev/posts/pytest-mpl/</guid>
  <pubDate>Tue, 24 Sep 2024 00:00:00 GMT</pubDate>
  <media:content url="https://live.staticflickr.com/65535/54027972058_a393643e56_k.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>virtualenvwrapper hooks</title>
  <dc:creator>Neil Shephard</dc:creator>
  <link>https://blog.nshephard.dev/posts/virtualenv-hooks/</link>
  <description><![CDATA[ 





<p>I’ve written <a href="https://blog.nshephard.dev/posts/virtualenvwrapper/" target="_blank">previously</a> about <a href="https://virtualenvwrapper.readthedocs.io/en/latest/" target="_blank"><code>virtualenvwrapper</code></a> which I use to manage my Python Virtual Environments and mentioned the possibility of using hooks but didn’t go into detail.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://live.staticflickr.com/65535/53878835844_88658e86cb_k.jpg" class="img-fluid figure-img"></p>
<figcaption><a href="https://www.flickr.com/photos/slackline/53878835844/" target="_blank">South Coast of Portugal by Me</a></figcaption>
</figure>
</div>
<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>Just like the various hooks available in Git, <a href="https://virtualenvwrapper.readthedocs.io/en/latest/" target="_blank"><code>virtualenvwrapper</code></a> also supports <a href="https://virtualenvwrapper.readthedocs.io/en/latest/scripts.html#per-user-customization" target="_blank">hooks</a> that allow scripts to be run in response to various events. These reside under your <code>$VIRTUALENVWRAPPER_HOOK_DIR</code> which by default is the same as your <code>$WORKON_HOME</code> directory and in a typical standard installation will be <code>~/.virtualenvs</code>.</p>
<p>The available scripts that are recognised are…</p>
<ul>
<li><code>get_env_details</code></li>
<li><code>initialize</code></li>
<li><code>premkvirtualenv</code></li>
<li><code>postmkvirtualenv</code></li>
<li><code>precpvirtualenv</code></li>
<li><code>postcpvirtualenv</code></li>
<li><code>preactivate</code></li>
<li><code>postactivate</code></li>
</ul>
<p>Each of these is a simple shell script and will start with the scripting language to use e.g.&nbsp;<code>#!/usr/bin/bash</code> or <code>#!/usr/bin/zsh</code> depending on your shell. You can then script the actions you wish to take when the script is executed.</p>
</section>
<section id="install-minimal-requirements" class="level2">
<h2 class="anchored" data-anchor-id="install-minimal-requirements">Install minimal requirements</h2>
<p>I’m a big fan of <a href="https://dotfiles.github.io" target="_blank">dotfiles</a><sup>1</sup>, mine are <a href="https://gitlab.com/nshephard/dotfiles/" target="_blank">hosted on GitLab</a>, it’s a repository of my configuration files and scripts that I use regularly across multiple computers. Because I’m lazy I wrote a couple of <code>requirements.txt</code> files for installing packages in my virtual environments.</p>
<ul>
<li><a href="https://gitlab.com/nshephard/dotfiles/-/blob/master/python/requirements.txt?ref_type=heads" target="_blank"><code>requirements.txt</code></a> : holds everything I might ever want to use in Python.</li>
<li><dl>
<dt><a href="https://gitlab.com/nshephard/dotfiles/-/blob/master/python/requirements.txt?ref_type=heads" target="_blank"><code>python-lsp-requirements.txt</code></a></dt>
<dd>
Install packages for setting up a Python Language Server (which I use from Emacs).
</dd>
</dl></li>
<li><dl>
<dt><a href="https://gitlab.com/nshephard/dotfiles/-/blob/master/python/venv_minimal_requirements.txt?ref_type=heads" target="_blank"><code>venv_minimal_requirements.txt</code></a></dt>
<dd>
a minimal set of the most common Python packages I am likely to want when creating a new virtual environment.
</dd>
</dl></li>
</ul>
<p>Because I have my <code>dotfiles</code> cloned to the same location on every computer (<code>~/dotfiles</code>) I added the following to the <code>~/.virtualenvs/postmkvirtualenv</code> <sup>2</sup> which will install all of the packages listed in <code>~/dotfiles/python/venv_minimal_requirements.txt</code> whenever a create a new virtual environment, whether that is with <code>mkvritualenv</code> or <code>mktmpenv</code>.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--no-cache-dir</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-r</span> ~/dotfiles/python/venv_minimal_requirements.txt</span></code></pre></div>
<p>This ensured the latest versions of each packages listed in <code>~/dotfiles/python/venv_minimal_requirements.txt</code> were downloaded and installed as the <code>--no-cache-dir</code> prevents using cached versions of packages.</p>
</section>
<section id="a-smarter-script" class="level2">
<h2 class="anchored" data-anchor-id="a-smarter-script">A smarter script</h2>
<p>This served me well for a time, but occasionally I found I <em>didn’t</em> want to install <em>any</em> packages in a new virtual environment (most often when testing new branches using <code>mktmpenv</code>) and I’d have to remember to comment out the line in the hook file (<code>~/.virtualenvs/postmkvirtualenv</code>) before creating the environment. Typically though I’d forget to do this and would have to halt installation of required packages, deactivate the environment, <em>then</em> comment it out and create a new environment.</p>
<p>This quickly became irksome.</p>
<p>But <code>~/.virtualenvs/postmkvirtualenv</code> is just a script and so we can use a bit of scripting knowledge to make it interactive and ask the user if they want to install the packages listed in <code>venv_minimal_requirements.txt</code>. I found a really useful answer on StackOverflow in the <a href="https://stackoverflow.com/a/226724/1444043" target="_blank">How do I prompt for yes/no/cancel input in a Linux shell script</a> that showed several different ways to prompt the user for a response as to whether they want to do something.</p>
<p>I therefore updated my <a href="https://gitlab.com/nshephard/dotfiles/-/blob/master/python/postmkvirtualenv?ref_type=heads" target="_blank"><code>~/.virtualenvs/postmkvirtualenv</code></a> to the following which prompts for a numeric response, <code>1</code> for <code>Yes</code> and <code>2</code> for <code>No</code> and takes the appropriate action, installing using my original invocation of <code>pip</code> if I want to install packages and enter <code>1</code> or installing nothing if I enter <code>2</code>.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#!/usr/bin/zsh</span></span>
<span id="cb2-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This hook is sourced after a new virtualenv is activated.</span></span>
<span id="cb2-3"></span>
<span id="cb2-4"></span>
<span id="cb2-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Do you wish to install minimal requirements (from venv_minimal_requirements.txt)? "</span></span>
<span id="cb2-6"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">select</span> yn <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Yes"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"No"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">do</span></span>
<span id="cb2-7">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">case</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$yn</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span></span>
<span id="cb2-8">    <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">Yes</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--no-cache-dir</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-r</span> ~/dotfiles/python/venv_minimal_requirements.txt<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">break;;</span></span>
<span id="cb2-9">    <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">No</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"No packages installed. install packages with 'pip'.\n"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">break;;</span></span>
<span id="cb2-10">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">esac</span></span>
<span id="cb2-11"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">done</span></span></code></pre></div>
<p><strong>NB</strong> You may want to tweak the opening shebang if you use the Bash shell.</p>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>A little bit of shell scripting knowledge can be really powerful when used in conjunction with “hooks”. This is true of <a href="https://virtualenvwrapper.readthedocs.io/en/latest/" target="_blank"><code>virtualenvwrapper</code></a> as well as of Git and the <a href="https://blog.nshephard.dev/posts/pre-commit-hooks/" target="_blank">pre-commit</a> framework.</p>



</section>


<div class="quarto-listing quarto-listing-container-default" id="listing-listing">
<div class="list quarto-listing-default">

</div>
<div class="listing-no-matching d-none">
No matching items
</div>
</div><div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>There is a wealth of information on what you can do with your <code>dotfiles</code> but that is an article in itself and I’m yet to write it. A useful set of different aliases you could use can be found <a href="https://dotfiles.io/about/#introduction" target="_blank">here</a>↩︎</p></li>
<li id="fn2"><p>Actually I create the script in <a href="https://gitlab.com/nshephard/dotfiles/-/blob/master/python/postmkvirtualenv?ref_type=heads" target="_blank"><code>~/dotfiles/python/postmkvirtualenv</code></a> and made a symbolic link at <code>~/.virtualenv/postmkvirtualenv</code> that points to it so that whenever I update or improve this script it is updated across my computers.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{shephard2024,
  author = {Shephard, Neil},
  title = {Virtualenvwrapper Hooks},
  date = {2024-07-31},
  url = {https://blog.nshephard.dev/posts/virtualenv-hooks/},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-shephard2024" class="csl-entry quarto-appendix-citeas">
Shephard, Neil. 2024. <span>“Virtualenvwrapper Hooks.”</span> July 31,
2024. <a href="https://blog.nshephard.dev/posts/virtualenv-hooks/">https://blog.nshephard.dev/posts/virtualenv-hooks/</a>.
</div></div></section></div> ]]></description>
  <category>python</category>
  <category>virtual environments</category>
  <category>bash</category>
  <category>dotfiles</category>
  <guid>https://blog.nshephard.dev/posts/virtualenv-hooks/</guid>
  <pubDate>Wed, 31 Jul 2024 00:00:00 GMT</pubDate>
  <media:content url="https://live.staticflickr.com/65535/53878835844_88658e86cb_k.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Pytest Fail and Skip</title>
  <dc:creator>Neil Shephard</dc:creator>
  <link>https://blog.nshephard.dev/posts/pytest-xfail/</link>
  <description><![CDATA[ 





<p><a href="https://docs.pytest.org/en/latest/" target="_blank">Pytest</a> is an excellent framework for writing tests in <a href="https://python.org" target="_blank">Python</a>. Sometimes tests don’t pass though and you might want to mark them as failing or skip them.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://live.staticflickr.com/65535/53621640633_c257fcf8b5_k.jpg" class="img-fluid figure-img"></p>
<figcaption><a href="https://flickr.com/photos/slackline/53621640633/in/datetaken/" target="_blank">Against the Clouds by Me</a></figcaption>
</figure>
</div>
<p><a href="https://docs.pytest.org/en/latest/" target="_blank">Pytest</a> has a few <a href="https://realpython.com/primer-on-python-decorators/" target="_blank">decorators</a> available to help with skipping tests using <a href="https://docs.pytest.org/en/latest/reference/reference.html#pytest-mark-skip" target="_blank"><code>@pytest.mark.skip</code></a> or <a href="https://docs.pytest.org/en/latest/reference/reference.html#pytest-mark-skipif" target="_blank"><code>@pytest.mark.skipif</code></a> or allowing tests to fail with <a href="https://docs.pytest.org/en/latest/reference/reference.html#pytest-mark-xfail" target="_blank"><code>@pytest.mark.xfail</code></a></p>
<p>We’ll use the <a href="https://github.com/ns-rse/pytest-examples" target="_blank">pytest-examples</a> repository for looking at how these work.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> clone git@github.com:ns-rse/pytest-examples.git</span>
<span id="cb1-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cd</span> pytest-examples</span></code></pre></div>
<section id="why" class="level2">
<h2 class="anchored" data-anchor-id="why">Why?</h2>
<p>There are a number of reasons why you may wish to deliberately and <a href="https://pytest-with-eric.com/pytest-best-practices/pytest-skip-test/#Why-Skip-A-Unit-Test" target="_blank">Eric covers them nicely</a>. In brief…</p>
<ul>
<li>Incompatible Python or Package Version - some tests don’t pass under a certain version.</li>
<li>Platform specific issues - some tests fail on a specific platform.</li>
<li>External dependencies - if you haven’t got round to mocking a service.</li>
<li>Local dependencies - excluding tests running under Continuous Integration that rely on local dependencies.</li>
</ul>
</section>
<section id="choose-your-partner---skip-to-my-lou" class="level2">
<h2 class="anchored" data-anchor-id="choose-your-partner---skip-to-my-lou">Choose your Partner - Skip (to my lou)</h2>
<p>If you want to unconditionally skip a test prefix it with <code>@pytest.mark.skip()</code>, adding a reason can be useful and there is the argument <code>reason="&lt;reason&gt;"</code>to do so, it helps others, including your future self. If we use the <code>tests/test_divide.py</code> from the <a href="https://github.com/ns-rse/pytest-examples" target="_blank">pytest-examples</a> repository we can skip the redundant <code>test_divide_unparameterised()</code> function as its already covered by the parameterised test that follows.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@pytest.mark.skip</span>(reason<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"redundant - covered by test_divide()"</span>)</span>
<span id="cb2-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> test_divide_unparameterised() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb2-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Test the divide function."""</span></span>
<span id="cb2-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">assert</span> divide(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span></code></pre></div>
<p>When we run the test we are told it is skipped. To keep things fast we run just that test using the command line version <code>pytest &lt;file&gt;::&lt;test_function&gt;</code> but your IDE may support running individual tests (in <a href="https://www.gnu.org/software/emacs/" target="_blank">Emacs</a> you can use <a href="https://github.com/ionrock/pytest-el/tree/8692f965bf4ddf3d755cf1fbf77a7a768e22460e" target="_blank">pytest.el</a> to the same effect).</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">❱</span> pytest tests/test_divide::test_divide_unparameterised</span>
<span id="cb3-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">=======================================</span> test session starts ============================================</span>
<span id="cb3-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">platform</span> linux <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--</span> Python 3.11.9, pytest-7.4.4, pluggy-1.5.0</span>
<span id="cb3-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Matplotlib:</span> 3.8.4</span>
<span id="cb3-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Freetype:</span> 2.6.1</span>
<span id="cb3-6"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">rootdir:</span> /mnt/work/git/hub/ns-rse/pytest-examples/main</span>
<span id="cb3-7"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">configfile:</span> pyproject.toml</span>
<span id="cb3-8"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">plugins:</span> durations-1.2.0, xdist-3.5.0, pytest_tmp_files-0.0.2, mpl-0.17.0, lazy-fixture-0.6.3, cov-5.0.0</span>
<span id="cb3-9"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">collected</span> 1 item</span>
<span id="cb3-10"></span>
<span id="cb3-11"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">tests/test_divide.py</span> s                                                                            <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">100%</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb3-12"></span>
<span id="cb3-13"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">----------</span> coverage: platform linux, python 3.11.9-final-0 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-----------</span></span>
<span id="cb3-14"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Name</span>                        Stmts   Miss  Cover</span>
<span id="cb3-15"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">-----------------------------------------------</span></span>
<span id="cb3-16"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pytest_examples/divide.py</span>      16      8    50%</span>
<span id="cb3-17"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pytest_examples/shapes.py</span>       5      5     0%</span>
<span id="cb3-18"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">-----------------------------------------------</span></span>
<span id="cb3-19"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">TOTAL</span>                          21     13    38%</span>
<span id="cb3-20"></span>
<span id="cb3-21"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">======================================</span> short test summary info =========================================</span>
<span id="cb3-22"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">SKIPPED</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> tests/test_divide.py:9: redundant <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-</span> covered by test_divide<span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span></span>
<span id="cb3-23"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">======================================</span> 1 skipped in 0.59s ==============================================</span></code></pre></div>
</section>
<section id="choose-your-partner---failing" class="level2">
<h2 class="anchored" data-anchor-id="choose-your-partner---failing">Choose your Partner - Failing (…)</h2>
<p>Nothing in the the <a href="https://en.wikipedia.org/wiki/Skip_to_My_Lou" target="_blank">old dance</a> about failing but you can selectively allow tests to fail using the <code>pytest.mark.xfail()</code> fixture. If you know a test is going to fail you can, rather than commenting it out, mark it as such. If we update the test condition so we know it will fail we mark that it will fail as follows.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@pytest.mark.xfail</span>(reason<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"demonstrate expected failure"</span>)</span>
<span id="cb4-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> test_divide_unparameterised() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb4-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Test the divide function."""</span></span>
<span id="cb4-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">assert</span> divide(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span></code></pre></div>
<p>And running <code>pytest</code> on this shows the failure</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">❱</span> pytest tests/test_divide.py::test_divide_unparameterised</span>
<span id="cb5-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">======================================</span> test session starts =============================================</span>
<span id="cb5-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">platform</span> linux <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--</span> Python 3.11.9, pytest-7.4.4, pluggy-1.5.0</span>
<span id="cb5-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Matplotlib:</span> 3.8.4</span>
<span id="cb5-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Freetype:</span> 2.6.1</span>
<span id="cb5-6"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">rootdir:</span> /mnt/work/git/hub/ns-rse/pytest-examples/main</span>
<span id="cb5-7"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">configfile:</span> pyproject.toml</span>
<span id="cb5-8"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">plugins:</span> durations-1.2.0, xdist-3.5.0, pytest_tmp_files-0.0.2, mpl-0.17.0, lazy-fixture-0.6.3, cov-5.0.0</span>
<span id="cb5-9"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">collected</span> 1 item</span>
<span id="cb5-10"></span>
<span id="cb5-11"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">tests/test_divide.py</span> x                                                                            <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">100%</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb5-12"></span>
<span id="cb5-13"></span>
<span id="cb5-14"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">----------</span> coverage: platform linux, python 3.11.9-final-0 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-----------</span></span>
<span id="cb5-15"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Name</span>                        Stmts   Miss  Cover</span>
<span id="cb5-16"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">-----------------------------------------------</span></span>
<span id="cb5-17"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pytest_examples/divide.py</span>      16      6    62%</span>
<span id="cb5-18"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pytest_examples/shapes.py</span>       5      5     0%</span>
<span id="cb5-19"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">-----------------------------------------------</span></span>
<span id="cb5-20"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">TOTAL</span>                          21     11    48%</span>
<span id="cb5-21"></span>
<span id="cb5-22"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">======================================</span> short test summary info =========================================</span>
<span id="cb5-23"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">XFAIL</span> tests/test_divide.py::test_divide_unparameterised <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-</span> demonstrate expected failure</span>
<span id="cb5-24"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">======================================</span> 1 skipped in 0.59s ==============================================</span></code></pre></div>
</section>
<section id="conditional-skippingfailing" class="level2">
<h2 class="anchored" data-anchor-id="conditional-skippingfailing">Conditional Skipping/Failing</h2>
<p>The <code>pytest.mark.skipif()</code> and <code>pytest.mark.xfail()</code> fixtures both have the argument <code>condition</code> which allows you to use a Boolean (i.e.&nbsp;a statement that evaluates to <code>True</code> or <code>False</code>) to determine whether they are used. Any Python expression that can be evaluated to <code>True</code> or <code>False</code> can be used and for backwards compatibility <a href="https://docs.pytest.org/en/latest/historical-notes.html#string-conditions" target="_blank">strings can still be used</a>. If <code>condition</code> argument is used in <code>pytest.mark.xfail()</code> then the <code>reason</code> argument must also be given indicating why the test is being skipped/is expected to failed.</p>
<p>Here we fail the test only if the Python version is 3.10.*. Note the need to <code>import sys</code> and the use of <code>sys.version_info[:2]</code> to extract a tuple of the major and minor Python version).</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> sys</span>
<span id="cb6-2"></span>
<span id="cb6-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@pytest.mark.xfail</span>(sys.version_info[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>), reason<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Skip under Python 3.10"</span>))</span>
<span id="cb6-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> test_divide_unparameterised() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb6-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Test the divide function."""</span></span>
<span id="cb6-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">assert</span> divide(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span></code></pre></div>
</section>
<section id="skippingfailing-parameterised-tests" class="level2">
<h2 class="anchored" data-anchor-id="skippingfailing-parameterised-tests">Skipping/Failing Parameterised Tests</h2>
<p>In many instances you can <a href="https://blog.nshephard.dev/posts/pytest-param/" target="_blank">parameterise tests</a>, and you can use the fixtures we’ve covered against the whole test. But what if you want to skip not all of the parameterised tests but only specific ones? This is possible because as covered <a href="https://blog.nshephard.dev/posts/pytest-param/" target="_blank">previously</a> you can use <code>pytest.param()</code> function to define your parameters and give them <code>id="some text"</code> to help identify them. <code>pytest.param()</code> also has a <code>marks=</code> option which allows you to add <code>pytest.mark.*</code> to just that set of parameters and so we can add <code>pytest.mark.xfail()</code> or <code>pytest.mark.skip[if]()</code> to specific sets of parameters.</p>
<p>Instead of placing the fixture before the test so that it applies to all functions, you use the <code>pytest.param()</code> for each set of parameters and add <code>pytest.mark.xfails()</code> (or other variants) as arguments to the <code>marks</code> option.</p>
<p>Here we mark the test with <code>id</code> of <code>zero division error</code> with <code>marks=pytest.mark.xfail</code> as we know that a division by zero test will fail and so that set of parameters should be skipped.</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@pytest.mark.parametrize</span>(</span>
<span id="cb7-2">    (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"b"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"expected"</span>),</span>
<span id="cb7-3">    [</span>
<span id="cb7-4">        pytest.param(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ten divided by five"</span>),</span>
<span id="cb7-5">        pytest.param(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"nine divided by three"</span>),</span>
<span id="cb7-6">        pytest.param(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.5</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"five divided by two"</span>),</span>
<span id="cb7-7">        pytest.param(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"zero divided by one hundred"</span>),</span>
<span id="cb7-8">        pytest.param(</span>
<span id="cb7-9">            <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ZeroDivisionError</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"zero division error"</span>, marks<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>pytest.mark.xfail(reason<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Expected to fail"</span>)),</span>
<span id="cb7-10">    ],</span>
<span id="cb7-11">)</span>
<span id="cb7-12"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> test_divide(a: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>, b: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>, expected: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb7-13">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Test the divide function."""</span></span>
<span id="cb7-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">assert</span> divide(a, b) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> expected</span></code></pre></div>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb8-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">❱</span> pytest tests/test_divide.py::test_divide</span>
<span id="cb8-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">======================================</span> test session starts =============================================</span>
<span id="cb8-3"></span>
<span id="cb8-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">platform</span> linux <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--</span> Python 3.11.9, pytest-7.4.4, pluggy-1.5.0</span>
<span id="cb8-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Matplotlib:</span> 3.8.4</span>
<span id="cb8-6"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Freetype:</span> 2.6.1</span>
<span id="cb8-7"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">rootdir:</span> /mnt/work/git/hub/ns-rse/pytest-examples/main</span>
<span id="cb8-8"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">configfile:</span> pyproject.toml</span>
<span id="cb8-9"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">plugins:</span> durations-1.2.0, xdist-3.5.0, pytest_tmp_files-0.0.2, mpl-0.17.0, lazy-fixture-0.6.3, cov-5.0.0</span>
<span id="cb8-10"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">collected</span> 5 items</span>
<span id="cb8-11"></span>
<span id="cb8-12"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">tests/test_divide.py</span> ....x                                                                        <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">100%</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb8-13"></span>
<span id="cb8-14"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">----------</span> coverage: platform linux, python 3.11.9-final-0 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-----------</span></span>
<span id="cb8-15"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Name</span>                        Stmts   Miss  Cover</span>
<span id="cb8-16"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">-----------------------------------------------</span></span>
<span id="cb8-17"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pytest_examples/divide.py</span>      16      3    81%</span>
<span id="cb8-18"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pytest_examples/shapes.py</span>       5      5     0%</span>
<span id="cb8-19"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">-----------------------------------------------</span></span>
<span id="cb8-20"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">TOTAL</span>                          21      8    62%</span>
<span id="cb8-21"></span>
<span id="cb8-22"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">======================================</span> short test summary info =========================================</span>
<span id="cb8-23"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">XFAIL</span> tests/test_divide.py::test_divide[zero division error] <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-</span> Expected to fail</span>
<span id="cb8-24"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">======================================</span> 4 passed, 1 xfailed in 0.37s ====================================</span></code></pre></div>
<p>The <code>condition</code>/<code>reason</code> arguments to both <code>pytest.mark.skipif()</code> and <code>pytest.mark.xfail()</code> functions are still valid and can be used to conditionally mark specific sets of parameters to be skipped or indicate if they will fail under certain conditions.</p>
<p>To exclude the test with <code>id</code> of <code>five divided by two</code> under Python 3.10 we would do the following (again note the need to <code>import sys</code> and its use in the <code>cond</code> positional argument).</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> sys</span>
<span id="cb9-2"></span>
<span id="cb9-3">...</span>
<span id="cb9-4"></span>
<span id="cb9-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@pytest.mark.parametrize</span>(</span>
<span id="cb9-6">    (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"b"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"expected"</span>),</span>
<span id="cb9-7">    [</span>
<span id="cb9-8">        pytest.param(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ten divided by five"</span>),</span>
<span id="cb9-9">        pytest.param(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"nine divided by three"</span>),</span>
<span id="cb9-10">        pytest.param(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.5</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"five divided by two"</span>, marks<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>pytest.mark.xfail(sys.version_info[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>),</span>
<span id="cb9-11">                                                                                  reason<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Skip under Python 3.10"</span>)),</span>
<span id="cb9-12">        pytest.param(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"zero divided by one hundred"</span>),</span>
<span id="cb9-13">        pytest.param(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ZeroDivisionError</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"zero division error"</span>, marks<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>pytest.mark.xfail),</span>
<span id="cb9-14">    ],</span>
<span id="cb9-15">)</span>
<span id="cb9-16"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> test_divide(a: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>, b: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>, expected: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb9-17">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Test the divide function."""</span></span>
<span id="cb9-18">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">assert</span> divide(a, b) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> expected</span></code></pre></div>
</section>
<section id="summary" class="level2">
<h2 class="anchored" data-anchor-id="summary">Summary</h2>
<p><a href="https://docs.pytest.org/en/latest/" target="_blank">Pytest</a> has features which help support test development and allow specific tests to fail or be skipped completely which helps with both test development and with Continuous Integration where test results can vary depending on platform and package versions.</p>
<p>This post stems from a suggestion made by <a href="https://fosstodon.org/@jni" target="_blank"><span class="citation" data-cites="jni">@jni</span><span class="citation" data-cites="jni">@jni</span><span class="citation" data-cites="fosstodon.org">@fosstodon.org</span></a> during some work I have been contributing to the <a href="https://skeleton-analysis.org/" target="_blank">skan</a> package. Thanks to Juan for the prompt/pointer.</p>
</section>
<section id="links" class="level2">
<h2 class="anchored" data-anchor-id="links">Links</h2>
<ul>
<li><a href="https://docs.pytest.org/en/latest/" target="_blank">pytest</a></li>
<li><a href="https://docs.pytest.org/en/latest/reference/reference.html#pytest-mark-skip" target="_blank"><code>@pytest.mark.skip</code></a></li>
<li><a href="https://docs.pytest.org/en/latest/reference/reference.html#pytest-mark-skipif" target="_blank"><code>@pytest.mark.skipif</code></a></li>
<li><a href="https://docs.pytest.org/en/latest/reference/reference.html#pytest-mark-xfail" target="_blank"><code>@pytest.mark.xfail</code></a></li>
<li><a href="https://blog.nshephard.dev/posts/pytest-param/" target="_blank">Pytest Parameterisation</a></li>
</ul>
<section id="blog-posts" class="level3">
<h3 class="anchored" data-anchor-id="blog-posts">Blog Posts</h3>
<ul>
<li><a href="https://pytest-with-eric.com/pytest-best-practices/pytest-skip-test/" target="_blank">Pytest With Eric | An Ultimate Guide to using Pytest Skip Test and XFail</a></li>
</ul>



</section>
</section>

<div class="quarto-listing quarto-listing-container-default" id="listing-listing">
<div class="list quarto-listing-default">

</div>
<div class="listing-no-matching d-none">
No matching items
</div>
</div><div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{shephard2024,
  author = {Shephard, Neil},
  title = {Pytest {Fail} and {Skip}},
  date = {2024-04-25},
  url = {https://blog.nshephard.dev/posts/pytest-xfail/},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-shephard2024" class="csl-entry quarto-appendix-citeas">
Shephard, Neil. 2024. <span>“Pytest Fail and Skip.”</span> April 25,
2024. <a href="https://blog.nshephard.dev/posts/pytest-xfail/">https://blog.nshephard.dev/posts/pytest-xfail/</a>.
</div></div></section></div> ]]></description>
  <category>python</category>
  <category>testing</category>
  <category>pytest</category>
  <guid>https://blog.nshephard.dev/posts/pytest-xfail/</guid>
  <pubDate>Thu, 25 Apr 2024 00:00:00 GMT</pubDate>
  <media:content url="https://live.staticflickr.com/65535/53621640633_c257fcf8b5_k.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Pytest Parameterisation</title>
  <dc:creator>Neil Shephard</dc:creator>
  <link>https://blog.nshephard.dev/posts/pytest-param/</link>
  <description><![CDATA[ 





<p><a href="https://docs.pytest.org/en/latest/" target="_blank">Pytest</a> is an excellent framework for writing tests in <a href="https://python.org" target="_blank">Python</a>. One of the neat features it includes is the ability to parameterise your tests which means you can write one test and pass different sets of parameters into it to test the range of actions that the function/method are meant to handle.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://live.staticflickr.com/65535/53258274023_f628d3291a_k.jpg" class="img-fluid figure-img"></p>
<figcaption><a href="https://www.flickr.com/photos/slackline/53258274023/in/datetaken/" target="_blank">Minerals by Me</a></figcaption>
</figure>
</div>
<section id="example" class="level2">
<h2 class="anchored" data-anchor-id="example">Example</h2>
<p>A simple example to work through is provided in my <a href="https://github.com/ns-rse/pytest-examples" target="_blank">ns-res/pytest_examples</a> repository. We want to have a state where the function can fail so we’ll use a very simple function that carries out division.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> divide(a: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>, b: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>:</span>
<span id="cb1-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Divide a by b.</span></span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Parameters</span></span>
<span id="cb1-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ----------</span></span>
<span id="cb1-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    a: float | int</span></span>
<span id="cb1-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Number to be divided.</span></span>
<span id="cb1-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    b: float | int</span></span>
<span id="cb1-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Number to divide by.</span></span>
<span id="cb1-10"></span>
<span id="cb1-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns</span></span>
<span id="cb1-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    -------</span></span>
<span id="cb1-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    float</span></span>
<span id="cb1-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        a divided by b.</span></span>
<span id="cb1-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb1-16">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">try</span>:</span>
<span id="cb1-17">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> b</span>
<span id="cb1-18">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">except</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">TypeError</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> e:</span>
<span id="cb1-19">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">isinstance</span>(a, (<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>)):</span>
<span id="cb1-20">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">TypeError</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Error 'a' should be int or float, not </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>(a)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> e</span>
<span id="cb1-21">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">TypeError</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Error 'b' should be int or float, not </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>(b)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> e</span>
<span id="cb1-22">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">except</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ZeroDivisionError</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> e:</span>
<span id="cb1-23">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ZeroDivisionError</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Can not divide by </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>b<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, choose another number."</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> e</span></code></pre></div>
</section>
<section id="structuring-tests" class="level2">
<h2 class="anchored" data-anchor-id="structuring-tests">Structuring Tests</h2>
<p>Pytest is well written and will automatically find your tests in a few places. Personally I use a <a href="https://packaging.python.org/en/latest/discussions/src-layout-vs-flat-layout/" target="_blank">flat</a> rather than <code>src/</code> based package layout and keep my tests in the <code>tests/</code> directory of the package root. Pytest looks in this directory automatically for files that begin with <code>test_</code> and within each file for functions/methods that begin with <code>test_</code>.</p>
<p>With the above function we could write the following basic test to make sure it works because we know that if we divide <code>10</code> by <code>5</code> we should get <code>2</code> as the answer.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pytest_examples.divide <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> divide</span>
<span id="cb2-2"></span>
<span id="cb2-3"></span>
<span id="cb2-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> test_divide_unparameterised() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb2-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Test the divide function."""</span></span>
<span id="cb2-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">assert</span> divide(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span></code></pre></div>
<p>You can find this test along with others in the <a href="https://github.com/ns-rse/pytest-examples/blob/main/tests/test_divide.py" target="_blank"><code>tests/test_divide.py</code></a> file of the accompanying repository.</p>
</section>
<section id="parameterising-tests" class="level2">
<h2 class="anchored" data-anchor-id="parameterising-tests">Parameterising Tests</h2>
<p>In order to make our test suite robust we should test more scenarios and edge cases, in particular making sure we capture the exceptions that can be raised. This is where the <a href="https://docs.pytest.org/en/7.1.x/reference/reference.html?#pytest-mark-parametrize" target="_blank"><code>pytest.mark.parameterize()</code></a> fixture comes into play. It takes as a first argument a tuple of variables that you are going to define values for and pass into your test. Following it is a list of tuples with the values that you want to include, one for each of the variables you have first defined. Here we define <code>a</code>, <code>b</code> and the <code>expected</code> value of dividing <code>a</code> by <code>b</code> which is the value the <code>divide()</code> function should return.</p>
<p>If we expand the number of scenarios we wish to test using <code>@pytest.mark.parametrize()</code> we can write our test as follows.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pytest</span>
<span id="cb3-2"></span>
<span id="cb3-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> divide <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> divide</span>
<span id="cb3-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@pytest.mark.parametrize</span>(</span>
<span id="cb3-5">    (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"b"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"expected"</span>),</span>
<span id="cb3-6">    [</span>
<span id="cb3-7">        (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>),</span>
<span id="cb3-8">        (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>),</span>
<span id="cb3-9">        (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.5</span>),</span>
<span id="cb3-10"></span>
<span id="cb3-11">    ]</span>
<span id="cb3-12">)</span>
<span id="cb3-13"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> test_divide(a: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>, b: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>, expected: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb3-14">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Test the divide function."""</span></span>
<span id="cb3-15">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">assert</span> divide(a, b) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> expected</span></code></pre></div>
</section>
<section id="parameter-set-ids" class="level2">
<h2 class="anchored" data-anchor-id="parameter-set-ids">Parameter set IDs</h2>
<p>For some time I simply wrote my tests and if the structure was complicated I used comments to mark the code to indicate what the test was doing. When they (inevitably!) failed there was a cryptically long indication of what had failed based on the filename, test name and the values of the various parameters that were in use at the point of failure. These helped narrow down which test failed but took a bit of mental over-head to decipher.</p>
<p>For the above test <em>without</em> ID’s we can force them to fail by adding 1 to the expected value (i.e.&nbsp;<code>== expected + 1</code>) and the resulting output shows how the parameters are concatenated to indicate which test failed.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=======================</span> short test summary info <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">====================================</span></span>
<span id="cb4-2">FAILED tests<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>test_divide.py::test_divide_fail[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">assert</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb4-3">FAILED tests<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>test_divide.py::test_divide_fail[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">assert</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb4-4">FAILED tests<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>test_divide.py::test_divide_fail[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.5</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">assert</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.5</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.5</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb4-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=======================</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> failed <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.79</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">s</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==========================================</span></span></code></pre></div>
<p>Whilst it is possible to work out which failed test is which if you have many sets of parameters with multiple values and only one or two are failing it can take a while to work out which set has failed.</p>
<p>Recently though I was put onto the <a href="https://docs.pytest.org/en/7.1.x/reference/reference.html?#pytest.param" target="_blank">pytest.param()</a> function by a <a href="https://mastodon.social/@danjac@masto.ai/111674313059704725" target="_blank">toot from <span class="citation" data-cites="danjac">@danjac</span><span class="citation" data-cites="masto.ai">@masto.ai</span></a> and instantly saw the benefit of using this as it allows us to give each set of parameters a unique <code>id</code> which is then used by Pytest when reporting failures.</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@pytest.mark.parameterize</span>(</span>
<span id="cb5-2">    (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"b"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"expected"</span>),</span>
<span id="cb5-3">    [</span>
<span id="cb5-4">        pytest.param(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ten divided by five"</span>),</span>
<span id="cb5-5">        pytest.param(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"nine divided by three"</span>),</span>
<span id="cb5-6">        pytest.param(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.5</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"five divided by two"</span>),</span>
<span id="cb5-7"></span>
<span id="cb5-8">    ]</span>
<span id="cb5-9">)</span>
<span id="cb5-10"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> test_divide(a: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>, b: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>, expected: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb5-11">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Test the divide function."""</span></span>
<span id="cb5-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">assert</span> divide(a, b) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> expected</span></code></pre></div>
<p>Then if/when a test fails the <code>id</code> parameter is reported for the failed test, making it much easier to narrow down where the failure occurred.</p>
<p>Not only does it allow each set of parameters to be given a unique <code>id = ""</code> to aid with identifying tests that fail it also allows each set of parameters to be marked with <code>marks = &lt;&gt;</code> to indicate the expected behaviour for example <a href="https://docs.pytest.org/en/7.1.x/reference/reference.html?#pytest-mark-xfail" target="_blank"><code>pytest.mark.xfail</code></a> or <a href="https://docs.pytest.org/en/7.1.x/reference/reference.html?#id25" target="_blank"><code>pytest.mark.skipif</code></a>.</p>
<p>We could therefore add another set of parameters that should fail because one of the exceptions is raised.</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pytest</span>
<span id="cb6-2"></span>
<span id="cb6-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pytest_examples.divide <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> divide</span>
<span id="cb6-4"></span>
<span id="cb6-5"></span>
<span id="cb6-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@pytest.mark.parameterize</span>(</span>
<span id="cb6-7">    (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"b"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"expected"</span>),</span>
<span id="cb6-8">    [</span>
<span id="cb6-9">        pytest.param(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ten divided by five"</span>),</span>
<span id="cb6-10">        pytest.param(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"nine divided by three"</span>),</span>
<span id="cb6-11">        pytest.param(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.5</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"five divided by two"</span>),</span>
<span id="cb6-12">        pytest.param(</span>
<span id="cb6-13">            <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ZeroDivisionError</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"zero division error"</span>, marks<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>pytest.mark.xfail</span>
<span id="cb6-14">        ),</span>
<span id="cb6-15">    ],</span>
<span id="cb6-16">)</span>
<span id="cb6-17"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> test_divide(a: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>, b: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>, expected: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb6-18">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Test the divide function."""</span></span>
<span id="cb6-19">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">assert</span> divide(a, b) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> expected</span></code></pre></div>
</section>
<section id="testing-exceptions" class="level2">
<h2 class="anchored" data-anchor-id="testing-exceptions">Testing Exceptions</h2>
<p>The above example shows that Pytest allows us to combine tests that pass and fail (in the above example a <code>ZeroDivisionError</code>) via parmeterisation. However, whilst tests can and should be parameterised, some consider that it is better to keep tests focused and on-topic and write a separate test for different outcomes such as raising exceptions.</p>
<p>This is slightly different from the way the Pytest documentation suggests to undertake <a href="https://docs.pytest.org/en/7.1.x/example/parametrize.html#parametrizing-conditional-raising" target="_blank">Parameterising conditional raising</a> but there is a school of thought, which I like, which states that testing different states/behaviours should be separate (see the following thread for some discussion <a href="https://stackoverflow.com/questions/235025/why-should-unit-tests-test-only-one-thing" target="_blank">Why should unit tests test only one thing?</a>).</p>
<p>With this in mind we can separate out the tests that raise exceptions under different scenarios to their own tests (<strong>NB</strong> obviously its excessive to parameterise <code>test-divide_zero_division_error()</code>).</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@pytest.mark.parametrize</span>(</span>
<span id="cb7-2">    (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"b"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"exception"</span>),</span>
<span id="cb7-3">    [</span>
<span id="cb7-4">        pytest.param(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">TypeError</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a is string"</span>),</span>
<span id="cb7-5">        pytest.param(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"b"</span>, <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">TypeError</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"b is string"</span>),</span>
<span id="cb7-6">        pytest.param([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">TypeError</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a is list"</span>),</span>
<span id="cb7-7">        pytest.param(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>], <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">TypeError</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"b is list"</span>),</span>
<span id="cb7-8">    ],</span>
<span id="cb7-9">)</span>
<span id="cb7-10"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> test_divide_type_errors(a: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>, b: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>, exception: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb7-11">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Test that TypeError is raised when objects other than int or float are passed as a and b."""</span></span>
<span id="cb7-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> pytest.raises(exception):</span>
<span id="cb7-13">        divide(a, b)</span></code></pre></div>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@pytest.mark.parametrize</span>(</span>
<span id="cb8-2">    (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"b"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"exception"</span>),</span>
<span id="cb8-3">    [</span>
<span id="cb8-4">        pytest.param(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ZeroDivisionError</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"b is zero"</span>),</span>
<span id="cb8-5">    ],</span>
<span id="cb8-6">)</span>
<span id="cb8-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> test_divide_zero_division_error(a: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>, b: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>, exception: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb8-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Test that ZeroDivsionError is raised when attempting to divide by zero."""</span></span>
<span id="cb8-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> pytest.raises(exception):</span>
<span id="cb8-10">        divide(a, b)</span></code></pre></div>
</section>
<section id="parameterising-with-fixtures" class="level2">
<h2 class="anchored" data-anchor-id="parameterising-with-fixtures">Parameterising with Fixtures</h2>
<p><a href="https://docs.pytest.org/en/stable/explanation/fixtures.html" target="_blank">Fixtures</a> are a common and useful feature of the Pytest framework that allow you to define “<em>defined, reliable and consistent context for the tests</em>”. What this means is that if you always need a particular object, whether that is an instantiated class (a new instance of a class) or something else, you can mark a function with <code>@pytest.fixture()</code> and use it in subsequent tests (often fixtures are defined in <code>tests/conftest.py</code> to keep things tidy, at least that is what I do!)<sup>1</sup>.</p>
<p>It can be useful to parameterise fixtures themselves so that they too test a number of different states and this saves writing more sets of parameters under the <code>@pytest.mark.parameterize()</code> decorator of each test.</p>
<p>For this example we use a simple function <code>summarise_shapes()</code> which returns the results of summarising a 2-D Numpy array using <a href="https://scikit-image.org" target="_blank">scikit-image</a> and its <a href="https://scikit-image.org/docs/stable/api/skimage.measure.html#skimage.measure.regionprops" target="_blank"><code>skimage.measure.regionprops()</code></a> function (see <a href="https://github.com/ns-rse/pytest-examples/blob/main/pytest_examples/shapes.py" target="_blank">pytest_examples/shapes.py</a>).</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Summarise Shapes."""</span></span>
<span id="cb9-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy.typing <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> npt</span>
<span id="cb9-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> skimage <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> measure</span>
<span id="cb9-4"></span>
<span id="cb9-5"></span>
<span id="cb9-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> summarise_shape(shape: npt.NDArray) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>:</span>
<span id="cb9-7">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb9-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Summarise the region properties of a 2D numpy array using Scikit-Image.</span></span>
<span id="cb9-9"></span>
<span id="cb9-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Parameters</span></span>
<span id="cb9-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ----------</span></span>
<span id="cb9-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    shape : npt.NDArray</span></span>
<span id="cb9-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        2D binary array of a shape.</span></span>
<span id="cb9-14"></span>
<span id="cb9-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns</span></span>
<span id="cb9-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    -------</span></span>
<span id="cb9-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    list</span></span>
<span id="cb9-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        List of Region Properties each item describing one labelled region.</span></span>
<span id="cb9-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb9-20">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> measure.regionprops(shape)</span></code></pre></div>
<p>We want to write some tests for these using fixtures which we define in <code>tests/conftest.py</code>. These define two <a href="https://numpy.org/" target="_blank">Numpy</a> 2-D binary arrays of <code>0</code>’s and <code>1</code>’s in particular shapes (the names should give an indication of the shapes!)</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb10-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy.typing <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> npt</span>
<span id="cb10-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pytest</span>
<span id="cb10-4"></span>
<span id="cb10-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> skimage <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> draw</span>
<span id="cb10-6"></span>
<span id="cb10-7"></span>
<span id="cb10-8"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@pytest.fixture</span></span>
<span id="cb10-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> square() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> npt.NDArray:</span>
<span id="cb10-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Return a 2D numpy array of a square."""</span></span>
<span id="cb10-11">    square <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>), dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>np.uint8)</span>
<span id="cb10-12">    start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb10-13">    end <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb10-14">    rr, cc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> draw.rectangle_perimeter(start, end, shape<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>square.shape)</span>
<span id="cb10-15">    square[rr, cc] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb10-16">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> square</span>
<span id="cb10-17"></span>
<span id="cb10-18"></span>
<span id="cb10-19"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@pytest.fixture</span></span>
<span id="cb10-20"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> circle() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> npt.NDArray:</span>
<span id="cb10-21">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Return a 2D numpy array of a circle."""</span></span>
<span id="cb10-22">    circle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>), dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>np.uint8)</span>
<span id="cb10-23">    rr, cc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> draw.circle_perimeter(r<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, radius<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, shape<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>circle.shape)</span>
<span id="cb10-24">    circle[rr, cc] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb10-25">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> circle</span></code></pre></div>
<p>There are two different methods to using these fixtures in parameterised tests.</p>
<section id="request.getfixturevalue" class="level3">
<h3 class="anchored" data-anchor-id="request.getfixturevalue">request.getfixturevalue()</h3>
<p>The first uses <a href="https://docs.pytest.org/en/7.1.x/reference/reference.html?#pytest.FixtureRequest.getfixturevalue" target="_blank"><code>request.getfixturevalue()</code></a> which “<em>is a special fixture providing information of the requesting test function.</em>”, in this case the “<em>named fixture function</em>”.</p>
<p>You define the fixture name (in quotes) in the <code>@pytest.mark.parametrize()</code> and then when the parameter, in this case <code>shape</code>, is referred to in the test itself, you wrap it in <code>request.getfixturevalue()</code> and the named fixture is then returned and used.</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Test the shapes module."""</span></span>
<span id="cb11-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pytest</span>
<span id="cb11-3"></span>
<span id="cb11-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pytest_examples.shapes <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> summarise_shape</span>
<span id="cb11-5"></span>
<span id="cb11-6"></span>
<span id="cb11-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@pytest.mark.parametrize</span>(</span>
<span id="cb11-8">    (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"shape"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"area"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"feret_diameter_max"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"centroid"</span>),</span>
<span id="cb11-9">    [</span>
<span id="cb11-10">        pytest.param(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"square"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">7.810249675906654</span>, (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.3636363636363635</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.3636363636363635</span>), <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"summary of square"</span>),</span>
<span id="cb11-11">        pytest.param(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"circle"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">5.385164807134504</span>, (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>), <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"summary of circle"</span>),</span>
<span id="cb11-12">    ],</span>
<span id="cb11-13">)</span>
<span id="cb11-14"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> test_summarise_shape_get_fixture_value(</span>
<span id="cb11-15">    shape: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, area: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>, feret_diameter_max: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>, centroid: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">tuple</span>, request</span>
<span id="cb11-16">) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb11-17">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Test the summarisation of shapes."""</span></span>
<span id="cb11-18">    shape_summary <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> summarise_shape(request.getfixturevalue(shape))</span>
<span id="cb11-19">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">assert</span> shape_summary[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"area"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> area</span>
<span id="cb11-20">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">assert</span> shape_summary[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"feret_diameter_max"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> feret_diameter_max</span>
<span id="cb11-21">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">assert</span> shape_summary[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"centroid"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> centroid</span></code></pre></div>
</section>
<section id="pytest-lazy-fixture" class="level3">
<h3 class="anchored" data-anchor-id="pytest-lazy-fixture">pytest-lazy-fixture</h3>
<p>An alternative is to use the Pytest plugin <a href="https://github.com/tvorog/pytest-lazy-fixture" target="_blank">pytest-lazy-fixture</a> and instead of marking the value to be obtained in the test itself you do so when setting up the parameters by referring to the fixture name as an argument to <code>pytest.lazy_fixture()</code> within <code>@pytest.mark.parametrize()</code>.</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Test the shapes module."""</span></span>
<span id="cb12-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pytest</span>
<span id="cb12-3"></span>
<span id="cb12-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pytest_examples.shapes <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> summarise_shape</span>
<span id="cb12-5"></span>
<span id="cb12-6"></span>
<span id="cb12-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@pytest.mark.parametrize</span>(</span>
<span id="cb12-8">    (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"shape"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"area"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"feret_diameter_max"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"centroid"</span>),</span>
<span id="cb12-9">    [</span>
<span id="cb12-10">        pytest.param(</span>
<span id="cb12-11">            pytest.lazy_fixture(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"square"</span>),</span>
<span id="cb12-12">            <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>,</span>
<span id="cb12-13">            <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">7.810249675906654</span>,</span>
<span id="cb12-14">            (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.3636363636363635</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.3636363636363635</span>),</span>
<span id="cb12-15">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"summary of square"</span>,</span>
<span id="cb12-16">        ),</span>
<span id="cb12-17">        pytest.param(pytest.lazy_fixture(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"circle"</span>), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">5.385164807134504</span>, (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>), <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"summary of circle"</span>),</span>
<span id="cb12-18">    ],</span>
<span id="cb12-19">)</span>
<span id="cb12-20"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> test_summarise_shape_lazy_fixture(</span>
<span id="cb12-21">    shape: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, area: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>, feret_diameter_max: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>, centroid: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">tuple</span>, request</span>
<span id="cb12-22">) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb12-23">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Test the summarisation of shapes."""</span></span>
<span id="cb12-24">    shape_summary <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> summarise_shape(shape)</span>
<span id="cb12-25">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>shape_summary[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'centroid'</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb12-26">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">assert</span> shape_summary[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"area"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> area</span>
<span id="cb12-27">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">assert</span> shape_summary[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"feret_diameter_max"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> feret_diameter_max</span>
<span id="cb12-28">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">assert</span> shape_summary[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"centroid"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> centroid</span></code></pre></div>
</section>
</section>
<section id="parameterise-fixtures" class="level2">
<h2 class="anchored" data-anchor-id="parameterise-fixtures">Parameterise Fixtures</h2>
<p>The <a href="https://github.com/tvorog/pytest-lazy-fixture" target="_blank">pytest-lazy-fixture</a> also allows fixtures themselves to be parameterised using the <code>pytest_lazyfixture.lazy_fixture()</code> function and demonstrated in the packages <a href="https://github.com/tvorog/pytest-lazy-fixture#usage" target="_blank">README</a> which I’ve reproduced below.</p>
<p>The fixture called <code>some()</code> uses <code>lazy_fixture()</code> to include both the <code>one()</code> and the <code>two()</code> fixtures which return their respective integers. <code>test_func()</code> then checks that the value returned by the <code>some()</code> fixture is in the list <code>[1, 2]</code>. Obviously this example is contrived but it serves to demonstrate how fixtures themselves can be parameterised.</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pytest</span>
<span id="cb13-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pytest_lazyfixture <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> lazy_fixture</span>
<span id="cb13-3"></span>
<span id="cb13-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@pytest.fixture</span>(params<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[</span>
<span id="cb13-5">    lazy_fixture(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'one'</span>),</span>
<span id="cb13-6">    lazy_fixture(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'two'</span>)</span>
<span id="cb13-7">])</span>
<span id="cb13-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> some(request):</span>
<span id="cb13-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> request.param</span>
<span id="cb13-10"></span>
<span id="cb13-11"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@pytest.fixture</span></span>
<span id="cb13-12"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> one():</span>
<span id="cb13-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb13-14"></span>
<span id="cb13-15"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@pytest.fixture</span></span>
<span id="cb13-16"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> two():</span>
<span id="cb13-17">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb13-18"></span>
<span id="cb13-19"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> test_func(some):</span>
<span id="cb13-20">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">assert</span> some <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]</span></code></pre></div>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p><a href="https://pytest.org" target="_blank">Pytest</a> is a powerful and flexible suite for writing tests in Python. One of the strengths is the ability to parameterise the tests to test multiple scenarios. This can include both successes and failures, however a common approach is to separate tests based on the expected behaviour, although Pytest allows you the flexibility to choose.</p>
<p>Ultimately though parameterising tests is a simple and effective way of reducing the amount of code you have to write to unit-tests for different aspects of your code.</p>
</section>
<section id="links" class="level2">
<h2 class="anchored" data-anchor-id="links">Links</h2>
<ul>
<li><a href="https://docs.pytest.org/en/latest/" target="_blank">Pytest</a></li>
<li><a href="https://docs.pytest.org/en/7.1.x/example/parametrize.html" target="_blank">Parametrizing tests — pytest documentation</a></li>
<li><a href="https://packaging.python.org/en/latest/discussions/src-layout-vs-flat-layout/" target="_blank">Src Layout vs Flat Layout</a></li>
<li><a href="https://stackoverflow.com/questions/42014484/pytest-using-fixtures-as-arguments-in-parametrize" target="_blank">pytest using fixtures as arguments in parametrize - Stack Overflow</a></li>
<li><a href="http://www.owenpellegrin.com/blog/testing/how-do-you-solve-multiple-asserts/" target="_blank">How do you solve multiple asserts?</a></li>
<li><a href="https://stackoverflow.com/questions/235025/why-should-unit-tests-test-only-one-thing" target="_blank">Why should unit tests test only one thing? - Stack Overflow</a></li>
</ul>



</section>


<div class="quarto-listing quarto-listing-container-default" id="listing-listing">
<div class="list quarto-listing-default">

</div>
<div class="listing-no-matching d-none">
No matching items
</div>
</div><div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>A caveat to this is the use of Random Number Generators as once seeded these can produce different numbers depending on the order in which the fixture is used but that is beyond the scope of this post.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{shephard2024,
  author = {Shephard, Neil},
  title = {Pytest {Parameterisation}},
  date = {2024-01-01},
  url = {https://blog.nshephard.dev/posts/pytest-param/},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-shephard2024" class="csl-entry quarto-appendix-citeas">
Shephard, Neil. 2024. <span>“Pytest Parameterisation.”</span> January 1,
2024. <a href="https://blog.nshephard.dev/posts/pytest-param/">https://blog.nshephard.dev/posts/pytest-param/</a>.
</div></div></section></div> ]]></description>
  <category>python</category>
  <category>testing</category>
  <category>pytest</category>
  <guid>https://blog.nshephard.dev/posts/pytest-param/</guid>
  <pubDate>Mon, 01 Jan 2024 00:00:00 GMT</pubDate>
  <media:content url="https://live.staticflickr.com/65535/53258274023_f628d3291a_k.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>virtualenvwrapper</title>
  <dc:creator>Neil Shephard</dc:creator>
  <link>https://blog.nshephard.dev/posts/virtualenvwrapper/</link>
  <description><![CDATA[ 





<p>If you use Python heavily you will likely be familiar with Virtual Environments. These provide isolated installs of specific packages that take precedence over any packages installed at the system level. There are lots of tools and frameworks for working with virtual environments such as <a href="https://docs.python.org/3/library/venv.html" target="_blank"><code>venv</code></a>, <a href="https://pypi.python.org/pypi/virtualenv" target="_blank"><code>virtualenv</code></a> and <a href="https://docs.conda.io/en/latest/" target="_blank">Conda</a>. This post introduces and shows some of the features of <a href="https://virtualenvwrapper.readthedocs.io/en/latest/" target="_blank">virtualenvwrapper</a>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://live.staticflickr.com/65535/53176160657_1a148b3c36_k.jpg" class="img-fluid figure-img"></p>
<figcaption><a href="https://www.flickr.com/photos/slackline/53176160657/in/album-72177720311078585/" target="_blank">Clouds Rising at Sunset by Me</a></figcaption>
</figure>
</div>
<section id="virtualenvwrapper" class="level2">
<h2 class="anchored" data-anchor-id="virtualenvwrapper">virtualenvwrapper</h2>
<p><a href="https://virtualenvwrapper.readthedocs.io/en/latest/" target="_blank">virtualenvwrapper</a> is…</p>
<blockquote class="blockquote">
<p>a set of extensions to Ian Bicking’s <code>virtualenv</code> tool. The extensions include wrappers for creating and deleting virtual environments and otherwise managing your development workflow, making it easier to work on more than one project at a time without introducing conflicts in their dependencies.</p>
</blockquote>
<p>It has the following main features…</p>
<blockquote class="blockquote">
<ol type="1">
<li>Organizes all of your virtual environments in one place.</li>
<li>Wrappers for managing your virtual environments (create, delete, copy).</li>
<li>Use a single command to switch between environments.</li>
<li>Tab completion for commands that take a virtual environment as argument.</li>
<li>User-configurable hooks for all operations (see Per-User Customization).</li>
<li>Plugin system for creating more sharable extensions (see Extending Virtualenvwrapper).</li>
</ol>
</blockquote>
</section>
<section id="installation" class="level2">
<h2 class="anchored" data-anchor-id="installation">Installation</h2>
<p>Many systems have <code>virtualenvwrapper</code> available in their package manager.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">emerge</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-av</span> virtualenvwrapper          <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Gentoo</span></span>
<span id="cb1-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pacman</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-Syu</span> python-virtualenvwrapper  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Arch</span></span>
<span id="cb1-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">apt-get</span> install virtualenvwrapper     <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Debian</span></span></code></pre></div>
<p>Once installed you need to set two key variables <code>$WORKON_HOME</code> and <code>$PROJECT_HOME</code> and ensure the <code>virtualenvwrapper.sh</code> is sourced on starting a shell. <code>$WORKON_HOME</code> is where your virtual environments will be created and stored, whilst <code>$PROJECT_HOME</code> is where projects will be created if you choose to use the helper functions for making projects. Set these to what you want, my options are below. To find out where <code>virtualenvwrapper.sh</code> is installed on your system use <code>which virtualenvwrapper.sh</code>. Once you’ve decided substitute the values in the following of your <code>.bashrc</code> (<a href="https://www.gnu.org/software/bash/" target="_blank">Bash</a>)or <code>.zshrc</code> (<a href="https://www.zsh.org/" target="_blank">ZSH</a>) depending on which shell you use.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">export</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">WORKON_HOME</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${HOME}</span>/.virtualenvs</span>
<span id="cb2-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">export</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">PROJECT_HOME</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${HOME}</span>/work/git/</span>
<span id="cb2-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">source</span> /usr/bin/virtualenvwrapper.sh</span></code></pre></div>
</section>
<section id="creating-a-virtual-environment" class="level2">
<h2 class="anchored" data-anchor-id="creating-a-virtual-environment">Creating a Virtual Environment</h2>
<p>This is straight-forward.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mkvirtualenv</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>env_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span></code></pre></div>
<section id="postmkvirtualenv" class="level3">
<h3 class="anchored" data-anchor-id="postmkvirtualenv"><code>postmkvirtualenv</code></h3>
<p>But what if there are some tools that you want to install each and every time you create a virtual environment, regardless of the project you are working on? For example I use the <a href="https://github.com/pappasam/jedi-language-server" target="_blank">jedi-language-server</a> and want to have various packages such as <a href="https://ipython.org" target="_blank">ipython</a>, <a href="https://docs.pytest.org/en/latest/" target="_blank">pytest</a> and various extensions, linters such as <a href="https://astral.sh/ruff" target="_blank">ruff</a> and <a href="https://pylint.org" target="_blank">pylint</a> available by default in every environment you create. Fortunately there is a simple hook that can be run after the creation of a new environment. The file <code>~/.virtualenvs/postmkvirtualenv</code> is sourced and run <em>after</em> having run <code>mkvirtualenv</code> and so any commands in there are executed as it is essentially a Bash script.</p>
<p>If you maintain a <a href="https://dotfiles.github.io/" target="_blank">dotfiles</a> directory and have a file that lists the packages you want installed under <code>~/dotfiles/python/venv_minimal_requirements.txt</code> then you can have the files listed here installed when creating a new virtual environment by appending the command <code>pip install -r ~/dotfiles/python/venv_minimal_requirements.txt</code> to the <code>~/.virtualenvs/postmkvirtualenv</code> file.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pip install -r ~/dotfiles/python/venv_minimal_requirements.txt"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span> ~/.virtualenvs/postmkvirtualenv</span></code></pre></div>
</section>
</section>
<section id="project-directories" class="level2">
<h2 class="anchored" data-anchor-id="project-directories">Project Directories</h2>
<p>Typically code for a project resides in its own directory and this can be automatically bound to the virtual environment using the <code>mkproject</code> command instead of <code>mkvirtualenv</code>. The project directory is stored in the <code>$PROJECT_HOME</code> path you will have configured during <a href="installation" target="_blank">installation</a>. You can then create a project <em>and</em> a virtual environment with…</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mkproject</span> new_project</span></code></pre></div>
<section id="switching-to-project-directories" class="level3">
<h3 class="anchored" data-anchor-id="switching-to-project-directories">Switching to Project Directories</h3>
<p>You can switch to a projects directory automatically on activating a particular virtual environment using <code>setvirtualenvproject</code> from the project directory when a specific environment is activated. <strong>Make sure you are in the project directory for the corresponding project!</strong>. It adds an entry to the <code>~/.virtualenv/&lt;env_name&gt;/.project</code> file that reflects the directory associated with the environment. Then when you activate the directory via <code>workon &lt;env_name&gt;</code> it will automatically change to the project directory.</p>
</section>
</section>
<section id="deactivating-and-removing-virtual-environments" class="level2">
<h2 class="anchored" data-anchor-id="deactivating-and-removing-virtual-environments">Deactivating and Removing Virtual Environments</h2>
<p>Its straight-forward to deactivate the current virtual environment just type <code>deactivate</code>. Similarly you can remove a virtual environment with <code>rmvirtualenv &lt;env_name&gt;</code>.</p>
<p>One neat option if you want to keep a virtual environment but install all packages anew is the ability to remove all third-party packages in the current virtual environment using <code>wipeenv</code>.</p>
</section>
<section id="temporary-virtual-environments" class="level2">
<h2 class="anchored" data-anchor-id="temporary-virtual-environments">Temporary Virtual Environments</h2>
<p>Sometimes you just want to try something out quickly in a clean Virtual Environment, if for example you are reviewing a Pull Request. <code>virtualenvwrapper</code> can help here as it has the <code>mktmpenv</code>. There are two options here <code>-c|--cd</code> or <code>-n|--no-cd</code> which changes directory post-activation or <em>doesn’t</em> respectively. The environment gets a unique name and will be deleted automatically when it is deactivated.</p>
</section>
<section id="drawbacks" class="level2">
<h2 class="anchored" data-anchor-id="drawbacks">Drawbacks</h2>
<p>There are a couple of drawbacks I’ve found to using using <code>virtualenvwrapper</code>.</p>
<p>The first is that <code>mkproject</code> doesn’t allow nesting of project directories, you have to specify a single directory and it will be created under the <code>$PROJECT_HOME</code> directory with the associated environment name. This doesn’t work for me as I use the structure <code>~/work/git</code> as the base but then have sub-directories based on the Git Forge (<a href="https://github.com" target="_blank">GitHub</a>/<a href="https://gitlab.com" target="_blank">GitLab</a>/<a href="https://codeberg.org/" target="_blank">Codeberg</a>) the repository is associated with and further nesting to reflect the user/organisation within as I have both a personal and work accounts. E.g. <code>~/work/git/hub/ns-rse/ns-rse.github.io</code> which is the source for this site and associated with my work account (<code>ns-rse</code>) or <code>~/work/git/lab/nshephard/tcx2gpx</code> which is a project of mine (<a href="https://gitlab.com/nshephard/tcx2gpx" target="_blank">tcx2gpx</a>) hosted on GitLab. This means that if I wanted to create a project with <code>mkproject</code> based on <code>$PROJECT_HOME</code> being <code>/work/git</code> following this structure I would specify <code>mkproject git/lab/new_project</code> and whilst the directory is created, the virtual environment is created as <code>git/lab/new_project</code> which is truncated to <code>git</code> and you can’t <code>workon git</code> because the activation scripts are nested deeper under <code>git/lab/new_project</code>. Further each environment I created would then conflict. I could probably work around this by creating symbolic links but in practice I just use <code>mkvirtualenv</code> and <code>setvirtualenvproject</code> after I <code>git clone</code> work.</p>
<p>This is a problem specifically of my own creation though, something other users might find causes greater friction is that <code>virtualenvwrapper</code> doesn’t support creating and keeping the virtual environments within the project directory itself. This is never something that I’ve wanted to do myself though as I find it tidier to keep them all in one place and easier to find and remove obsolete environments.</p>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>I’ve used <a href="https://virtualenvwrapper.readthedocs.io/en/latest/" target="_blank">virtualenvwrapper</a> for years and its a nice light-weight alternative to other solutions of using Pythons Virtual Environments such as <a href="https://docs.python.org/3/library/venv.html" target="_blank"><code>venv</code></a> or <a href="https://docs.conda.io/en/latest/" target="_blank">Conda</a>. It has some limitations but its worth giving it a whirl as there are lots of useful helper functions and hooks that smooth the process of creating, using and switching between virtual environments.</p>
</section>
<section id="links" class="level2">
<h2 class="anchored" data-anchor-id="links">Links</h2>
<ul>
<li><a href="https://virtualenvwrapper.readthedocs.io/en/latest/" target="_blank">virtualenvwrapper documentation</a></li>
</ul>



</section>

<div class="quarto-listing quarto-listing-container-default" id="listing-listing">
<div class="list quarto-listing-default">

</div>
<div class="listing-no-matching d-none">
No matching items
</div>
</div><div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{shephard2023,
  author = {Shephard, Neil},
  title = {Virtualenvwrapper},
  date = {2023-12-23},
  url = {https://blog.nshephard.dev/posts/virtualenvwrapper/},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-shephard2023" class="csl-entry quarto-appendix-citeas">
Shephard, Neil. 2023. <span>“Virtualenvwrapper.”</span> December 23,
2023. <a href="https://blog.nshephard.dev/posts/virtualenvwrapper/">https://blog.nshephard.dev/posts/virtualenvwrapper/</a>.
</div></div></section></div> ]]></description>
  <category>python</category>
  <category>virtual environments</category>
  <guid>https://blog.nshephard.dev/posts/virtualenvwrapper/</guid>
  <pubDate>Sat, 23 Dec 2023 00:00:00 GMT</pubDate>
  <media:content url="https://live.staticflickr.com/65535/53176160657_1a148b3c36_k.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Repository Review with Scientific Python</title>
  <dc:creator>Neil Shephard</dc:creator>
  <link>https://blog.nshephard.dev/posts/repository-review/</link>
  <description><![CDATA[ 





<p>I’ve written before about <a href="https://ns-rse.github.io/#category=packaging" target="_blank">Python Packaging</a> and <a href="https://ns-rse.github.io/#category=pre-commit" target="_blank">pre-commit</a> which I’m a big fan of. Today I discovered a really useful tool for checking your packaging configuration and pre-commit configuration from the <a href="https://learn.scientific-python.org/development/" target="_blank">Scientific Python Development Guide</a>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://live.staticflickr.com/65535/53258300629_64b0ee5703_k.jpg" class="img-fluid figure-img"></p>
<figcaption><a href="https://www.flickr.com/photos/slackline/53258300629/" target="_blank">Elektro</a></figcaption>
</figure>
</div>
<p>This development guide is really well written and has <a href="https://learn.scientific-python.org/development/tutorials/" target="_blank">Tutorials</a> and <a href="https://learn.scientific-python.org/development/guides/" target="_blank">Topical Guides</a> that cover package development, style guides, type checking and tests amongst other things.</p>
<section id="repo-review" class="level2">
<h2 class="anchored" data-anchor-id="repo-review">Repo Review</h2>
<p>Of particular use is the <a href="https://learn.scientific-python.org/development/guides/repo-review/" target="_blank">Repo-Review - Scientific Python Development Guide</a> which will automatically check a GitHub hosted repository against the Scientific Python development guidelines and make recommendations where improvements can be made to the package configuration and pre-commit configuration.</p>
<p>Having tested it against <a href="https://learn.scientific-python.org/development/guides/repo-review/?repo=AFM-SPM%2FTopoStats&amp;branch=main" target="_blank">AFM-SPM/TopoStats main branch</a> there are a lot of useful and simple recommendations made.</p>
</section>
<section id="more-pre-commit-hooks" class="level2">
<h2 class="anchored" data-anchor-id="more-pre-commit-hooks">More Pre-Commit hooks</h2>
<p>More <a href="https://pre-commit.com/hooks" target="_blank">pre-commit hooks</a> is only a good thing in my view, they don’t take that long to run against most reasonably sized repositories, particularly if <a href="https://astral.sh/ruff" target="_blank">ruff</a> is used in favour of more traditional tools such as <code>flake8</code> and <code>isort</code>.</p>
<p>There are a few <a href="https://ns-rse.github.io/#category=pre-commit" target="_blank">pre-commit</a> hooks that I wasn’t aware of and will be adding to my projects such as..,</p>
<ul>
<li><a href="https://pypi.org/project/check-manifest/" target="_blank">Check-manifest</a> that verifies you have working SDist (source) packages.</li>
<li><a href="https://github.com/codespell-project/codespell" target="_blank">Codespell</a> for checking the spelling used in code.</li>
<li><a href="https://validate-pyproject.readthedocs.io/" target="_blank">validate-pyproject</a> for validating <code>pyproject.toml</code>.</li>
</ul>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>If you are involved in Python package development of any sort give your repository a review and see what recommendations are suggested. You may not agree with all of the recommendations but the vast majority of tools are highly configurable so you can disable the checks you don’t want applied. It won’t do any harm.</p>
<p>Now I just need to find time to apply <a href="https://mypy.readthedocs.io/en/stable/" target="_blank">MyPy</a>.</p>



</section>

<div class="quarto-listing quarto-listing-container-default" id="listing-listing">
<div class="list quarto-listing-default">

</div>
<div class="listing-no-matching d-none">
No matching items
</div>
</div><div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{shephard2023,
  author = {Shephard, Neil},
  title = {Repository {Review} with {Scientific} {Python}},
  date = {2023-11-17},
  url = {https://blog.nshephard.dev/posts/repository-review/},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-shephard2023" class="csl-entry quarto-appendix-citeas">
Shephard, Neil. 2023. <span>“Repository Review with Scientific
Python.”</span> November 17, 2023. <a href="https://blog.nshephard.dev/posts/repository-review/">https://blog.nshephard.dev/posts/repository-review/</a>.
</div></div></section></div> ]]></description>
  <category>pre-commit</category>
  <category>packaging</category>
  <category>scientific python</category>
  <category>python</category>
  <guid>https://blog.nshephard.dev/posts/repository-review/</guid>
  <pubDate>Fri, 17 Nov 2023 00:00:00 GMT</pubDate>
  <media:content url="https://live.staticflickr.com/65535/53258300629_64b0ee5703_k.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>GitLab CI - Automatic Publishing to PyPI</title>
  <dc:creator>Neil Shephard</dc:creator>
  <link>https://blog.nshephard.dev/posts/gitlab-ci-pypi/</link>
  <description><![CDATA[ 





<p>I’ve written previously on <a href="https://ns-rse.github.io/posts/python-packaging" target="_blank">Python Packaging</a> and in that article included details of how to <a href="https://ns-rse.github.io/posts/python-packaging/#publishing-to-pypi" target="_blank">automate publishing to PyPI from GitHub</a>. This article details how to automatically publish your package to <a href="https://pypi.org" target="_blank">PyPI</a> from <a href="https://gitlab.com" target="_blank">GitLab</a>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://live.staticflickr.com/65535/52985552723_a975753e12_k.jpg" class="img-fluid figure-img"></p>
<figcaption><a href="https://flickr.com/photos/slackline/52985552723/in/dateposted/" target="_blank">Packages with Legs, by Me</a></figcaption>
</figure>
</div>
<section id="repository-configuration" class="level2">
<h2 class="anchored" data-anchor-id="repository-configuration">Repository Configuration</h2>
<section id="ci-variables" class="level3">
<h3 class="anchored" data-anchor-id="ci-variables">CI Variables</h3>
<p>The environment variables <code>$TWINE_USERNAME</code> (<code>__token__</code>) and <code>$TWINE_PASSWORD</code> which will be the token you generate for publishing on PyPI or Test PyPI. These are saved under the repository <code>_Settings &gt; CI/CD &gt; Varialbes_</code> section and how to create and save these is described below.</p>
</section>
<section id="protecting-tags" class="level3">
<h3 class="anchored" data-anchor-id="protecting-tags">Protecting Tags</h3>
<p>This really stumped me I could build and push automatically from the <code>master</code> branch but could not use the <code>- if  $CI_COMMIT_TAG</code> condition to publish commits that were tagged. I wrote a <a href="https://forum.gitlab.com/t/ci-variables-missing-when-triggering-build-based-on-tag-solved/93309" target="_blank">post on the GitLab Forums</a> asking how to do this and posted it to Mastodon asking if anyone had any ideas. I got two replies (one from <a href="https://mastodon.social/@manu_faktur/111159226739296263" target="_blank"><span class="citation" data-cites="manu_faktur">@manu_faktur</span><span class="citation" data-cites="mastodon.social">@mastodon.social</span></a> and one from <a href="https://mastodon.social/@diazona@techhub.social/111159429646899283" target="_blank"><span class="citation" data-cites="diazona">@diazona</span><span class="citation" data-cites="techhub.social">@techhub.social</span></a>) both asking if I’d protected the tags on my repository.</p>
<p>I had no idea that you could protect tags on GitLab (or GitHub for that matter) so looked up the documentation on <a href="https://docs.gitlab.com/ee/user/project/protected_tags.html" target="_blank">Protected tags</a> and sure enough this was possible. Go to <em>settings &gt; Repository &gt; Protected tags</em> and set a <a href="https://docs.gitlab.com/ee/user/project/protected_tags.html#wildcard-protected-tags" target="_blank">wildcard to protect my tags</a>, e.g.&nbsp;<code>v*</code> and the <code>pypi</code> CI job defined below will work as expected, building <em>and</em> uploading to PyPI on tagged commits.</p>
</section>
</section>
<section id="ci-configuration" class="level2">
<h2 class="anchored" data-anchor-id="ci-configuration">CI Configuration</h2>
<section id="ci" class="level3">
<h3 class="anchored" data-anchor-id="ci">CI</h3>
<p>GitLabs CI/CD is configured via a <a href="https://yaml.org/" target="_blank">YAML</a> file <a href="https://docs.gitlab.com/ee/ci/yaml/gitlab_ci_yaml.html" target="_blank"><code>.gitlab-ci.yaml</code></a> in the root of your project folder, a useful reference for writing these files is the <a href="https://docs.gitlab.com/ee/ci/yaml/index.html" target="_blank">.gitlab-ci.yml reference</a>.</p>
<p>An example file from the <a href="https://gitlab.com/nshephard/tcx2gpx/" target="_blank">tcx2gpx</a> package is shown below (see <a href="-/blob/master/.gitlab-ci.yml?ref_type=heads" target="_blank">here</a>).</p>
<p>This defines the following…</p>
<ul>
<li><code>image</code> - the use of a Docker Python 3.11 image for running the pipeline.</li>
<li><code>variables</code> - Configures <a href="https://ns-rse.github.io/#category=pre-commit" target="_blank">pre-commit</a> to run and automatically fix issues found on pull requests.</li>
<li><code>stages</code> - the subsequent stages to run (<strong>NB</strong> the <code>debug</code> stage which prints the environment variables is commented out).</li>
<li><code>pylint</code> - runs linting on Python 3.10 and 3.11.</li>
<li><code>pytest</code> - Runs tests on Python 3.10 and 3.11.</li>
<li><code>pages</code> - Builds the documentation pages.</li>
<li><code>pypi</code> - <strong>Builds and uploads the package to PyPI <em>if the commit has a tag associated</em></strong>.</li>
</ul>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">image</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> python:3.11</span></span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">variables</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> # since we're not using merge request pipelines in this example, # we will configure the pre-commit job to</span></span>
<span id="cb1-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  run on branch pipelines only.</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  # If you ARE using merge request pipelines, you can omit this section</span></span>
<span id="cb1-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">PRE_COMMIT_AUTO_FIX</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'1'</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">PRE_COMMIT_DEDUPLICATE_MR_AND_BRANCH:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">'false'</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">PRE_COMMIT_AUTO_FIX_BRANCH_ONLY:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">'false'</span></span>
<span id="cb1-6"></span>
<span id="cb1-7"></span>
<span id="cb1-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">before_script</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb1-9"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> python --version</span></span>
<span id="cb1-10"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> pip install .</span></span>
<span id="cb1-11"></span>
<span id="cb1-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># pre-commit autofix (https://gitlab.com/yesolutions/gitlab-ci-templates /</span></span>
<span id="cb1-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#                     https://stackoverflow.com/collectives/gitlab/articles/71270196/)</span></span>
<span id="cb1-14"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">include</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> remote: https://gitlab.com/yesolutions/gitlab-ci-templates/raw/main/templates/pre-commit-autofix.yaml</span></span>
<span id="cb1-15"></span>
<span id="cb1-16"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stages</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> # - debug - pylint - pytest - pages - pypi</span></span>
<span id="cb1-17"></span>
<span id="cb1-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print-all-env-vars-job:</span></span>
<span id="cb1-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#     stage: debug</span></span>
<span id="cb1-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#     script:</span></span>
<span id="cb1-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#         - echo "GitLab CI/CD | Print all environment variables"</span></span>
<span id="cb1-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#         - env</span></span>
<span id="cb1-23"></span>
<span id="cb1-24"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.pylint</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> script:</span></span>
<span id="cb1-25"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> pip install pylint pytest</span></span>
<span id="cb1-26"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> pylint --rcfile .pylintrc tcx2gpx/</span></span>
<span id="cb1-27"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> pylint --rcfile .pylintrc tests/</span></span>
<span id="cb1-28"></span>
<span id="cb1-29"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pylint-3-10</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> extends: .pylint stage: pylint image: python:3.10 allow_failure: true</span></span>
<span id="cb1-30"></span>
<span id="cb1-31"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pylint-3-11</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> extends: .pylint stage: pylint image: python:3.11 allow_failure: true</span></span>
<span id="cb1-32"></span>
<span id="cb1-33"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.pytest</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> script:</span></span>
<span id="cb1-34"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> pip install pytest pytest-cov</span></span>
<span id="cb1-35"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> python -m "pytest"</span></span>
<span id="cb1-36"></span>
<span id="cb1-37"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pytest-3-10</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> extends: .pytest stage: pytest image: python:3.10 allow_failure: true</span></span>
<span id="cb1-38"></span>
<span id="cb1-39"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pytest-3-11</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> extends: .pytest stage: pytest image: python:3.11 coverage: /(?i)total.*?</span></span>
<span id="cb1-40"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/</span></span>
<span id="cb1-41"></span>
<span id="cb1-42"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pages</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> stage: pages rules:</span></span>
<span id="cb1-43"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">if</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> $CI_COMMIT_BRANCH == "master" script:</span></span>
<span id="cb1-44"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> pip install .[docs]</span></span>
<span id="cb1-45"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> cd docs</span></span>
<span id="cb1-46"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> git fetch --tags</span></span>
<span id="cb1-47"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> git tag -l</span></span>
<span id="cb1-48"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> make html</span></span>
<span id="cb1-49"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> mkdir ../public</span></span>
<span id="cb1-50"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mv _build/html/* ../public/ artifacts</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> paths:</span></span>
<span id="cb1-51"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">            </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> public</span></span>
<span id="cb1-52"></span>
<span id="cb1-53"></span>
<span id="cb1-54"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pypi</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> stage: pypi rules:</span></span>
<span id="cb1-55"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">if</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> $CI_COMMIT_TAG script:</span></span>
<span id="cb1-56"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> pip install .[pypi]</span></span>
<span id="cb1-57"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> pip install build</span></span>
<span id="cb1-58"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> python -m build</span></span>
<span id="cb1-59"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> twine upload --non-interactive --repository pypi dist/*</span></span></code></pre></div>
<p>The <code>pypi</code> stage is named and a <code>rule</code> is defined that says to only run this stage if the value of the environment variable <code>$CI_COMMIT_TAG</code> is <code>True</code>. This only happens when a commit has a (protected <span class="emoji" data-emoji="wink">😉</span>) tag.</p>
<p>The <code>script</code> section then installs the package along with the <code>project.optional-dependencies</code> defined in the <code>pypi</code> section of the <a href="https://ns-rse.github.io/posts/python-packaging/#project.optional-dependencies" target="_blank"><code>pyproject.toml</code></a>.</p>
<p>The package is then built using <a href="https://github.com/pypa/build" target="_blank">build</a> and <a href="https://twine.readthedocs.io/en/stable/index.html" target="_blank">twine</a> is used to push the to push the built package to <a href="https://pypi.org" target="_blank">PyPI</a>.</p>
</section>
<section id="pypi-tokens" class="level3">
<h3 class="anchored" data-anchor-id="pypi-tokens">PyPI Tokens</h3>
<p>You should first test building and deploying to the <a href="https://test.pypi.org/" target="_blank">Test PyPI</a> and when this is working simply switch to using the main <a href="https://pypi.org" target="_blank">PyPI</a>. To do so you will need to create an account on both<sup>1</sup>. Once you have set yourself up with an account you can <a href="https://pypi.org/help/#apitoken" target="_blank">generate an API token to authenticate with PyPI</a>. After verifying your email got to <em>Account Settings</em> and select <em>Add API token</em>. These are generated once so copy and paste it into the <a href="https://packaging.python.org/en/latest/specifications/pypirc/#pypirc" target="_blank"><code>.pypirc</code></a> of your project (add this file to your <code>.gitignore</code> so it doesn’t accidentally get added). Remember to do this twice, once for PyPI and once for Test PyPI and once for PyPI for reference.</p>
<pre class="{conf}"><code>[testpypi]
username = __token__
password = pypi-&lt;token_value&gt;

[pypi]
username = __token__
password = pypi-&lt;token_value&gt;</code></pre>
<p>In GitLab go to your repositories <em>Settings &gt; CI/CD &gt; Variables</em> and add two new variables <code>TWINE_USERNAME</code> with the value <code>__token__</code> and <code>TWINE_PASSWORD</code> with the token for your account on Test PyPI (remember it should include the prefix <code>pypi-</code> as shown in the above example <code>.pypirc</code>). You have options on how these variables are used and should ensure that all three check boxes are selected, this enables…</p>
<ul>
<li><strong>Protect variable</strong> Export variable to pipelines running on protected branches and tags only.</li>
<li><strong>Mask variable</strong> Mask this variable in job logs if it meets regular expression requirements.</li>
<li><strong>Expand variable reference</strong> <code>$</code> will be treated as the start of a reference to another variable.</li>
</ul>
</section>
</section>
<section id="testing" class="level2">
<h2 class="anchored" data-anchor-id="testing">Testing</h2>
<p>Now that you are setup you can test your configuration. To do so you need to first use the API key from the Test PyPI server that you created as the value for <code>$TWINE_PASSWORD</code> (see above) and set the repository <code>twine --repository</code> option to <code>testpypi</code>. Your <code>pypi</code> stage should look like the following…</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pypi</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb3-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stage</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> pypi</span></span>
<span id="cb3-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rules</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb3-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">if</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> $CI_COMMIT_TAG</span></span>
<span id="cb3-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">script</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb3-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> pip install .[pypi]</span></span>
<span id="cb3-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> pip install build</span></span>
<span id="cb3-8"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> python -m build</span></span>
<span id="cb3-9"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> twine upload --non-interactive --repository testpypi dist/*</span></span></code></pre></div>
<p>Once this is set create a tag for the current commit using the <em>Code &gt; Tags</em> settings from the left menu of your repository and then the <em>New tag</em> button on the top right. The tag you create should match the wild card pattern you have set for protecting tags and it should comply to the Public version identifiers specified in <a href="https://peps.python.org/pep-0440/#public-version-identifiers" target="_blank">PEP440</a>. On creation it triggers the Pipeline, you can check progress and status by navigating to <em>CI/CD &gt; Pipelines</em> and then viewing it. The <code>pypi</code> job should complete and you should be able to navigate to your package on <a href="https://test.pypi.org" target="_blank">Test PyPI</a>. You can find it under your account settings.</p>
<p>If you find there is a problem you will have to correct it and either delete the tag you created and try again or increment the version. PyPI, and in turn Test PyPI which is a mirror with the same functionality, does not permit uploading packages with a version number that already exists.</p>
</section>
<section id="publishing-to-pypi" class="level2">
<h2 class="anchored" data-anchor-id="publishing-to-pypi">Publishing to PyPI</h2>
<p>Once you have successfully published to the Test PyPI you are ready to publish to PyPI. There three things you need to do.</p>
<ol type="1">
<li>Delete the existing tag, if you want to apply the same tag to publish to PyPI you can do so.</li>
<li>Modify the repository option to point to PyPI <code>--repository pypi</code> (or remove it, the default is PyPI).</li>
<li>Change the key stored in the <code>$TWINE_PASSWORD</code> to that which you generated for PyPI instead of the one used for testing with Test PyPI.</li>
</ol>
<p>Once you have done so you can create a new tag and the upload will be made to PyPI.</p>
<section id="releases" class="level3">
<h3 class="anchored" data-anchor-id="releases">Releases</h3>
<p>An alternative way to apply tags to commits is to make a <a href="https://docs.gitlab.com/ee/user/project/releases/" target="_blank">Releases</a>. In creating a release you apply a tag to the current commit. In addition GitLab will build and compress snapshot of the files and you can add Release Notes detailing what has changed. GitLab will automatically build release artifacts of your repository and make them available for download directly from GitLab.</p>
</section>
</section>
<section id="links" class="level2">
<h2 class="anchored" data-anchor-id="links">Links</h2>
<section id="python-packaging" class="level3">
<h3 class="anchored" data-anchor-id="python-packaging">Python Packaging</h3>
<ul>
<li><a href="https://setuptools.pypa.io/en/latest/userguide/index.html" target="_blank">PyPA : Building and Distributing Packages with Setuptools</a></li>
<li><a href="https://packaging.python.org/en/latest/specifications/" target="_blank">PyPA : Specifications</a></li>
<li><a href="https://packaging.python.org/en/latest/tutorials/packaging-projects/" target="_blank">Packaging Python Projects</a></li>
<li><a href="https://www.pyopensci.org/python-package-guide/package-structure-code/intro.html" target="_blank">Python package structure information — pyOpenSci Python Packaging Guide</a></li>
</ul>
</section>
<section id="gitlab-documentation" class="level3">
<h3 class="anchored" data-anchor-id="gitlab-documentation">GitLab Documentation</h3>
<ul>
<li><a href="https://docs.gitlab.com/ee/topics/build_your_application.html" target="_blank">Use CI/CD to build your application | GitLab</a></li>
<li><a href="https://docs.gitlab.com/ee/ci/yaml/gitlab_ci_yaml.html" target="_blank">The <code>.gitlab-ci.yml</code> file | GitLab</a> +</li>
<li><a href="https://docs.gitlab.com/ee/user/project/protected_tags.html" target="_blank">Protected tags</a></li>
</ul>



</section>
</section>


<div class="quarto-listing quarto-listing-container-default" id="listing-listing">
<div class="list quarto-listing-default">

</div>
<div class="listing-no-matching d-none">
No matching items
</div>
</div><div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>PyPI now enforces Two Factor Authentication (2FA) for new accounts, see <a href="https://blog.pypi.org/posts/2023-08-08-2fa-enforcement-for-new-users/" target="_blank">2FA Enforcement for New User Registrations</a>↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{shephard2023,
  author = {Shephard, Neil},
  title = {GitLab {CI} - {Automatic} {Publishing} to {PyPI}},
  date = {2023-10-03},
  url = {https://blog.nshephard.dev/posts/gitlab-ci-pypi/},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-shephard2023" class="csl-entry quarto-appendix-citeas">
Shephard, Neil. 2023. <span>“GitLab CI - Automatic Publishing to
PyPI.”</span> October 3, 2023. <a href="https://blog.nshephard.dev/posts/gitlab-ci-pypi/">https://blog.nshephard.dev/posts/gitlab-ci-pypi/</a>.
</div></div></section></div> ]]></description>
  <category>python</category>
  <category>documentation</category>
  <category>packaging</category>
  <category>gitlab</category>
  <category>ci</category>
  <guid>https://blog.nshephard.dev/posts/gitlab-ci-pypi/</guid>
  <pubDate>Tue, 03 Oct 2023 00:00:00 GMT</pubDate>
  <media:content url="https://live.staticflickr.com/65535/52985552723_a975753e12_k.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Sphinx Documentation</title>
  <dc:creator>Neil Shephard</dc:creator>
  <link>https://blog.nshephard.dev/posts/sphinx-docs/</link>
  <description><![CDATA[ 





<p>How to generate documentation websites for your Python package using <a href="https://www.sphinx-doc.org/en/master/" target="_blank">Sphinx</a>, including generating API documentation automatically, build multiple versions across releases and automatically build and host them on GitHub Pages.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://live.staticflickr.com/7180/6891757680_739a505d05_k.jpg" class="img-fluid figure-img"></p>
<figcaption><a href="https://www.flickr.com/photos/slackline/6891757680/" target="_blank"><em>This is going on my blog</em> Picture by Me.</a></figcaption>
</figure>
</div>
<section id="pre-requisites" class="level2">
<h2 class="anchored" data-anchor-id="pre-requisites">Pre-requisites</h2>
<p>The instructions here assume that you have your <a href="https://ns-rse.github.io/posts/python-packaging/" target="_blank">Python Packaging</a> well structured, under version control and backed up on <a href="https://github.com" target="_blank">GitHub</a>.</p>
</section>
<section id="initial-setup" class="level2">
<h2 class="anchored" data-anchor-id="initial-setup">Initial Setup</h2>
<p>Sphinx comes with the <a href="https://www.sphinx-doc.org/en/master/man/sphinx-quickstart.html" target="_blank"><code>sphinx-quickstart</code></a> interactive tool which will help setup your repository with a basic <code>conf.py</code> and <code>Makefile</code>. There are a number of command line options but it is also interactive so you can answer questions to configure your setup. I like to keep the source and build directories separate and so use the <code>--sep</code> flag as well as the <code>--makefile</code> flag to generate a <code>Makefile</code> for building documentation on GNU/Linux or OSX (if you use M$-Win the use the <code>--batchfile</code> flag instead).</p>
<p>I keep documentation under <code>docs/</code> directory within the root of the package directory.</p>
<pre class="{bash}"><code>cd ~/path/to/package
mkdir docs
cd docs
sphinx-quickstart --makefile</code></pre>
</section>
<section id="conf.py" class="level2">
<h2 class="anchored" data-anchor-id="conf.py"><code>conf.py</code></h2>
<p>Configuration is via a <code>conf.py</code> the automatically generated <code>conf.py</code> produced by <code>sphinx-quickstart</code>. It is well commented and instructive on how to use it to configure Sphinx and contains details on adding/modifying various sections of the this file.</p>
<p>Key sections are the list of <code>extensions</code> that your documentation uses.</p>
</section>
<section id="index.rst" class="level2">
<h2 class="anchored" data-anchor-id="index.rst"><code>index.rst</code></h2>
<p>The front-page of your website, typically <code>index.html</code> for static sites, is derived from <code>index.rst</code>. You can write welcome details about your project and link to other pages you have written. Typically I write all but the front matter in Markdown.</p>
<pre class="{bash}"><code>Welcome to my packages documentation
====================================

This is my package, there are many packages like it but this one is mine.</code></pre>
<section id="including-markdown" class="level3">
<h3 class="anchored" data-anchor-id="including-markdown">Including Markdown</h3>
<p>I already know <a href="https://www.markdownguide.org/" target="_blank">Markdown</a> fairly well and would rather use that to write documents (as I do with thisblog). Fortunately Sphinx can incorporate documentation written in <a href="https://github.com/ryanfox/sphinx-markdown-tables" target="_blank">Markdown</a> using the <a href="https://myst-parser.readthedocs.io/en/latest/" target="_blank"><code>myst_parser</code></a> package. Simply include it in the <code>extensions</code>.</p>
<div id="835d3073" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">extensions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb3-2">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"myst_parser"</span>,</span>
<span id="cb3-3">]</span></code></pre></div>
</div>
<p>By default it works with extensions of <code>.md</code> but if there are other flavours you wish to include (e.g.&nbsp;<code>.Rmd</code> for RMarkdown or <code>.qmd</code> for Quarto) you add them to the <code>source_suffix</code> in <code>docs/conf.py</code></p>
<div id="80bf8444" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">source_suffix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".rst"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"restructuredtext"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".md"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"markdown"</span>}</span></code></pre></div>
</div>
<p>In your <code>index.rst</code> you can then list the Markdown filenames, without extensions. For example if you have an <code>installation.md</code> and <code>configuration.md</code> place them in the same directory as <code>index.rst</code> (the root <code>docs/</code>) directory and have in your <code>index.rst</code> have…</p>
<pre class="{bash}"><code>Welcome to my packages documentation
====================================

This is my package, there are many packages like it but this one is mine.

.. toctree::
   :maxdepth: 1
   :caption: Getting Started
   introduction
   configuration</code></pre>
<section id="markdown-tables" class="level4">
<h4 class="anchored" data-anchor-id="markdown-tables">Markdown Tables</h4>
<p>If you have tables in Markdown (and its likely that you will) then you will need the <a href="https://github.com/ryanfox/sphinx-markdown-tables" target="_blank"><code>sphinx-markdown-tables</code></a> package which ensures they are rendered correctly.</p>
</section>
<section id="mermaid-diagrams" class="level4">
<h4 class="anchored" data-anchor-id="mermaid-diagrams">Mermaid Diagrams</h4>
<p>Further Sphinx has support for <a href="https://mermaid.js.org/" target="_blank">Mermaid</a> diagrams that have been written in Markdown documents via the <a href="https://github.com/mgaitan/sphinxcontrib-mermaid" target="_blank"><code>sphinxcontrib-mermaid</code></a> package. This means that you can include all sorts of neat diagrams such as <a href="https://mermaid.live/edit#pako:eNqlVl1v2jAU_SuWJcQLQ4kTWpI31o-tU7tupX2ZeDHJDVhNbOQ4HS3iv-8mIRPQpBBKHrDjc66Pfc91vKKBCoH6tNNZCSmMT1ZdM4cEuj7pTnkK3R7pzoT5pvli3s1HtTLcwIVKEmFu-RRifGt0BuuJJNUP2-tOp3xRkf8PBwWViNAnE3rLU0Mi4CbTMKH1mBerb_etrdGp5jKYb0ZIJJaQvudO6ONcpBUWW5HSJZYYRXJmXcQ7kaZCzsiP8f1PRMdQ8vbgO_JGYUiSbdomfN_ahN0mziF4Vplp0p6AnsFpMoop7bq5Ei5kPee63Hi7Cs52trkOyo6AvhvdzhdrylfJPZAz1i5nrGXO2OGcsRNyVq9aacDYXM6O0Pu0CLHoyAUPQb5xEquZOgB9uBpd3l2dsow2uoo9a2m6ahFf8XSJhWws-yc8jsgjpKaUAS88zrhROj2WIHERATTjUbzT6FPnUz516qJei2Xuj1QlYOZ5S0iCZy2JsryyiJL7zN0CFMsmamOWncYst9dywD7tVsk-WmWOTnkCZKHVNIak4pxemp_TVJictdjk9y5rWSIPEPEArU6-j0a_b5oib6HGx6F-3Xyg0m2sBfdTteDW71yx-kYXaLwWqAi3SL4SCX-rK0LamAX3Q0fupn5f1L4BK9_ZG2ccBWZ14AMSt_x5vMIiVS0NdavwUEzyk31zKiYgDSqhPYoakBfiFXCVcye0uP5NaE4LuX7OJ1ojLiu-K1ehQC9RP7_x9SjPjBq_yqDql5hLwWeaJ9XLBZd_lMJuxOO07FN_RZfU_-IOrb43OMfH8twzNhwOevSV-mdW_8xiA8-ybc_DP2_do29FCPxAM9dyhoOBw5xzzx6s_wG-Ijr0" target="_blank">Git Graph</a>.</p>
<div class="cell" data-fig-height="2" data-layout-align="default">
<div class="cell-output-display">
<div>
<p></p><figure class="figure"><p></p>
<div>
<pre class="mermaid mermaid-js">%%{init: { 'logLevel': 'debug', 'theme': 'base', 'gitGraph': {'showBranches': true,'showCommitLabel': true, 'rotateCommitLabel': true}} }%%
gitGraph
    commit
    commit
    branch bug1
    checkout main
    commit
    checkout bug1
    commit
    commit
    checkout main
    branch bug2
    checkout bug2
    commit
    commit
    checkout bug1
    commit
    checkout main
    merge bug1 tag: "v0.1.1"
    checkout bug2
    commit
    commit
    checkout main
    merge bug2 tag: "v0.1.2"
    commit
</pre>
</div>
<p></p></figure><p></p>
</div>
</div>
</div>
</section>
</section>
</section>
<section id="including-api-documentation" class="level2">
<h2 class="anchored" data-anchor-id="including-api-documentation">Including API Documentation</h2>
<p>As you write your package it is good practice include <a href="https://realpython.com/documenting-python-code/" target="_blank">docstrings</a> for each module/class/method/function that you write. For Python there are several different styles for writing these, my personal preference is for <a href="https://numpydoc.readthedocs.io/en/latest/format.html" target="_blank">numpydoc style</a> but regardless of your preference you should write them. They are invaluable to users (including your future self) to understand how the code works and as many modern Integrated Development Environments (IDEs) supporting functionality to show the documentation for functions as you type they are an invaluable reference. If you’re an <a href="https://www.gnu.org/software/emacs/" target="_blank">Emacs</a> user then you can leverage the <a href="https://github.com/douglasdavis/numpydoc.el" target="_blank">numpydoc</a> package to automatically insert NumPy docstrings in Python function definitions based on the function definition, it automatically detects names, type hints, exceptions and return types to generate the docstring (yet another reason to use Emacs!).</p>
<p>Whilst it is useful to have this API available in an IDE as you work it is also useful to include the reference on a packages website and this is relatively straight-forward with Sphinx which provides several tools and extensions.</p>
<section id="sphinx-apidoc" class="level3">
<h3 class="anchored" data-anchor-id="sphinx-apidoc"><code>sphinx-apidoc</code></h3>
<p>The first is the the <a href="https://www.sphinx-doc.org/en/master/man/sphinx-apidoc.html" target="_blank"><code>sphinx-apidoc</code></a> command to generate documentation from the embedded docstrings. This is a command line tool that could be added to the <code>Makefile</code>.</p>
</section>
<section id="sphinx-autoapi" class="level3">
<h3 class="anchored" data-anchor-id="sphinx-autoapi"><code>sphinx-autoapi</code></h3>
<p>However, rather than learning the intricacies of using this command the package Sphinx extensions <a href="https://sphinx-autoapi.readthedocs.io/en/latest/" target="_blank">sphinx-autoapi</a> can be leveraged to automatically build the API documentation for you. This is particularly useful when you come to build multiple versions of your documentation as it means you do not have to include the <code>.rst</code> files that <code>sphinx-apidoc</code> generates in your repository they are generated on the fly when Sphinx builds each version of the documentation.</p>
<p>Configuration is via <code>docs/conf.py</code> and the package needs referencing in the <code>extensions</code> section then <a href="https://sphinx-autoapi.readthedocs.io/en/latest/reference/config.html" target="_blank">configuring</a> at a bare minimum which directories to generate documentation from. i</p>
<div id="22aa82e5" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">extensions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb6-2">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"autoapi.extension"</span>,</span>
<span id="cb6-3">]</span>
<span id="cb6-4"></span>
<span id="cb6-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># -- autoapi configuration ---------------------------------------------------</span></span>
<span id="cb6-6">autotype_api <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"python"</span></span>
<span id="cb6-7">autoapi_dirs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"../mypackage"</span>]</span></code></pre></div>
</div>
<p>There are a lot of subtle configuration options and I would recommend reading the <a href="https://sphinx-autoapi.readthedocs.io/en/latest/" target="_blank">documentation</a> and working through the <a href="https://sphinx-autoapi.readthedocs.io/en/latest/tutorials.html" target="_blank">Tutorials</a> and <a href="https://sphinx-autoapi.readthedocs.io/en/latest/how_to.html" target="_blank">How To Guides</a>.</p>
<p>This has the added advantage that it works with <a href="https://readthedocs.org" target="_blank">ReadTheDocs</a>.</p>
</section>
<section id="sphinx-autosummary" class="level3">
<h3 class="anchored" data-anchor-id="sphinx-autosummary">Sphinx Autosummary</h3>
<p>In addition the <a href="https://www.sphinx-doc.org/en/master/usage/extensions/autosummary.html" target="_blank">sphinx_ext_autosummary</a> automates summarising the API docstrings.</p>
<p>Add the package as a dependency to the <code>extensions</code>…</p>
<div id="96535505" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">extensions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb7-2">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sphinx.ext.autosummary"</span></span>
<span id="cb7-3">]</span></code></pre></div>
</div>
<p>Under the <code>index.rst</code> you should include a section header for the <code>api</code> that references an <code>api.rst</code> page for inclusion.</p>
<pre class="{rst}"><code>.. toctree::
   :maxdepth: 2
   :caption: API

   api</code></pre>
<p>And then create the <code>api.rst</code> page which need only have the following. By including <code>:recursive:</code> the sub-modules will be included automatically.</p>
<pre class="{rst}"><code>API
===

.. autosummary::
   :recursive:
   :toctree: generated

   mypackage</code></pre>
</section>
</section>
<section id="multiple-versions" class="level2">
<h2 class="anchored" data-anchor-id="multiple-versions">Multiple Versions</h2>
<p>Over time code and in turn documentation changes, not just the API but the documents written to demonstrate installation and usage of software. Not everyone always uses the latest version of your software and so it can be useful to provision documentation for each version that is available. Fortunately the Sphinx extension <a href="https://holzhaus.github.io/sphinx-multiversion/master/" target="_blank">sphinx-multiversion</a> makes this relatively painless.</p>
<p>You need to include it in the list of <code>extensions</code> of <code>docs/conf.py</code></p>
<div id="d226ea57" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">extensions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb10-2">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sphinx_multiversion"</span>,</span>
<span id="cb10-3">]</span></code></pre></div>
</div>
<section id="configuring-versions" class="level3">
<h3 class="anchored" data-anchor-id="configuring-versions">Configuring Versions</h3>
<section id="sidebar" class="level4">
<h4 class="anchored" data-anchor-id="sidebar">Sidebar</h4>
<p>For versions to not just be built but available you need to include a section on your site that allows selecting which version of the documentation to view. Sidebars are included via HTML templates and you need to configure the path to this directory and the name of the HTML file within it. The following options in the <code>conf.py</code> configure the <code>_templates</code> directory and within it the <code>versioning.html</code> file.</p>
<div id="c86c28cb" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">templates_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb11-2">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_templates"</span>,</span>
<span id="cb11-3">]</span>
<span id="cb11-4"></span>
<span id="cb11-5">html_sidebars <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>  {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"**"</span>:   <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"versioning.html"</span>,}</span></code></pre></div>
</div>
<p>The <code>versioning.html</code> file can take a number of formats, refer to the <a href="https://holzhaus.github.io/sphinx-multiversion/master/templates.html" target="_blank">documentation</a> for all options, but the following is an example.</p>
<pre class="{html}"><code>{% if versions %}
&lt;h3&gt;{{ _('Versions') }}&lt;/h3&gt;
&lt;ul&gt;
  {%- for item in versions %}
  &lt;li&gt;&lt;a href="{{ item.url }}"&gt;{{ item.name }}&lt;/a&gt;&lt;/li&gt;
  {%- endfor %}
&lt;/ul&gt;
{% endif %}</code></pre>
<p>Ensure this file is under Git version control, it is needed to build your pages on GitHub.</p>
</section>
<section id="tagsbranches" class="level4">
<h4 class="anchored" data-anchor-id="tagsbranches">Tags/Branches</h4>
<p>If no options are set then <code>sphinx-multiversion</code> will build documentation for <em>all</em> branhces, which is probably undesirable. Typically you want to restrict this to the released versions which are identified by <a href="https://git-scm.com/book/en/v2/Git-Basics-Tagging" target="_blank">git tags</a> and perhaps your <code>main</code>/<code>master</code> branch. If you prefix your tags with <code>v</code> and you want to build the documentation for the <code>HEAD</code> of your <code>main</code> (or <code>master</code>) branch then you should set options as shown below for <code>sphinx-multiversion</code>. I like to be able to test documentation builds and so I have a section that allows me to include a given branch.</p>
<div id="c4200baf" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">smv_tag_whitelist <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r"^v\d+.*$"</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Tags beginning with v#</span></span>
<span id="cb13-2">smv_branch_whitelist <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r"^main$"</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># main branch</span></span>
<span id="cb13-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If testing changes locally comment out the above and the smv_branch_whitelist below instead. Replace the branch name</span></span>
<span id="cb13-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># you are working on ("ns-rse/testing-branch" in the example below) with the branch you are working on and run...</span></span>
<span id="cb13-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#</span></span>
<span id="cb13-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># cd docs</span></span>
<span id="cb13-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># sphinx-multiversion . _build/html</span></span>
<span id="cb13-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#</span></span>
<span id="cb13-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># smv_branch_whitelist = r"^(main|ns-rse/testing-branch)$"  # main branch</span></span>
<span id="cb13-10">smv_released_pattern <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r"^tags/.*$"</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Tags only</span></span>
<span id="cb13-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># smv_released_pattern = r"^(/.*)|(main).*$"  # Tags and HEAD of main</span></span>
<span id="cb13-12">smv_outputdir_format <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{ref.name}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span></code></pre></div>
</div>
<p>If you are testing locally be sure to revert the commented sections so that the branch is not built on GitHub Pages.</p>
</section>
</section>
</section>
<section id="themes" class="level2">
<h2 class="anchored" data-anchor-id="themes">Themes</h2>
<p>There are a number of different themes available for including in your package. Which is used is defined by the <code>html_theme</code> variable in <code>docs/conf.py</code>. I like the <a href="https://pydata-sphinx-theme.readthedocs.io/en/stable/index.html" target="_blank"><code>pydata-sphinx-theme</code></a> that is used by <a href="https://pandas.pydata.org" target="_blank">Pandas</a>/<a href="https://pydata-sphinx-theme.readthedocs.io/en/stable/index.html" target="_blank">Matplotlib</a>.</p>
<div id="755bcf3d" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">html_theme <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pydata_sphinx_theme"</span></span></code></pre></div>
</div>
</section>
<section id="package-dependencies" class="level2">
<h2 class="anchored" data-anchor-id="package-dependencies">Package Dependencies</h2>
<p>Since the documentation is part of your package it is important to include all of the dependencies that are required for building the documentation dependencies of your package so they can be easily installed and are available to Sphinx (since Sphinx will try loading anything listed in your <code>docs/conf.py</code>). These days you should really be using <code>pyproject.toml</code> to configure and manage your package, if you are unfamiliar with the packaging process see my post on <a href="https://ns-rse.github.io/posts/python-packaging/" target="_blank">Python Packaging</a>.</p>
<div id="d6834eee" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">[project.optional<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>dependencies]</span>
<span id="cb15-2"></span>
<span id="cb15-3">docs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb15-4">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Sphinx"</span>,</span>
<span id="cb15-5">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"myst_parser"</span>,</span>
<span id="cb15-6">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"numpydoc"</span>,</span>
<span id="cb15-7">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pydata_sphinx_theme"</span>,</span>
<span id="cb15-8">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sphinx-autoapi"</span>,</span>
<span id="cb15-9">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sphinx-autodoc-typehints"</span>,</span>
<span id="cb15-10">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sphinx-multiversion"</span>,</span>
<span id="cb15-11">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sphinx_markdown_tables"</span>,</span>
<span id="cb15-12">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sphinx_rtd_theme"</span>,</span>
<span id="cb15-13">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sphinxcontrib-mermaid"</span>,</span>
<span id="cb15-14">]</span></code></pre></div>
</div>
<p>Ensure all of these dependencies are installed in your Virtual Environment.</p>
<pre class="{bash}"><code>cd ~/path/to/package
pip install .[docs]</code></pre>
</section>
<section id="building-documentation" class="level2">
<h2 class="anchored" data-anchor-id="building-documentation">Building Documentation</h2>
<p>You are now ready to build your documentation locally.</p>
<pre class="{bash}"><code>cd ~/path/to/package/docs
mkdir -p _build/html
sphinx-multiversion . _build/html</code></pre>
<p>Output should reside under the <code>~/path/to/package/docs/_build/html/</code> directory and there should be a directory for every tag as well as <code>main</code> (or <code>master</code>).</p>
<section id="deploying-on-github-pages" class="level3">
<h3 class="anchored" data-anchor-id="deploying-on-github-pages">Deploying on GitHub Pages</h3>
<p>The final stage is to leverage <a href="https://pages.github.com/" target="_blank">GitHub Pages</a> to host your documentation. This can be achieved using a <a href="https://docs.github.com/en/actions" target="_blank">GitHub Action</a>. These are a way of running certain tasks automatically on GitHub in response to certain actions. You can configure your actions to use those defined by others. I found the <a href="https://github.com/uibcdf/action-sphinx-docs-to-gh-pages" target="_blank"><code>action-sphinx-docs-to-gh-pages</code></a> action for generating Sphinx documentation but it didn’t support generating API documentation nor multiple versions of documentation so I have <a href="https://github.com/ns-rse/action-sphinx-docs-to-gh-pages" target="_blank">forked</a> it and added this functionality (I intend to work with the authors and push the changes upstream).</p>
<p>To use this action you need to create a file in <code>~/path/to/package/.github/workflows/</code> called <code>sphinx_docs_to_gh_pages.yaml</code> and copy and paste the following <a href="https://yaml.org/" target="_blank">YAML</a>.</p>
<pre class="{yaml}"><code>name: Sphinx docs to gh-pages

on:
  push:
  workflow_dispatch:

jobs:
  sphinx_docs_to_gh-pages:
    runs-on: ubuntu-latest
    name: Sphinx docs to gh-pages
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Setup Python
        uses: actions/setup-python@v4.3.0
        with:
          python-version: 3.9
      - name: Installing the Documentation requirements
        run: |
          pip3 install .[docs]
      - name: Running Sphinx to gh-pages Action
        uses: ns-rse/action-sphinx-docs-to-gh-pages@main
        with:
          # When testing set this branch to your branch, when working switch to main. It WILL fail if not
          # defined as it defaults to 'main'.
          branch: main
          dir_docs: docs
          sphinxapiexclude: '../*setup* ../*tests* ../*.ipynb ../demo.py ../make_baseline.py ../jupyter_notebook_config.py ../demo_ftrs.py'
          sphinxapiopts: '--separate -o . ../'
          sphinxopts: ''
          multiversion: true
          multiversionopts: ''
</code></pre>
<p>Save, add and commit to your Git repository and push the changes to GitHub.</p>
</section>
</section>
<section id="links" class="level2">
<h2 class="anchored" data-anchor-id="links">Links</h2>
<ul>
<li><a href="https://www.sphinx-doc.org/en/master/" target="_blank">Sphinx</a></li>
</ul>
<section id="sphinx-extensions" class="level3">
<h3 class="anchored" data-anchor-id="sphinx-extensions">Sphinx Extensions</h3>
<ul>
<li><a href="https://myst-parser.readthedocs.io/en/latest/" target="_blank"><code>myst_parser</code></a></li>
<li><a href="https://sphinx-autoapi.readthedocs.io/en/latest/" target="_blank"><code>sphinx-autoapi</code></a></li>
<li><a href="https://github.com/ryanfox/sphinx-markdown-tables" target="_blank"><code>sphinx-markdown-tables</code></a></li>
<li><a href="https://holzhaus.github.io/sphinx-multiversion/master/" target="_blank"><code>sphinx-multiversion</code></a></li>
<li><a href="https://github.com/mgaitan/sphinxcontrib-mermaid" target="_blank"><code>sphinxcontrib-mermaid</code></a></li>
<li><a href="https://www.sphinx-doc.org/en/master/usage/extensions/autosummary.html" target="_blank"><code>sphinx-ext-autosummary</code></a></li>
</ul>
</section>
<section id="github" class="level3">
<h3 class="anchored" data-anchor-id="github">GitHub</h3>
<ul>
<li><a href="https://pages.github.com/" target="_blank">GitHub Pages</a></li>
<li><a href="https://docs.github.com/en/actions" target="_blank">GitHub Action</a></li>
<li><a href="https://github.com/marketplace/actions/sphinx-docs-to-github-pages" target="_blank">Sphinx docs to GitHub Pages · Actions · GitHub Marketplace</a> ( <a href="https://github.com/ns-rse/action-sphinx-docs-to-gh-pages" target="_blank">my fork</a> with added <code>sphinx-multiversion</code> support).</li>
</ul>



</section>
</section>

<div class="quarto-listing quarto-listing-container-default" id="listing-listing">
<div class="list quarto-listing-default">

</div>
<div class="listing-no-matching d-none">
No matching items
</div>
</div><div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{shephard2023,
  author = {Shephard, Neil},
  title = {Sphinx {Documentation}},
  date = {2023-05-07},
  url = {https://blog.nshephard.dev/posts/sphinx-docs/},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-shephard2023" class="csl-entry quarto-appendix-citeas">
Shephard, Neil. 2023. <span>“Sphinx Documentation.”</span> May 7, 2023.
<a href="https://blog.nshephard.dev/posts/sphinx-docs/">https://blog.nshephard.dev/posts/sphinx-docs/</a>.
</div></div></section></div> ]]></description>
  <category>quarto</category>
  <category>python</category>
  <category>documentation</category>
  <category>sphinx</category>
  <category>github actions</category>
  <guid>https://blog.nshephard.dev/posts/sphinx-docs/</guid>
  <pubDate>Sun, 07 May 2023 00:00:00 GMT</pubDate>
  <media:content url="https://live.staticflickr.com/7180/6891757680_739a505d05_k.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Python Packaging</title>
  <dc:creator>Neil Shephard</dc:creator>
  <link>https://blog.nshephard.dev/posts/python-packaging/</link>
  <description><![CDATA[ 





<p>This post describes steps in creating a <a href="https://www.python/org" target="_blank">Python</a> package. If you are looking for information on installing packages this is done using <a href="https://pypi.org/" target="_blank">Python PIP</a>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://live.staticflickr.com/65535/52595884731_fb5c7d576e_k.jpg" class="img-fluid figure-img"></p>
<figcaption><a href="https://www.flickr.com/photos/slackline/52595884731/" target="_blank"><em>Water and Light</em> - Picture by Me</a></figcaption>
</figure>
</div>
<p><a href="https://www.python/org" target="_blank">Python</a> packaging is in a constant state of flux. There is the official <a href="https://packaging.python.org/en/latest/" target="_blank">Python Packaging User Guide</a> and the <a href="https://www.pypa.io/en/latest/" target="_blank">Python Packaging Authority (PyPA)</a> which is probably the best resource to read but things change, and often quickly. The focus here is on the PyPA <a href="https://setuptools.pypa.io/en/latest/index.html" target="_blank">Setuptools</a> using <code>pyproject.toml</code> which works with Python &gt;= 3.7, but you may wish to consider other packages such as <a href="../../posts/python-packaging/index.html#poetry" target="_blank">Poetry</a> or <a href="../../posts/python-packaging/index.html#PDM" target="_blank">PDM</a> which offer some advantages but with additional frameworks to learn.</p>
<p>A few examples of Python packages that I have packaged are listed below, most have also been released to <a href="https://pypi.org/" target="_blank">PyPI</a>.</p>
<ul>
<li><a href="https://pypi.org/project/tcx2gpx/" target="_blank">tcx2gpx</a> (personal)</li>
<li><a href="https://github.com/AFM-SPM/TopoStats/" target="_blank">TopoStats</a> (professional)</li>
<li><a href="https://github.com/claritychallenge/clarity" target="_blank">clarity</a> (professional)</li>
<li><a href="https://github.com/Mesnage-Org/pgfinder" target="_blank">pgfinder</a> (professional)</li>
</ul>
<section id="package-structure" class="level2">
<h2 class="anchored" data-anchor-id="package-structure">Package Structure</h2>
<p>You should place your code within a Git version controlled directory for your project. It is then normal to place all files in an organised hierarchy with a sub-directory of the same name for Python code, known as a "flat" structure and tests under <code>tests</code> directory. It is possible to have more than one directory containing code but for now I'm sticking to the flat structure.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">.</span></span>
<span id="cb1-2">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> ./build</span>
<span id="cb1-3">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> ./dist</span>
<span id="cb1-4">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> ./</span>
<span id="cb1-5">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> ./my_package</span>
<span id="cb1-6">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> ./my_package/__init__.py</span>
<span id="cb1-7">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> ./my_package/module_a.py</span>
<span id="cb1-8">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> ./my_package/module_b.py</span>
<span id="cb1-9">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> ./my_package/something/module_c.py</span>
<span id="cb1-10">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">└──</span> ./tests</span>
<span id="cb1-11">        <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> ./tests/conftest.py</span>
<span id="cb1-12">        <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> ./tests/resources</span>
<span id="cb1-13">        <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> ./tests/test_module_a.py</span>
<span id="cb1-14">        <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> ./tests/test_module_b.py</span>
<span id="cb1-15">        <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">└──</span> ./tests/something/test_module_c.py</span></code></pre></div>
<section id="init__.py" class="level3">
<h3 class="anchored" data-anchor-id="init__.py"><code>__init__.py</code></h3>
<p>In older versions of Python (&lt;3.3) a <code>__init__.py</code> was required in every directory and sub-directory that was to be a module/sub-module. In more recent versions of Python (&gt;\=3.3) they are not essential though as Python uses <a href="https://docs.python.org/3/reference/import.html#namespace-packages" target="_blank">namespace packages</a>. But in most cases its simpler to include such a file in the top level of your directory. <code>__init__.py</code> files can be completely empty or they can contain code that is used throughout your package, such as setting up a logger.</p>
</section>
</section>
<section id="configuration-pyproject.toml" class="level2">
<h2 class="anchored" data-anchor-id="configuration-pyproject.toml">Configuration <code>pyproject.toml</code></h2>
<p>Package configuration has been and is in a state of flux, there was originally <code>setup.py</code> which was then complemented and gradually replaced by <code>setup.cfg</code>. The new method on the block though is <code>pyproject.toml</code> which, with a little tweaking and judicious choice of packages can handle everything.</p>
<p>Setuptools is shifting towards using <code>pyproject.toml</code> and whilst it is still under development its already highly functional. It’s written in <a href="https://toml.io/en/" target="_blank">Tom's Obvious Minimal Language</a> and isn't too dissimilar in structure to <code>setup.cfg</code>.</p>
<p>A useful reference for writing your configuration in <code>pyproject.toml</code> is <a href="https://setuptools.pypa.io/en/latest/userguide/pyproject_config.html" target="_blank">Configuring setuptools using pyproject.toml files</a>. It is based around <a href="https://peps.python.org/pep-0621/" target="_blank">PEP 621 – Storing project metadata in pyproject.toml | peps.python.org</a>.</p>
<p>A bare-bones <code>pyproject.toml</code> file should reside in the top level of your directory with the following (<strong>NB</strong> This includes the minimum versions and <code>setuptools_scm</code> extension for dynamically setting package version)…</p>
<section id="build-system" class="level3">
<h3 class="anchored" data-anchor-id="build-system"><code>build-system</code></h3>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode toml code-with-copy"><code class="sourceCode toml"><span id="cb2-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[build-system]</span></span>
<span id="cb2-2"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">requires</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"setuptools&gt;=65.6.3"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"setuptools_scm[tools]&gt;=6.2"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"wheel"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb2-3"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">build-backend</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"setuptools.build_meta"</span></span></code></pre></div>
<p>Traditionally configuration of meta-data such as author, code repository and license was made via <code>setup.py</code> but you can either specify some (or most) of this in <code>pyproject.toml</code> or a concurrent <code>setup.cfg</code>.</p>
</section>
<section id="project" class="level3">
<h3 class="anchored" data-anchor-id="project"><code>project</code></h3>
<p>This is the main body of the project description detailing <code>name</code>, <code>authors</code>, <code>description</code>, <code>readme</code>, <code>license</code>, <code>keywords</code>, <code>classifiers</code>, <code>dependencies</code> and <code>version</code> amongst other things.</p>
<p>The type of license you have chosen to apply to your package. For guidance see <a href="https://choosealicense.com/" target="_blank">Choose an Open Source License</a>.</p>
<p>The <code>README</code> of your package which may be in <a href="https://www.markdownguide.org/" target="_blank">Markdown</a> or Restructured Text.</p>
<p>Sets the components of your package which are set dynamically. In this example we only set the version dynamically using <code>setuptools_scm</code>.</p>
<p>The <code>dependencies</code> are those that are required for running the code. They should not include packages that are required for development (e.g.&nbsp;<code>black</code>. <code>flake8</code>, <code>ruff</code>, <code>pre-comit</code>, <code>pylint</code> etc.), nor those required for testing (e.g.&nbsp;<code>pytest</code>, <code>pytest-regtest</code>, <code>pytest-cov</code> etc.), documentation (e.g.&nbsp;<code>Sphinx</code>, <code>numpydoc</code>, <code>sphinx_markdown_table</code>, <code>sphinx-autodoc-typehints</code>, <code>sphinxcontrib-mermaid</code> etc.) as these are defined in a separate section.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode toml code-with-copy"><code class="sourceCode toml"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[project]</span></span>
<span id="cb3-2"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">name</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"my_package"</span></span>
<span id="cb3-3"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">authors</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb3-4">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">name</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Author 1"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">, </span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">email</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"author1@somewhere.com"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">},</span></span>
<span id="cb3-5">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">name</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Author 2"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">, </span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">email</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"author2@somewhere.com"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">},</span></span>
<span id="cb3-6">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">name</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Author 3"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">, </span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">email</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"author3@somewhere.com"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">},</span></span>
<span id="cb3-7"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb3-8"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">description</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A package that does some magic!"</span></span>
<span id="cb3-9"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">license</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"GNU GPLv3 only"</span></span>
<span id="cb3-10"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">readme</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"README.md"</span></span>
<span id="cb3-11"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">dynamic</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"version"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb3-12"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">dependencies</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb3-13">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"numpy"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-14">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pandas"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-15">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tqdm"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-16"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span></code></pre></div>
<p>All other sections are considered subsections, either of <code>project</code> or <code>tool</code> and are defined under their own heading with <code>[project|tool].&lt;package&gt;[.&lt;options&gt;]</code>.</p>
<section id="project.urls" class="level4">
<h4 class="anchored" data-anchor-id="project.urls"><code>project.urls</code></h4>
<p>These are important as they define where people can find the <code>Source</code>, <code>Documentation</code> and <code>Bug_Tracker</code> amongst other things. There may be more fields that can be configured here but I've not used the yet. Substitute these to reflect where your package is hosted, your username and the package name.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode toml code-with-copy"><code class="sourceCode toml"><span id="cb4-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[project.urls]</span></span>
<span id="cb4-2"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Source</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://gitlab.com/username/my_package"</span></span>
<span id="cb4-3"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Bug_Tracker</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://gitlab.com/username/my_package/issues"</span></span>
<span id="cb4-4"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Documentation</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://username.gitlab.com/my_package"</span></span></code></pre></div>
</section>
<section id="project.optional-dependencies" class="level4">
<h4 class="anchored" data-anchor-id="project.optional-dependencies"><code>project.optional-dependencies</code></h4>
<p>This is where you list dependencies that are not required for running a package but are required for different aspects such as development, documentation, publishing to PyPI, additional Notebooks and so forth, the options are limitless.</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode toml code-with-copy"><code class="sourceCode toml"><span id="cb5-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[project.optional-dependencies]</span></span>
<span id="cb5-2"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">dev</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb5-3">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb5-4">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"flake8"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb5-5">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Flake8-pyproject"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb5-6">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pre-commit"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb5-7">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pylint"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb5-8">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ruff"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb5-9"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb5-10"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">docs</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb5-11">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Sphinx"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb5-12">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"myst-parser"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb5-13">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"numpydoc"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb5-14">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pydata_sphinx_theme"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb5-15">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sphinx-autodoc-typehints"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb5-16">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sphinx_markdown_tables"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb5-17">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sphinxcontrib-mermaid"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb5-18"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb5-19"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">pypi</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb5-20">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"build"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb5-21">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pytest-runner"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb5-22">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"setuptools-lint"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb5-23">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"setuptools_scm"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb5-24">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"twine"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb5-25">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"wheel"</span></span>
<span id="cb5-26"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb5-27"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">test</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb5-28"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pytest"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb5-29"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pytest-cov"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb5-30"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb5-31"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">notebooks</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb5-32">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ipython"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb5-33">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ipywidgets"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb5-34">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"jupyter_contrib_nbextensions"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb5-35">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"jupyterthemes"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb5-36"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span></code></pre></div>
</section>
<section id="project.scripts-entry-points" class="level4">
<h4 class="anchored" data-anchor-id="project.scripts-entry-points"><code>project.scripts</code> (Entry Points)</h4>
<p>Entry points or <code>scripts</code> are a neat method of providing a simple command line interface to your package that links directly into a specific module to provide a command line interface to your programme.</p>
<p>These are defined under <code>project.scripts</code> section.</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode toml code-with-copy"><code class="sourceCode toml"><span id="cb6-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[project.scripts]</span></span>
<span id="cb6-2"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">tcx2gpx</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tcx2gpx:process"</span></span></code></pre></div>
</section>
</section>
<section id="tool" class="level3">
<h3 class="anchored" data-anchor-id="tool"><code>tool</code></h3>
<section id="tool.setuptools" class="level4">
<h4 class="anchored" data-anchor-id="tool.setuptools"><code>tool.setuptools</code></h4>
<p><a href="https://setuptools.pypa.io/en/latest/index.html" target="_blank">setuptools</a> is perhaps the most common package for configuring Python packages and is the one that is being exposed here. Its configuration is multi-level depending on which component you are configuring.</p>
<section id="tool.setuptools.packages.find" class="level5">
<h5 class="anchored" data-anchor-id="tool.setuptools.packages.find"><code>tool.setuptools.packages.find</code></h5>
<p>Uses the <code>find</code> utility to search for packages to include, based on my understanding it looks for <code>__init__.py</code> in a directory and includes it (see above note about these no longer being required in every directory). Typically you would want to exclude <code>tests/</code> from a package you are making as most users won’t need to run the test suite (if they do they would clone from the source repository).</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode toml code-with-copy"><code class="sourceCode toml"><span id="cb7-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[tool.setuptools.packages.find]</span></span>
<span id="cb7-2"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">where</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"."</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb7-3"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">include</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tcx2gpx"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb7-4"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">exclude</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tests"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span></code></pre></div>
</section>
</section>
<section id="tool.setuptools.package-data" class="level4">
<h4 class="anchored" data-anchor-id="tool.setuptools.package-data"><code>tool.setuptools.package-data</code></h4>
<p>This allows additional, non <code>.py</code> files to be included, they are listed on a per package basis and are a table (in toml parlance, list in Python terms).</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode toml code-with-copy"><code class="sourceCode toml"><span id="cb8-1">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[tool.setuptools.packages-data]</span></span>
<span id="cb8-2">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">tcx2gpx</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"*.yaml"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"*.json"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span></code></pre></div>
</section>
<section id="tool.pytest" class="level4">
<h4 class="anchored" data-anchor-id="tool.pytest"><code>tool.pytest</code></h4>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode toml code-with-copy"><code class="sourceCode toml"><span id="cb9-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[tool.pytest.ini_options]</span></span>
<span id="cb9-2"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">minversion</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"7.0"</span></span>
<span id="cb9-3"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">addopts</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"--cov --mpl"</span></span>
<span id="cb9-4"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">testpaths</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb9-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tests"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb9-6"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb9-7"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">filterwarnings</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb9-8">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ignore::DeprecationWarning"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb9-9">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ignore::UserWarning"</span></span>
<span id="cb9-10"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span></code></pre></div>
</section>
<section id="tool.black" class="level4">
<h4 class="anchored" data-anchor-id="tool.black"><code>tool.black</code></h4>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode toml code-with-copy"><code class="sourceCode toml"><span id="cb10-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[tool.black]</span></span>
<span id="cb10-2"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">line-length</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">120</span></span>
<span id="cb10-3"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">target-version</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"py38"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"py39"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"py310"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"py311"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb10-4"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">exclude</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'''</span></span>
<span id="cb10-5"></span>
<span id="cb10-6"><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">(</span></span>
<span id="cb10-7"><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">  /(</span></span>
<span id="cb10-8"><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">      \.eggs         # exclude a few common directories in the</span></span>
<span id="cb10-9"><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">    | \.git          # root of the project</span></span>
<span id="cb10-10"><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">    | \.venv</span></span>
<span id="cb10-11"><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">  )/</span></span>
<span id="cb10-12"><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb10-13"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'''</span></span></code></pre></div>
</section>
<section id="tool.flake8" class="level4">
<h4 class="anchored" data-anchor-id="tool.flake8"><code>tool.flake8</code></h4>
<p>The developers of Flake8 will not be supporting <code>pyproject.toml</code> for configuration. This is a shame but a work around is available in the form of <a href="https://github.com/john-hen/Flake8-pyproject" target="_blank">Flake8-pyproject</a>. Make sure to add this to your requirements section to ensure it is installed when people use <code>pre-commit</code>.</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode toml code-with-copy"><code class="sourceCode toml"><span id="cb11-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[tool.flake8]</span></span>
<span id="cb11-2"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">ignore</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">E231</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">E241</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb11-3"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">per-file-ignores</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb11-4">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">__init__.py:F401</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb11-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb11-6"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">max-line-length</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">120</span></span>
<span id="cb11-7"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">count</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">true</span></span></code></pre></div>
</section>
<section id="tool.setuptools_scm" class="level4">
<h4 class="anchored" data-anchor-id="tool.setuptools_scm"><code>tool.setuptools_scm</code></h4>
<p><a href="https://github.com/pypa/setuptools_scm/" target="_blank">setuptools_scm</a> is a simple to use extension to setuptools that dynamically sets the package version based on the version control data. It is important to note that by default <code>setuptools_scm</code> will attempt to bump the version of the release. The following configuration forces the use of the current <code>git tag</code>.</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode toml code-with-copy"><code class="sourceCode toml"><span id="cb12-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[tool.setuptools_scm]</span></span>
<span id="cb12-2"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">write_to</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tcx2gpx/_version.py"</span></span>
<span id="cb12-3"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">version_scheme</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"post-release"</span></span>
<span id="cb12-4"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">local_scheme</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"no-local-version"</span></span>
<span id="cb12-5"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">git_describe_command</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"git describe --tags"</span></span></code></pre></div>
</section>
<section id="tool.ruff" class="level4">
<h4 class="anchored" data-anchor-id="tool.ruff"><code>tool.ruff</code></h4>
<p><a href="https://github.com/charliermarsh/ruff" target="_blank">ruff</a> is a Python linter written in <a href="https://www.rust-lang.org/" target="_blank">Rust</a> which is therefore very fast. It provides the same functionality as <code>black</code>, <code>flake8</code> and <code>pylint</code> and can auto-correct many issues if configured to do so. A <a href="https://github.com/charliermarsh/ruff#usage" target="_blank">GitHub Actions</a> is also available. I'd recommend checking it out.</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode toml code-with-copy"><code class="sourceCode toml"><span id="cb13-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[tool.ruff]</span></span>
<span id="cb13-2"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">fixable</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"D"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"E"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"F"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"R"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"S"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"W"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"U"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb13-3"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">unfixable</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[]</span></span></code></pre></div>
</section>
</section>
</section>
<section id="versioning" class="level2">
<h2 class="anchored" data-anchor-id="versioning">Versioning</h2>
<p>Typically the version is defined in the <code>__version__</code> variable/object in the top-level <code>__init__.py</code> or as a value in <code>[metadata]</code> of either <code>setup.cfg</code> or <code>pyproject.toml</code> but this has some downsides in that you have to remember to update the string manually when you are ready for a release and it doesn't tie in with using tags in Git to tag versions of your commits.</p>
<p>It is worth taking a moment to read and understand about <a href="https://semver.org/" target="_blank">Semantic Versioning</a> which you are likely to use when tagging versions of your software to work with <code>setuptools_scm</code>.</p>
<section id="setuptools-scm" class="level3">
<h3 class="anchored" data-anchor-id="setuptools-scm">Setuptools-scm</h3>
<p><a href="https://github.com/pypa/setuptools_scm" target="_blank">setuptools_scm</a> is simpler to setup and use than <a href="https://github.com/python-versioneer/python-versioneer" target="_blank">versioneer</a> as it relies solely on configuration via <code>pyproject.toml</code> rather than being dependent on now deprecated <code>setup.py</code>.</p>
<p>As shown above you should have set the minimum versions of <code>"setuptools&gt;=45"</code> and <code>"setuptools_scm[toml]&gt;=6.2"</code>, <code>dynamic = ["version"]</code> under <code>project</code> and set the <code>write_to = "pkg/_version.py"</code> (<strong>NB</strong> substitute <code>pkg</code> for your package directory, whether its <code>src</code> or the package name).</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">[build<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>system]</span>
<span id="cb14-2">requires <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"setuptools&gt;=65.6.3"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"setuptools_scm[toml]&gt;=6.2"</span>]</span>
<span id="cb14-3"></span>
<span id="cb14-4">[project]</span>
<span id="cb14-5">dynamic <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"version"</span>]</span>
<span id="cb14-6"></span>
<span id="cb14-7">[tool.setuptools_scm]</span>
<span id="cb14-8">write_to <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pkg/_version.py"</span></span>
<span id="cb14-9">version_scheme <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"post-release"</span></span>
<span id="cb14-10">local_scheme <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"no-local-version"</span></span>
<span id="cb14-11">git_describe_command <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"git describe --tags"</span></span></code></pre></div>
<section id="including-version-in-sphinx-documentation" class="level4">
<h4 class="anchored" data-anchor-id="including-version-in-sphinx-documentation">Including Version in Sphinx Documentation</h4>
<p>If you have Sphinx documentation you can add the following to <sub>docs/conf.py</sub></p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> importlib.metadata <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> version</span>
<span id="cb15-2">release <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> version(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"myproject"</span>)</span>
<span id="cb15-3">version <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"."</span>.join(release.split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"."</span>)[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>])</span></code></pre></div>
</section>
</section>
</section>
<section id="building-your-package" class="level2">
<h2 class="anchored" data-anchor-id="building-your-package">Building your Package</h2>
<section id="generate-distribution-archive" class="level3">
<h3 class="anchored" data-anchor-id="generate-distribution-archive">Generate Distribution Archive</h3>
<p>In your package directory you can create a distribution of your package with the latest versions of <code>setuptools</code> and <code>wheel</code>. To do this in your virtual environment run the following. The documentation for how to do this is at <a href="https://setuptools.pypa.io/en/latest/setuptools.html" target="_blank">Building and Distributing Packages with Setuptools</a>.</p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode toml code-with-copy"><code class="sourceCode toml"><span id="cb16-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[build-system]</span></span>
<span id="cb16-2"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">requires</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb16-3">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"setuptools &gt;= 65.6.3"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb16-4">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"wheel"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb16-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb16-6"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">build-backend</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"setuptools.build_meta"</span></span></code></pre></div>
<p>The package can now be built locally with…</p>
<div class="sourceCode" id="cb17" data-eval="no" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb17-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">python</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-m</span> pip install <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--upgrade</span> setuptools wheel</span>
<span id="cb17-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">python</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-m</span> build <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--no-isolation</span></span></code></pre></div>
<p>…and the resulting package will be generated in the <code>dist/</code> directory.</p>
</section>
</section>
<section id="publishing-to-pypi" class="level2">
<h2 class="anchored" data-anchor-id="publishing-to-pypi">Publishing to <a href="https://pypi.org" target="_blank">PyPI</a></h2>
<p>Before pushing the package to the main PyPi server it is prudent to test things out on <a href="https://test.pypi.org/" target="_blank">TestPyPI</a> first. You must first generate an API Token from your account settings page. It needs a name and the scope should be `Entire account (all projects)`. This token will be shown once so do <strong>not</strong> navigate away from the page until you have copied it.</p>
<p>You use <a href="https://twine.readthedocs.io/en/latest/" target="_blank">twine</a> to upload the package and should create a <code>.pypirc</code> file in the root of the package directory that contains your API key and the username <code>__token__</code>. For the TestPyPI server it follows the following format.</p>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode conf code-with-copy"><code class="sourceCode toml"><span id="cb18-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[testpypi]</span></span>
<span id="cb18-2">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">username</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">__token__</span></span>
<span id="cb18-3">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">password</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">pypi-dfkjh9384hdszfkjnkjahkjfhd3YAJKSHE0089asdf0lkjsjJLLS_-0942358JKHDKjhkljna39o854yurlaoisdvnzli8yw459872jkhlkjsdfkjhasdfadsfasdf</span></span></code></pre></div>
<p>Once this is in place you are ready to use <code>twine</code> to upload the package using the configuration file you have just created.</p>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb19-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">twine</span> upload <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--config-file</span> ./.pypirc <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--repository</span> testpypi dist/<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">*</span></span></code></pre></div>
<section id="testing-download" class="level3">
<h3 class="anchored" data-anchor-id="testing-download">Testing Download</h3>
<p>After having uploaded your package to the TestPyPI server you should create a clean virtual environment and try installing the package from where you have just uploaded it. You can do this using <code>pip</code> and the <code>--index-url</code> and <code>--extra-index-url</code>, the former installs your package from TestPyPI, the later installs dependencies from PyPI.</p>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb20-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--index-url</span> https://test.pypi.org/simple/ <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--extra-index-url</span> https://pypi.org/simple/ your-package</span></code></pre></div>
<p>Once installed you can try running the code, scripts or notebooks associated with the package as you would normally.</p>
</section>
<section id="repeat-for-pypi" class="level3">
<h3 class="anchored" data-anchor-id="repeat-for-pypi">Repeat for PyPI</h3>
<p>Once you are happy this is working you can repeat the process on the main <a href="https://pypi.org" target="_blank">PyPI</a> server. You can add the token that you generate to <code>/.pypirc</code> under a separate heading.</p>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode conf code-with-copy"><code class="sourceCode toml"><span id="cb21-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[testpypi]</span></span>
<span id="cb21-2">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">username</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">__token__</span></span>
<span id="cb21-3">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">password</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">pypi-dfkjh9384hdszfkjnkjahkjfhd3YAJKSHE0089asdf0lkjsjJLLS_-0942358JKHDKjhkljna39o854yurlaoisdvnzli8yw459872jkhlkjsdfkjhdfJZZZZZF</span></span>
<span id="cb21-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[pypi]</span></span>
<span id="cb21-5">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">username</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">__token__</span></span>
<span id="cb21-6">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">password</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">pypi-dfkjh9384hdszfkjnkjahkjfhd3YAJKSHE0089asdf0lkjsjJLLS_-0942358JKHDKjhkljna39o854yurlaoisdvnzli8yw459872jkhlkjsdfkjhdfJZZZZZF</span></span></code></pre></div>
</section>
<section id="github-action" class="level3">
<h3 class="anchored" data-anchor-id="github-action">GitHub Action</h3>
<p>Manually uploading is somewhat time consuming and tedious. Fortunately though with <code>setuptools_scm</code> in place and tokens generated we can automate the process of building and uploading packages to PyPI using the GitHub Action <a href="https://github.com/pypa/gh-action-pypi-publish" target="_blank">gh-action-pypi-publish</a> (read more about <a href="id:e19b6eb6-46b2-440a-ba35-be29feb33407" target="_blank">GitHub Actions</a>). You will have already generated a <a href="https://pypi.org/help/#apitoken" target="_blank">PYPI token</a> (and similarly one for <a href="https://test.pypi.org" target="_blank">test PyPI</a>) and these can stored on the projects GitHub account under <em>Settings &gt; Secrets &gt; Actions</em> with the names <code>PYPI_API_TOKEN</code> and <code>TEST_PYPI_API_TOKEN</code> respectively. You can then add the following GitHub Action under <code>.github/workflow/pypi.yaml</code>.</p>
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb22-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Publish package to PyPi</span></span>
<span id="cb22-2"></span>
<span id="cb22-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">on</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb22-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">push</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb22-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tags</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb22-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> v*</span></span>
<span id="cb22-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">jobs</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb22-8"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">build-release</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb22-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runs-on</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ubuntu-latest</span></span>
<span id="cb22-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Publish package to PyPi</span></span>
<span id="cb22-11"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">steps</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb22-12"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">uses</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> actions/checkout@v3</span></span>
<span id="cb22-13"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">with</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb22-14"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fetch-depth</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb22-15"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Setup Python</span></span>
<span id="cb22-16"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">uses</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> actions/setup-python@v4.3.0</span></span>
<span id="cb22-17"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">with</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb22-18"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">python-version</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.9</span></span>
<span id="cb22-19"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cache</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pip'</span></span>
<span id="cb22-20"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Installing the package</span></span>
<span id="cb22-21"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">    run</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">: </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">|</span></span>
<span id="cb22-22">      pip3 install .</span>
<span id="cb22-23">      pip3 install .[pypi]</span>
<span id="cb22-24"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Build package</span></span>
<span id="cb22-25"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">    run</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">: </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">|</span></span>
<span id="cb22-26">      python -m build --no-isolation</span>
<span id="cb22-27"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Publish package to PyPI</span></span>
<span id="cb22-28"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">uses</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> pypa/gh-action-pypi-publish@release/v1</span></span>
<span id="cb22-29"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">with</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb22-30"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">user</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> __token__</span></span>
<span id="cb22-31"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">password</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ${{ secrets.PYPI_API_TOKEN }}</span></span></code></pre></div>
</section>
<section id="releasing-via-github" class="level3">
<h3 class="anchored" data-anchor-id="releasing-via-github">Releasing via GitHub</h3>
<p>With <code>setuptools_scm</code> in place and a <a href="id:5e1f167e-5c0c-4206-b2ac-6694e08524d8" target="_blank">GitHub Action</a> setup and configured it is now possible to make a release to PyPI via GitHub Releases.</p>
<ol type="1">
<li>Go to the Releases page (its linked from the right-hand side of the front-page).</li>
<li>Draft a New release.</li>
<li>Create a new tag using semantic versioning and select “<em>Create new tag v#.#.# on publish</em>”.</li>
<li>Click the "<em>Generate Release Notes</em>" button, this adds all the titles for all Pull Requests, I'll often remove all these but leave the link to the <code>ChangeLog</code> that is generated for the release.</li>
<li>Write your release notes.</li>
<li>Select "<em>Set as latest release</em>".</li>
<li>Select "<em>Create a discussion for this releases</em>" and select "<em>Announcements</em>".</li>
<li>Click on "<em>Publish Release</em>".</li>
</ol>
</section>
</section>
<section id="packaging-frameworks" class="level2">
<h2 class="anchored" data-anchor-id="packaging-frameworks">Packaging Frameworks</h2>
<p>There are some frameworks that are meant to ease the pain of this process and make it easier. I'm yet to test these for two reasons. Firstly I wanted to understand what is going on rather than learn another framework. Secondly it was an additional framework to learn.</p>
<section id="pdm" class="level3">
<h3 class="anchored" data-anchor-id="pdm">PDM</h3>
<p><a href="https://pdm.fming.dev/latest/" target="_blank">PDM</a> (Python package and Dependency Manager) handles all stages of setting up and creating a package and managing its dependencies. In essence its a tool for interactively generating the configuration files described above. I've not yet.</p>
</section>
<section id="poetry" class="level3">
<h3 class="anchored" data-anchor-id="poetry">Poetry</h3>
<p><a href="https://python-poetry.org/" target="_blank">Poetry</a> is another package for managing packaging and dependencies. Again, I've not yet used it.</p>
</section>
</section>
<section id="links" class="level2">
<h2 class="anchored" data-anchor-id="links">Links</h2>
<ul>
<li><a href="https://setuptools.pypa.io/en/latest/userguide/index.html" target="_blank">PyPA : Building and Distributing Packages with Setuptools</a></li>
<li><a href="https://packaging.python.org/en/latest/specifications/" target="_blank">PyPA : Specifications</a></li>
<li><a href="https://packaging.python.org/en/latest/tutorials/packaging-projects/" target="_blank">Packaging Python Projects</a></li>
<li><a href="https://www.pyopensci.org/python-package-guide/package-structure-code/intro.html" target="_blank">Python package structure information — pyOpenSci Python Packaging Guide</a></li>
<li><a href="https://github.com/wimglenn/resources-example" target="_blank">Packaging Data files in a Python Distribution</a></li>
<li><a href="https://pdm.fming.dev/latest/" target="_blank">PDM - Python package and Dependency Manager</a></li>
<li><a href="https://blog.ganssle.io/articles/2021/10/setup-py-deprecated.html" target="_blank">Why you shouldn't invoke setup.py directly</a></li>
<li><a href="https://github.com/python-versioneer/python-versioneer" target="_blank">python-versioneer/python-versioneer: version-string management for VCS-controlled trees</a></li>
<li><a href="https://github.com/pypa/setuptools_scm" target="_blank">pypa/setuptools<sub>scm</sub>: the blessed package to manage your versions by scm tags</a></li>
<li><a href="https://github.com/mitsuhiko/rye" target="_blank">rye one-shop-stop for Python</a></li>
</ul>



</section>

<div class="quarto-listing quarto-listing-container-default" id="listing-listing">
<div class="list quarto-listing-default">

</div>
<div class="listing-no-matching d-none">
No matching items
</div>
</div><div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{shephard2023,
  author = {Shephard, Neil},
  title = {Python {Packaging}},
  date = {2023-03-25},
  url = {https://blog.nshephard.dev/posts/python-packaging/},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-shephard2023" class="csl-entry quarto-appendix-citeas">
Shephard, Neil. 2023. <span>“Python Packaging.”</span> March 25, 2023.
<a href="https://blog.nshephard.dev/posts/python-packaging/">https://blog.nshephard.dev/posts/python-packaging/</a>.
</div></div></section></div> ]]></description>
  <category>quarto</category>
  <category>python</category>
  <category>packaging</category>
  <category>setuptools</category>
  <category>github actions</category>
  <category>pypi</category>
  <guid>https://blog.nshephard.dev/posts/python-packaging/</guid>
  <pubDate>Sat, 25 Mar 2023 00:00:00 GMT</pubDate>
  <media:content url="https://live.staticflickr.com/65535/52595884731_fb5c7d576e_k.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Linting - What is all the fluff about?</title>
  <dc:creator>Neil Shephard</dc:creator>
  <link>https://blog.nshephard.dev/posts/linting/</link>
  <description><![CDATA[ 





<p><strong>NB</strong> This article originally appeared on <a href="https://rse.shef.ac.uk/blog/" target="_blank">RSE University of Sheffield</a> but is updated here.</p>
<p>If you’ve been dabbling in programming for a while you may have heard of “linting your code” which is a process of static code analysis to remove the “fluff” from your code. Just as physically linting your clothes removes unwanted fluff, linting your code removes “fluff” and can help…</p>
<ul>
<li>Reduce bugs.</li>
<li>Improve performance.</li>
<li>Mitigate against some security flaws.</li>
<li>Improve coding skills.</li>
<li>Consistent coding style.</li>
</ul>
<p>This helps reduce the <a href="https://en.wikipedia.org/wiki/Technical_debt" target="_blank">technical debt</a> which impacts the amount of time required for maintenance and further development of a code base. The main focus of this article is the use of linting to ensure consistent coding style, it focuses on Python under Linux but similar tools are available for other operating systems and languages.</p>
<!--more-->
<section id="style-matters" class="level2">
<h2 class="anchored" data-anchor-id="style-matters">Style Matters</h2>
<p>What has style got to do with writing code? Trends come and go in fashion but coding styles are meant to be relatively static and not change with the season, although they can and do evolve over time. This is because using a consistent and widely used style when writing code makes it easier for other people, often your future self, to read and understand the code you have written. If code is easier to understand then its easier to modify, update, extend, improve and in general maintain.</p>
<p>A useful insight from <a href="https://en.wikipedia.org/wiki/Guido_van_Rossum" target="_blank">Gudio van Rossum</a>, the creator of <a href="https://www.python.org" target="_blank">Python</a> is that “<a href="https://peps.python.org/pep-0008/#a-foolish-consistency-is-the-hobgoblin-of-little-minds" target="_blank"><em>code is read much more often than it is written</em></a>” and so it should be easy to understand and not obfuscate its intent. Python is quite good for this as it is an expressive language which encourages coders to be explicit when naming variables, functions, classes and so forth so that their purpose and intention is clear, although the same is true of most modern languages. However, going a step further and using consistent styles to format and layout code helps enhance this.</p>
</section>
<section id="linting-in-python" class="level2">
<h2 class="anchored" data-anchor-id="linting-in-python">Linting in Python</h2>
<p>The most widely used Python style is defined in the long established <a href="https://pep8.org/" target="_blank">PEP 8: The Style Guide for Python Code</a>. There are a number of tools available that will lint your Python code for you and most integrate with your IDE, whether that is <a href="https://code.visualstudio.com/" target="_blank">Visual Studio Code</a>, <a href="https://www.jetbrains.com/pycharm/" target="_blank">PyCharm</a> or <a href="https://www.gnu.org/software/emacs/" target="_blank">Emacs</a>. Some of the formatting and linting tools available for Python are…</p>
<ul>
<li><p><a href="https://pylint.pycqa.org/en/latest/index.html" target="_blank">Pylint</a> - checks for errors in Python code, tries to enforce a coding standard and looks for code smells.</p></li>
<li><p><a href="https://pypi.org/project/yapf/" target="_blank">YAPF</a> - takes the code and reformats it to the best formatting that conforms to the style guide.</p></li>
<li><p><a href="https://github.com/psf/black" target="_blank">Black</a> - The Uncompromising Code Formatter</p></li>
<li><p><a href="https://flake8.pycqa.org/en/latest/" target="_blank">Flake8</a> - Your Tool For Style Guide Enforcement</p></li>
<li><p><a href="https://prospector.landscape.io/en/master/index.html" target="_blank">Prospector</a> - Python Static Analysis</p></li>
<li><p><a href="http://mypy-lang.org/" target="_blank">mypy</a> - Optional Static Typing for Python</p></li>
</ul>
<p>Here we will work through linting and formatting the simple file below (available as a download <a href="../../www/python/save_random_numbers.py" target="_blank">here</a>) using PyLint and Black.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pathlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Path</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> typing <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Union</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> csv</span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> save_random_numbers(size: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>, seed: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">87653546</span>, save_as: Union[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, Path] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"./random_numbers.txt"</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb1-7">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Save a list of random numbers (floats) to the given file.</span></span>
<span id="cb1-8"></span>
<span id="cb1-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    The stated number of random numbers will be saved to the given target file, if the directory structure</span></span>
<span id="cb1-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    doesn't exist it will be created. Output will by default be over-written.</span></span>
<span id="cb1-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Parameters</span></span>
<span id="cb1-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ----------</span></span>
<span id="cb1-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    size : int</span></span>
<span id="cb1-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Number of random numbers to generate</span></span>
<span id="cb1-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    seed: int</span></span>
<span id="cb1-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Seed for random number generation</span></span>
<span id="cb1-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    save_as : Union[str, Path]</span></span>
<span id="cb1-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Directory/file to save numbers to.</span></span>
<span id="cb1-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb1-20">    rng <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.default_rng()</span>
<span id="cb1-21">    random_numbers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rng.random(size)</span>
<span id="cb1-22"></span>
<span id="cb1-23">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> Path(save_as).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'w'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> out:</span>
<span id="cb1-24">        writer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> csv.write(out)</span>
<span id="cb1-25">        writer.writerows(random_numbers)</span></code></pre></div>
<section id="linting-with-pylint" class="level3">
<h3 class="anchored" data-anchor-id="linting-with-pylint">Linting with PyLint</h3>
<p>We will lint this file using <a href="https://pylint.pycqa.org/en/latest/index.html" target="_blank">Pylint</a> to find out what errors there are and how its style can be improved to conform with PEP8 guidelines.</p>
<p>First you need to install <code>pylint</code>, typically in your <a href="https://realpython.com/python-virtual-environments-a-primer/" target="_blank">virtual environment</a>.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install pylint</span></code></pre></div>
<p>Pylint can be configured using a <code>~/.pylintrc</code> file in your home directory and over time this will grow as you customise your configuration but for now we will make one simple change from the default which is to increase the accepted line length. Create the file and save it with the following content.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">[FORMAT]</span></span>
<span id="cb3-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## Maximum number of characters on a single line.</span></span>
<span id="cb3-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">max-line-length=120</span></span></code></pre></div>
<p>Open a terminal and navigate to the location you saved the example file <code>save_random_numbers.py</code> activate the virtual environment you installed pylint under if its not already being used and then type the following to run Pylint against your code…</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pylint</span> save_random_numbers.py</span></code></pre></div>
<p>You should see output similar to the following…</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb5-1"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">❱</span> pylint save_random_numbers.py</span>
<span id="cb5-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">*************</span> Module save_random_numbers</span>
<span id="cb5-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">save_random_numbers.py:1:0:</span> C0114: Missing module docstring <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">missing-module-docstring</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span></span>
<span id="cb5-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">save_random_numbers.py:5:66:</span> E0602: Undefined variable <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Union'</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">undefined-variable</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span></span>
<span id="cb5-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">save_random_numbers.py:5:35:</span> W0613: Unused argument <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'seed'</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">unused-argument</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span></span>
<span id="cb5-6"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">save_random_numbers.py:2:0:</span> C0411: standard import <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"from pathlib import Path"</span> should be placed before <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"import numpy as np"</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">wrong-import-order</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span></span>
<span id="cb5-7"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">save_random_numbers.py:3:0:</span> C0411: standard import <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"import csv"</span> should be placed before <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"import numpy as np"</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">wrong-import-order</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span></span>
<span id="cb5-8"></span>
<span id="cb5-9"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">-------------------------------------------------------------------</span></span>
<span id="cb5-10"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Your</span> code has been rated at 0.00/10</span></code></pre></div>
<p>The output tells us which module has been inspected on the first line. Each subsequent line indicates</p>
<ul>
<li>The file.</li>
<li>The line the problem has been encountered on.</li>
<li>The column.</li>
<li>A somewhat cryptic error code and then a message about the problem</li>
<li>A more descriptive generic message associated with the error code.</li>
</ul>
<p>At the moment we are only looking at one file, but when using PyLint against larger code bases this information is vital in helping direct you to the location of code that needs changing. At the end PyLint rates your code, ideally you should aim to get a score of <code>10.0/10</code>.</p>
<p>The messages are quite informative, taking each in turn we can work through resolving them.</p>
<section id="missing-module-docstring-missing-module-docstring" class="level4">
<h4 class="anchored" data-anchor-id="missing-module-docstring-missing-module-docstring"><code>Missing module docstring (missing-module-docstring)</code></h4>
<p>Each Python module should have a docstring as the very first line that describes what it does. In this example it might be considered superfluous but its good practice to get in the habit of writing these as it comes in useful when documentation is automatically generated from the docstrings in the code. To fix it we can add a short docstring at the top.</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Module for saving randomly generated numbers."""</span></span>
<span id="cb6-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb6-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pathlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Path</span></code></pre></div>
</section>
<section id="undefined-variable-union-undefined-variable" class="level4">
<h4 class="anchored" data-anchor-id="undefined-variable-union-undefined-variable"><code>Undefined variable 'Union' (undefined-variable)</code></h4>
<p>This error arises because the <a href="https://www.pythontutorial.net/python-basics/python-type-hints/" target="_blank">type hint</a> uses <code>Union</code> but it hasn’t been imported. It’s from the <a href="https://www.pythontutorial.net/python-basics/python-type-hints/" target="_blank">typing</a> module so we can import it.</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Module for saving randomly generated numbers."""</span></span>
<span id="cb7-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb7-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pathlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Path</span>
<span id="cb7-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> typing <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Union</span></code></pre></div>
</section>
<section id="unused-argument-seed-unused-argument" class="level4">
<h4 class="anchored" data-anchor-id="unused-argument-seed-unused-argument"><code>Unused argument 'seed' (unused-argument)</code></h4>
<p>This is very useful to be informed about because the <code>seed</code> argument, according to the docstring, is meant to be used in the call to the random number generator and ensures we will get the same set of random numbers generated each time we call the function with that seed, however, as Pylint has informed us we haven’t actually used it within the <code>save_random_number()</code> function. We can correct that by adding it when we instantiate the random number generator.</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">rng <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.default_rng(seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>seed)</span></code></pre></div>
</section>
<section id="standard-import-from-pathlib-import-path-should-be-placed-before-import-numpy-as-np-wrong-import-order" class="level4">
<h4 class="anchored" data-anchor-id="standard-import-from-pathlib-import-path-should-be-placed-before-import-numpy-as-np-wrong-import-order"><code>standard import "from pathlib import Path" should be placed before "import numpy as np" (wrong-import-order)</code></h4>
<p>This message, like the one that follows it, is telling us that the order in which we have imported modules is incorrect, because the PEP8 guide recommends that core modules, which both <code>csv</code> and <code>pathlib</code> are, should be imported before other modules. We can correct this by changing the order (and because we have added an import from the <code>typing</code> module which is also a core module we move that too).</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Module for saving randomly generated numbers."""</span></span>
<span id="cb9-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> csv</span>
<span id="cb9-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pathlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Path</span>
<span id="cb9-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> typing <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Union</span>
<span id="cb9-5"></span>
<span id="cb9-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span></code></pre></div>
<p>Once corrected your file should look like this…</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Module for saving randomly generated numbers."""</span></span>
<span id="cb10-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> csv</span>
<span id="cb10-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pathlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Path</span>
<span id="cb10-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> typing <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Union</span>
<span id="cb10-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb10-6"></span>
<span id="cb10-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> save_random_numbers(size: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>, seed: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">87653546</span>, save_as: Union[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, Path] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"./random_numbers.txt"</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb10-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Save a list of random numbers (floats) to the given file.</span></span>
<span id="cb10-9"></span>
<span id="cb10-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    The stated number of random numbers will be saved to the given target file, if the directory structure</span></span>
<span id="cb10-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    doesn't exist it will be created. Output will by default be over-written.</span></span>
<span id="cb10-12"></span>
<span id="cb10-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Parameters</span></span>
<span id="cb10-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ----------</span></span>
<span id="cb10-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    size : int</span></span>
<span id="cb10-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Number of random numbers to generate</span></span>
<span id="cb10-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    seed: int</span></span>
<span id="cb10-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Seed for random number generation</span></span>
<span id="cb10-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    save_as : Union[str, Path]</span></span>
<span id="cb10-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Directory/file to save numbers to.</span></span>
<span id="cb10-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb10-22">    rng <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.default_rng(seed)</span>
<span id="cb10-23">    random_numbers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rng.random(size)</span>
<span id="cb10-24"></span>
<span id="cb10-25">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> Path(save_as).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'w'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> out:</span>
<span id="cb10-26">        writer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> csv.write(out)</span>
<span id="cb10-27">        writer.writerows(random_numbers)</span></code></pre></div>
<p>…and you can now run PyLint against it to see if you’ve improved your score.</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb11-1"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">❱</span> pylint save_random_numbers.py</span>
<span id="cb11-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">*************</span> Module save_random_numbers</span>
<span id="cb11-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">save_random_numbers.py:7:66:</span> E1136: Value <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Union'</span> is unsubscriptable <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">unsubscriptable-object</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span></span>
<span id="cb11-4"></span>
<span id="cb11-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">------------------------------------------------------------------</span></span>
<span id="cb11-6"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Your</span> code has been rated at 5.00/10 <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">previous</span> run: 4.00/10, +1.00<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span></span></code></pre></div>
<p>That is an improvement in score (of <code>+1.00</code>) but we now have another error telling us that <code>E1136: Value 'Union' is unsubscriptable (unsubscriptable-object)</code>. You are unlikely to know what all the error codes mean, but there are a few handy on-line lists <a href="http://pylint-messages.wikidot.com/all-codes" target="_blank">all PyLint codes</a> or <a href="http://pylint-messages.wikidot.com/all-messages" target="_blank">all PyLint messages</a> and what they are telling you are worth consulting (<a href="https://docs.quantifiedcode.com/python-anti-patterns/index.html" target="_blank">The Little Book of Python Anti-Patterns</a> is also useful). In this instance PyLint has returned a false-positive because <code>Union</code> can and should be subscripted here because it means the argument can be either a string (<code>str</code>) or a <a href="https://docs.python.org/3/library/pathlib.html" target="_blank">pathlib</a> Path (<code>Path</code>). So how do we get around this complaint?</p>
<p>You can disable PyLint from complaining about specific error codes/messages on a per-file basis by adding a line that disables them. You can use either codes or messages (the bit in the brackets at the end of the line, in this case <code>unsubscriptable-object</code>) and it is advisable to use the message form as it is more informative to those who read your code subsequently.</p>
<p>If we add the following line it prevents PyLint from reporting the specific error…</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb12-2"></span>
<span id="cb12-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># pylint: disable=unsubscriptable-object</span></span>
<span id="cb12-4"></span>
<span id="cb12-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> save_random_numbers(size: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>, seed: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">87653546</span>, save_as: Union[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, Path] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"./random_numbers.txt"</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span></code></pre></div>
<p>…running PyLint against our code again we get a much better score.</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb13-1"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">❱</span> pylint save_random_numbers_tidy.py</span>
<span id="cb13-2"></span>
<span id="cb13-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">-------------------------------------------------------------------</span></span>
<span id="cb13-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Your</span> code has been rated at 10.00/10 <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">previous</span> run: 5.00/10, +5.00<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span></span></code></pre></div>
</section>
</section>
<section id="configuring-pylint" class="level3">
<h3 class="anchored" data-anchor-id="configuring-pylint">Configuring PyLint</h3>
<p>The last error we encountered is something that is likely to crop up again if you use Typehints liberally throughout your Python code (and I would encourage you to do so). Rather than having to remember to disable the error in each file/module we create we can configure PyLint via its configuration file <code>~/.pylintrc</code> to always ignore this error. To do so add the following…</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb14-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">[MESSAGES</span> CONTROL]</span>
<span id="cb14-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Disable the message, report, category or checker with the given id(s). You</span></span>
<span id="cb14-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># can either give multiple identifiers separated by comma (,) or put this</span></span>
<span id="cb14-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># option multiple times (only on the command line, not in the configuration</span></span>
<span id="cb14-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># file where it should appear only once).</span></span>
<span id="cb14-6"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">disable</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>unsubscriptable-object</span></code></pre></div>
<p>For more on configuriong PyLint refer to the <a href="https://pylint.pycqa.org/en/latest/user_guide/options.html" target="_blank">documentation</a> and also details of how to <a href="https://pylint.pycqa.org/en/latest/user_guide/ide-integration.html" target="_blank">integrate with your editor and IDE</a></p>
</section>
<section id="automated-formatting-with-black" class="level3">
<h3 class="anchored" data-anchor-id="automated-formatting-with-black">Automated Formatting with Black</h3>
<p><a href="https://github.com/psf/black" target="_blank">Black</a> is <em>The Uncompromising Code Formatter</em> and is very strict about the way in which it formats code. This could be a good or bad thing depending on your point of view, but it does result in highly consistent code when applied to all files. It formats files in place, so be mindful of this if you run it against one of your files it <em>will</em> change it.</p>
<p>Install <code>black</code> in your virtual environment and make a backup of your <code>save_random_number.py</code> file that you have just tidied up with linting.</p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb15-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install black</span>
<span id="cb15-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cp</span> save_random_numbers.py tidy_save_random_numbers.py</span></code></pre></div>
<p>To run black against your code pass it the input file, it will re-write it and you can then compare it against the backup you just made…</p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb16-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">black</span> save_random_numbers.py</span>
<span id="cb16-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">❱</span> diff save_random_numbers.py tidy_save_random_numbers.py</span>
<span id="cb16-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">5,8c5</span></span>
<span id="cb16-4"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span></span>
<span id="cb16-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> def <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">save_random_numbers</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span></span>
<span id="cb16-6">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>     size: <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">int,</span> seed: int = 87653546, save_as: Union[str, Path] = <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"./random_numbers.txt"</span></span>
<span id="cb16-7">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">-</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> None:</span>
<span id="cb16-8"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">---</span></span>
<span id="cb16-9"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> def <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">save_random_numbers</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">size:</span> int, seed: int = 87653546, save_as: Union[str, Path] = <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"./random_numbers.txt"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">-</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> None:</span>
<span id="cb16-10"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">27c24</span></span>
<span id="cb16-11"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>     with <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Path</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">save_as</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">.open</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"w"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as</span> out:</span>
<span id="cb16-12"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">---</span></span>
<span id="cb16-13"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span>     with <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Path</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">save_as</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">.open</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'w'</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as</span> out:</span></code></pre></div>
<p>In this instance Black hasn’t changed much but it has reformatted the <code>def save~randomnumbers~(...)</code> line and moved the <code>with Path()</code> line as a consequence.</p>
</section>
</section>
<section id="when-to-lint" class="level2">
<h2 class="anchored" data-anchor-id="when-to-lint">When to Lint</h2>
<p>It is worth linting your code from the outset of a project as not only does it result in a consistent style across your code base it also avoids the problem that can arise when applying linting retrospectively. If an existing code base has linting applied then the <a href="https://www.git-scm.com/docs/git-blame" target="_blank"><code>git blame</code></a>, which indicates who the last person to edit a section was, then resides with the person who applied the linting, rather than the original author of the code. Its possible though that the person who applied the linting knows very little about the underlying functionality of the code but they may receive questions about it if they are indicated as the last person to have modified particular lines.</p>
<p>Fortunately there are a number of ways to automate and integrate linting into your workflow.</p>
</section>
<section id="automating-linting" class="level2">
<h2 class="anchored" data-anchor-id="automating-linting">Automating Linting</h2>
<section id="ide-integration" class="level3">
<h3 class="anchored" data-anchor-id="ide-integration">IDE Integration</h3>
<p>When programming it is really useful to use an <a href="https://en.wikipedia.org/wiki/Integrated_development_environment" target="_blank">Integrated Development Environment (IDE)</a> as most allow the integration of linting tools and apply them to your code automatically, whether its using PyLint, YAPF, Black or otherwise. Setup and configuration is beyond the scope of this article but some links are provided to useful resources to get you started.</p>
</section>
<section id="vscode" class="level3">
<h3 class="anchored" data-anchor-id="vscode">VSCode</h3>
<p>VSCode supports linting in most languages, and both <a href="https://code.visualstudio.com/docs/python/linting" target="_blank">Python</a> and <a href="https://docs.microsoft.com/en-us/visualstudio/rtvs/linting-r-code?view=vs-2017" target="_blank">R</a> are supported along with other languages.</p>
</section>
<section id="pycharm" class="level3">
<h3 class="anchored" data-anchor-id="pycharm">PyCharm</h3>
<p>PyCharm supports automated formatting of code, for more information please refer to <a href="https://www.jetbrains.com/help/pycharm/reformat-and-rearrange-code.html" target="_blank">Reformat and rearrange code | PyCharm</a>.</p>
</section>
<section id="emacs" class="level3">
<h3 class="anchored" data-anchor-id="emacs">Emacs</h3>
<p>There are various options available for linting within Emacs, which you use depends on your preferences but <a href="https://emacs-lsp.github.io/lsp-mode/" target="_blank">LSP mode</a> integrates with YAPF (via <a href="https://github.com/JorisE/yapfify" target="_blank">yapfify</a>), Flake8 (via <a href="https://www.flycheck.org/en/latest/" target="_blank">flycheck</a>) and Black (via <a href="https://github.com/pythonic-emacs/blacken" target="_blank">blacken</a>).</p>
</section>
</section>
<section id="git-integration" class="level2">
<h2 class="anchored" data-anchor-id="git-integration">Git Integration</h2>
<p>If you are using an IDE then if configured correctly your code should be linted automatically for you, but an additional step that can capture anything that hasn’t been correctly formatted is to use a <a href="https://githooks.com/" target="_blank">git hook</a> to run linting on your code prior to making commits. There is <a href="https://github.com/sebdah/git-pylint-commit-hook" target="_blank">git-pylint-commit-hook</a> available on PyPi which runs automatically when you make commits to <code>.py</code> files.</p>
</section>
<section id="continuous-integration" class="level2">
<h2 class="anchored" data-anchor-id="continuous-integration">Continuous Integration</h2>
<p>Including a linting stage in your Continuous Integration (CI) pipeline pays dividends as we all make mistakes and sometimes forget to lint our code before making pushes.</p>
</section>
<section id="megalinter" class="level2">
<h2 class="anchored" data-anchor-id="megalinter">Megalinter</h2>
<p>Perhaps not necessary for everyone but worth mentioning the beast that is <a href="https://megalinter.github.io/latest/" target="_blank">MegaLinter</a> which will lint code across multiple languages and integrates easily into your pipeline (GitHub Action, CI on GitLab, Jenkins etc.). A useful article on doing so is <a href="https://nicolas.vuillamy.fr/improve-uniformize-and-secure-your-code-base-with-megalinter-62ebab422c1" target="_blank">Limit your technical debt and secure your code base using MegaLinter</a>.</p>
</section>
<section id="pre-commit" class="level2">
<h2 class="anchored" data-anchor-id="pre-commit">Pre-commit</h2>
<p><a href="https://pre-commit.com/" target="_blank">Pre-commit</a> is a Python package that adds a set of configurable hooks for linting your code, and not just Python, using a Git pre-commit <a href="https://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks" target="_blank">hook</a>. Hooks are run conditional on certain changes in states, in this case code that is run before commits are made. It creates a virtual Python Environment and installs the required packages there to lint your code. More will be written on this in a subsequent post.</p>
</section>
<section id="links" class="level2">
<h2 class="anchored" data-anchor-id="links">Links</h2>
<section id="python" class="level3">
<h3 class="anchored" data-anchor-id="python">Python</h3>
<ul>
<li><a href="https://flake8.pycqa.org/en/latest/" target="_blank">Flake8</a> - Your Tool For Style Guide Enforcement</li>
<li><a href="https://github.com/psf/black" target="_blank">Black</a> - The Uncompromising Code Formatter</li>
<li><a href="https://code.visualstudio.com/docs/python/linting" target="_blank">Linting Python in Visual Studio Code</a></li>
<li><a href="https://pylint.pycqa.org/en/latest/messages/messages_list.html" target="_blank">Pylint - Overview of all Pylint messages</a></li>
</ul>
</section>
<section id="r" class="level3">
<h3 class="anchored" data-anchor-id="r">R</h3>
<ul>
<li><a href="https://github.com/r-lib/lintr" target="_blank">GitHub - r-lib/lintr: Static Code Analysis for R</a></li>
<li><a href="https://rowannicholls.github.io/R/intro/linting.html" target="_blank">Introduction to R: Linting R (and R Markdown)</a></li>
</ul>
</section>
<section id="c" class="level3">
<h3 class="anchored" data-anchor-id="c">C++</h3>
<ul>
<li><a href="https://github.com/cpplint/cpplint" target="_blank">cpplint</a></li>
</ul>



</section>
</section>

<div class="quarto-listing quarto-listing-container-default" id="listing-listing">
<div class="list quarto-listing-default">

</div>
<div class="listing-no-matching d-none">
No matching items
</div>
</div><div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{shephard2022,
  author = {Shephard, Neil},
  title = {Linting - {What} Is All the Fluff About?},
  date = {2022-08-18},
  url = {https://blog.nshephard.dev/posts/linting/},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-shephard2022" class="csl-entry quarto-appendix-citeas">
Shephard, Neil. 2022. <span>“Linting - What Is All the Fluff
About?”</span> August 18, 2022. <a href="https://blog.nshephard.dev/posts/linting/">https://blog.nshephard.dev/posts/linting/</a>.
</div></div></section></div> ]]></description>
  <category>code</category>
  <category>linting</category>
  <category>python</category>
  <category>R</category>
  <guid>https://blog.nshephard.dev/posts/linting/</guid>
  <pubDate>Thu, 18 Aug 2022 00:00:00 GMT</pubDate>
  <media:content url="https://live.staticflickr.com/153/410254296_e518f48141_k.jpg" medium="image" type="image/jpeg"/>
</item>
</channel>
</rss>
