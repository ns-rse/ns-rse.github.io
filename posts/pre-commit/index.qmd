---
title: "Pre-Commit : Protecting your future self"
author: "nshephard"
date: "2022-08-28"
categories: [code, analysis, linting, git]
# image: "image.jpg"
---

[Pre-commit](https://pre-commit.com/) is a powerful tool for executing a range of hooks prior to making commits to your
Git history. This is useful because it means you can automatically run a range of linting tools on your code across an
array of languages to ensure your code is up-to-scratch _before_ you make the commit. Thus your Git history doesn't end
up littered with commits such as "_Tidying up_" or "_Placating the linting deity_".

Pre-commit is written in Python but that isn't a limitation as it will lint YAML, JSON, C, JavaScript, Go, Rust, TOML,
Terraform, Jupyter Notebooks, and so on. The list of [supported hooks](https://pre-commit.com/hooks.html) is vast.

## Background

### What is a "hook"?

In computing a "hook" refers to something that is run prior to or in response to a requested action. In the context of
the current discussion we are talking about hooks that relate to actions undertaken in Git version control and
specifically actions that are run before a "commit" is made.

For those unfamiliar with version control and Git in particular this likely all sounds alien. If you are new to the
world of version control and Git I can highly recommend the [Git & Github through GitKraken Client - From Zero to
Hero!](https://srse-git-github-zero2hero.netlify.app/) offered by the [Research Software
Engineering](https://rse.shef.ac.uk) at the University of Sheffield and developed by Alumni [Anna
Krystalli](https://annakrystalli.me/).

Typically when you have initialised a directory to be under Git version control the settings and configuration are
stored in the `.git/` sub-directory. There is the `.git/config` file for the repositories configuration but also the
`.git/hooks/` directory that is populated with a host of `*.sample` files with various different names that give you an
in-road into what different hooks you might want to run. Its worth spending a little time reading through these if you
haven't done so yet.

### Why pre-commit hooks?

Typically when writing code you should [lint](https://rse.shef.ac.uk/blog/2022-04-19-linting/) your code to ensure it
complies to agreed style guides and remove any "[code smells](https://en.wikipedia.org/wiki/Code_smell)" that may be
lingering (code that violates design principles). It won't guarantee that your code is perfect but its a good starting
point to improving it. Experienced coders are typically in a good habit of doing these checks manually prior to making
commits, although smart people will have configured their Integrated Development Environment (IDE) to apply many such
"hooks" on saving a file they have been working on.

But at some point you have to make a commit to save your work and that is where pre-commit comes in to play because it
will run all the hooks you configure it to when you try making a commit. If any of the hooks fail then your commit is
_not_ made and you have to correct them before a commit can be made.

Initially this can be jarring, but it saves you, and more importantly those who you are asking to review your code in
your as yet to be created pull request, time and effort as it ensures your code meets the required style and is a little
bit cleaner before being sent out for review.

## Installation

Pre-commit is written in Python and so you will need Python installed on your system in order to use it. Aside from that
there is little else extra that is required to be manually installed as pre-commit installs virtual environments
specific for each enabled hook for you.

## Configuration

Configuration of pre-commit is via a file in the root of your Git version controlled directory called
`./.pre-commit-config.yaml`.

## Usage

Once installed and configured there really isn't much to be said for using pre-commit, just make commits, the hooks you
have configured will run.

## Pre-commit CI/CD

Ideally contributors will have setup their system to work with pre-commit and be running such checks prior to making
pushes. But as a backup you can enable running pre-commit as part of your Continuous Integration/Development
pipeline. Here we show how to enable this on both [GitLab](https://gitlab.com) and [GitHub](https://github.com) although
similar methods are available for many [continuous integration
systems](https://pre-commit.com/#usage-in-continuous-integration)
