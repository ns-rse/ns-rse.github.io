---
title: "Pre-Commit : Protecting your future self"
author: "nshephard"
date: "2022-08-28"
categories: [code, analysis, linting, git, github, gitlab]
image: https://live.staticflickr.com/65535/52294716597_ea3be238c0_k.jpg
---

Learn about installing and configuring [Pre-commit](https://pre-commit.com/) to lint your code before making Git commits.

[Pre-commit](https://pre-commit.com/) is a powerful tool for executing a range of hooks prior to making commits to your
Git history. This is useful because it means you can automatically run a range of
[linting](https://ns-rse.github.io/posts/linting/) tools on your code across an array of languages to ensure your code
is up-to-scratch _before_ you make the commit. Thus your Git history doesn't end up littered with commits such as
"_Tidying up_" or "_Linting_".

Pre-commit is written in Python but that isn't a limitation as it will lint YAML, JSON, C, JavaScript, Go, Rust, TOML,
Terraform, Jupyter Notebooks, and so on. The list of [supported hooks](https://pre-commit.com/hooks.html) is vast.

## Background

### What is a "hook"?

In computing a "hook" refers to something that is run prior to or in response to a requested action. In the context of
the current discussion we are talking about hooks that relate to actions undertaken in Git version control and
specifically actions that are run before a "commit" is made.

For those unfamiliar with version control and Git in particular this likely all sounds alien. If you are new to the
world of version control and Git I can highly recommend the [Git & Github through GitKraken Client - From Zero to
Hero!](https://srse-git-github-zero2hero.netlify.app/) offered by the [Research Software
Engineering](https://rse.shef.ac.uk) at the University of Sheffield and developed by Alumni [Anna
Krystalli](https://annakrystalli.me/).

When you have initialised a directory to be under Git version control the settings and configuration are stored in the
`.git/` sub-directory. There is the `.git/config` file for the repositories configuration but also the `.git/hooks/`
directory that is populated with a host of `*.sample` files with various different names that give you an in-road into
what different hooks you might want to run. Its worth spending a little time reading through these if you haven't done
so yet as they provide useful examples of how various hooks work.

### Why pre-commit hooks?

Typically when writing code you should [lint](https://ns-rse.github.io/posts/linting/) your code to ensure it
complies to agreed style guides and remove any "[code smells](https://en.wikipedia.org/wiki/Code_smell)" that may be
lingering (code that violates design principles). It won't guarantee that your code is perfect but its a good starting
point to improving it. People who write a lot of code have good habits of doing these checks manually prior to making
commits. Experienced coders will have configured their Integrated Development Environment (IDE) to apply many such
"hooks" on saving a file they have been working on.

At regular points in your work flow you have to save your work and check it into Git by making a commit and that is
where `pre-commit` comes in to play because it will run all the hooks you configure it to each time you try make a
commit. If any of the hooks fail then your commit is _not_ made. In some cases `pre-commit` will automatically correct
the errors (e.g. removing trailing white-space) but in others you have to correct them before a commit can be
successfully made.

Initially this can be jarring, but it saves you, and more importantly those who you are asking to review your code in
your as yet to be created pull request, time and effort as it ensures your code meets the required style and is a little
bit cleaner before being sent out for review.

## Installation

Pre-commit is written in Python and so you will need Python installed on your system in order to use it. Aside from that
there is little else extra that is required to be manually installed as pre-commit installs virtual environments
specific for each enabled hook for you.

If your systems package manager includes pre-commit you can install it system wide.

```bash
emerge -av pre-commit           # Gentoo
pacman -Syu pre-commit          # Arch
sudo apt-get install pre-commit # Debian/Ubuntu
brew install pre-commit         # Homebrew (OSX)
```

Alternatively you can install it under your account or virtual environment.

```bash
pip install pre-commit
conda install -c conda-forge pre-commit
```

If you are working on a Python project then you should include `pre-commit` as a requirement (either in
`requirements-dev.txt`) or in `setup.cfg`.


## Configuration

Configuration of pre-commit is via a file in the root of your Git version controlled directory called
`./.pre-commit-config.yaml`. This file should be included in your Git repository.

```bash
# Empty configuration
touch .pre-commit-config.yaml
git add .pre-commit-config.yaml
# Auto-generate basic configuration
pre-commit sample-config
```

Each hook is associated with a repository (`repo`) and a version (`rev`). Many are available from the
`https://github.com/pre-commit/pre-commit-hooks`

```yaml
repos:
  - repo: https://github.com/pre-commit/pre-commit-hooks
      rev: v4.3.0 # Use the ref you want to point at
      hooks:
          - id: trailing-whitespace
            types: [file, text]
          - id: check-docstring-first
          - id: check-case-conflict
          - id: end-of-file-fixer
            types: [python]
          - id: requirements-txt-fixer
          - id: mixed-line-ending
            types: [python]
            args: [--fix=no]
          - id: debug-statements
          - id: fix-byte-order-marker
          - id: check-yaml
```

Some are from dedicated repositories, for example the following runs both [Black](https://github.com/psf/black) and
[Flake8](https://flake8.pycqa.org/en/latest/) on your code and should follow under the above (with the same level of
indenting to be valid YAML).

```yaml
  - repo: https://github.com/psf/black
    rev: 22.6.0
    hooks:
        - id: black
          types: [python]

  - repo: https://gitlab.com/pycqa/flake8.git
    rev: 3.9.2
    hooks:
        - id: flake8
          additional_dependencies: [flake8-print]
          types: [python]
```

An extensive list of [supported hooks](https://pre-commit.com/hooks.html) is available. It lists the repository from
which the hook is derived along with its name.

## Usage

Once installed and configured there really isn't much to be said for using pre-commit, just make commits, the hooks you
have configured will run.

You can optionally run `pre-commit` manually in a repository that has been configured.

```bash
pre-commit run --all-files # Across all files/hooks
pre-commit run <hook_id>   # Specific hook
```

## Updating

You can update hooks by running `pre-commit autoupdate`.


## Pre-commit CI/CD

Ideally contributors will have setup their system to work with pre-commit and be running such checks prior to making
pushes. But as a backup you can enable running pre-commit as part of your Continuous Integration/Development
pipeline. Here we show how to enable this on both [GitLab](https://gitlab.com) and [GitHub](https://github.com) although
similar methods are available for many [continuous integration
systems](https://pre-commit.com/#usage-in-continuous-integration).

### GitHub

GitHub actions reside in the `.github/workflows/` directory of your project. A simple pre-commit action is available on
the Marketplace at [pre-commit/action](https://github.com/marketplace/actions/pre-commit). Copy this template to
`.github/workflows/pre-commit.yml` and include it in your Git repository (`git add .github/workflows/pre-commit.yml &&
git commit -m "Adding pre-commit GitHub Action" && git push`).


### GitLab

If you use GitLab the following article describes how to configure a CI job to run as part of your repository.

* [How to use pre-commit to automatically correct commits and merge requests with GitLab CI](https://stackoverflow.com/collectives/gitlab/articles/71270196/how-to-use-pre-commit-to-automatically-correct-commits-and-merge-requests-with-g)


## Links

* [Pre-commit](https://pre-commit.com/)
* [Supported hooks](https://pre-commit.com/hooks.html)
* [GitHub Action](https://github.com/marketplace/actions/pre-commit)
* [GitLab CI](https://stackoverflow.com/collectives/gitlab/articles/71270196/how-to-use-pre-commit-to-automatically-correct-commits-and-merge-requests-with-g)
