---
title: "Pre-commit and R Packaging"
date: "2023-07-29"
categories: [quarto, R, git, pre-commit, github actions]
image: https://live.staticflickr.com/65535/52985095726_49c5b394f1_k.jpg
from: markdown+emoji
toc: true
toc-depth: 4
toc-location: right
execute:
  code_fold: true
  code_link: true
  code_tools: true
  fig-cap-location: top
  tbl-cap-location: top
  warning: false
---

This post is aimed at getting you up and running with making an R Package. Its not meant to be comprehensive as its
really just the notes I've taken whilst going through the process for the first time myself. If you want to learn more
about package development in R then you should read [R Packages (2e) by Hadley Wickham and Jenny
Bryan](https://r-pkgs.org/) and because this article is focused on using Git to version control your package you'll
probably find the excellent [Happy Git and GitHub for the userR by Jenny Bryan](https://happygitwithr.com) worth
bookmarking too.

![[Erwin Wurm sculpture at Yorkshire Sculpture Park](https://flickr.com/photos/slackline/52985095726/) by me](https://live.staticflickr.com/65535/52985095726_49c5b394f1_k.jpg)
## devtools and usethis

The [devtools](https://devtools.r-lib.org/) package in conjunction with [usethis](https://usethis.r-lib.org) should be
your starting point for package development and has a bunch of useful functions for initialising and working with packages.

To create a package use `create_package()`, you can then activate [Git](https://git-scm.com) for the repository using
`use_git()`, connect to [GitHub](https://github.com) using `use_github()` and set up automated package checks with
`use_github_action()` or if you are using [GitLab](https://gitlab.com) you can `use_gitlab_ci()`. Creation of a package
sets up the basic structure, not all of the files/directories below are created automatically though, but are included
as they should be used/developed.

```bash
    DESCRIPTION
    NAMESPACE
    NEWS.md
    README.Rmd
    R/
    tests/
    man/
    vignettes/
    data/
    tests/
```

## `README.Rmd`

This is your front page, its what people read when they come across your package and if you are hosting the package on
GitHub/GitLab it will be the front page of the repository. You should give an overview of what the package is, a brief
examples of how to install and use it and sign post people to further documentation.

If just setting things up then I can highly recommend using the
[usethis::use_readme_rmd()](https://usethis.r-lib.org/reference/use_readme_rmd.html) command. This creates a skeleton
`README.Rmd` and also configures a pre-commit hook that helps keep `README.Rmd` and `README.md` synchronised.

## `DESCRIPTION` file

This is a file containing important meta-data about your package, it includes various fields such as package name,
title, version, URL, BugReports URL, authors (and allows inclusion of authors [ORCiD](https://orcid.org/)), a
description, the license, and importantly the imports that are required for the package to work.

## `NAMESPACE` file

This file *isn't* created automatically on package creation but will be generated by
[roxygen2](https://roxygen2.r-lib.org/) for you.

## `man/` directory

This directory holds documentation files. Some of it will be generated automatically from the documentation strings
written for functions and there are `pre-commit` hooks that ensure these are always kept up-to-date.

## `vignettes/` directory

Vignettes are short form (or longer) articles describing how to use the package.

## GitHub Actions

There are helper functions to add GitHub Actions to your repository.

### `use_github_action()`

Invoking `use_github_action()` within your package repository will prompt you for the type of action you wish to add to
it. There are, as of writing, three options.

```R
    > use_github_action()
    Which action do you want to add? (0 to exit)
    (See <https://github.com/r-lib/actions/tree/v2/examples> for other options)

    1: check-standard: Run `R CMD check` on Linux, macOS, and Windows
    2: test-coverage: Compute test coverage and report to https://about.codecov.io
    3: pr-commands: Add /document and /style commands for pull requests
```

Selecting one will write a file to `/.github/workflows/<FILENAME>.yaml` and then print out code to add a badge to your
repository.

```R
Selection: 1
    ✔ Adding '*.html' to '.github/.gitignore'
    ✔ Creating '.github/workflows/'
    ✔ Saving 'r-lib/actions/examples/check-standard.yaml@v2' to '.github/workflows/R-CMD-check.yaml'
    • Learn more at <https://github.com/r-lib/actions/blob/v2/examples/README.md>.
    • Copy and paste the following lines into 'README.Rmd':
      <!-- badges: start -->
      [![R-CMD-check](https://github.com/CUREd-Plus/cuRed/actions/workflows/R-CMD-check.yaml/badge.svg)](https://github.com/CUREd-Plus/cuRed/actions/workflows/R-CMD-check.yaml)
      <!-- badges: end -->
      [Copied to clipboard]
```

## Websites with `pkgdown`

There is the `use_pkgdown_github_pages()` function which will setup `pkgdown` and configure GitHub Actions and pages. If
you're using [GitLab](gitlab.md) `pkgdown` can be configured with `use_pkgdown()` instead (build locally with
`pkgdown::build_site()`).

## Badges

Most of the GitHub Action functions described above include output that can be copy and pasted into `README.Rmd` to
include badges in your GitHub front page.

## pre-commit

I love using [pre-commit](https://ns-rse.github.io/#category=pre-commit) in my development pipelines, it saves so much
hassle (once you are used to it). For R there is the excellent [precommit
package](https://github.com/lorenzwalthert/precommit) which comes with a set of hooks you can enable. These took a
little figuring out to get them working.

### codemetar

There is a hook for checking the [Codemeta](https://codemeta.github.io/), which is in JSON-LD format is created
correctly. The R package [codemetar](https://cran.r-project.org/web//packages//codemetar/vignettes/codemetar.html)
facilitates creating this and pulls metadata from the `DESCRIPTION`, `README.Rmd` and other aspects of your package to
format them in JSON Codemeta. It comes with a handy function to write the file for you, so after installing you can just
run `codemetar::write_codemeta()`.

### roxygenize

Roxygen2 is a package for making the documentation to go with your package. This hook requires additional configuration
in `.pre-commit-config.yaml` as you have to install your package dependencies. Fortunately there is a helper function in
the `precommit` package so you can just run `precommit::snippet_generate("additional-deps-roxygenize")` and it will
output the YAML that you need to add.

### styler

The [styler](https://styler.r-lib.org/) package ensures your code follows the [tidyverse style
guide](https://style.tidyverse.org/) by default, although it can be configured to use a custom style guide of your own
creation.

### lintr

The [lintr](https://lintr.r-lib.org/) package lints your code automatically. It can be configured by adding a `.lintr`
configuration file to your repository, a simple example is shown below. Note the indented closing parenthesis is
important you get a complaint about that and any other formatting issues.

```R
linters: linters_with_defaults(
         line_length_linter(120),
         object_name_linter = NULL,
         object_usage_linter = NULL
  )
```

## Gotchas

When starting out I found that I regularly didn't pass the `pre-commit` hooks first time. This can be jarring and
confusing to start with but its not something to worry about, they are there to ensure your code and package meet the
standards required for R packages, if you ever come to submit to [CRAN](https://cran.r-project.org) you will be grateful
to have adhered to these standards.

Below I detail common "gotchas" I encountered when developing the package, what they mean and how to resolve them.

### `spell-check`

The `spell-check` hook will fail if you've introduced new words with messages similar to the following. Sometimes these
will be new words, sometimes they might be catching tpyos you have made. In the example below `famiy` should be `family`
so you need to correct the source of the tpyo (and you're told where this is, in this case it was line 27 of
`CITATION.cff`), or if the new word should be added to the dictionary you will have to stage the `inst/WORDLIST` file
for inclusion in your commit.

```bash
spell-check..............................................................Failed
- hook id: spell-check
- exit code: 1
- files were modified by this hook

ℹ Using R 4.3.1 (lockfile was generated with R 4.2.1)
ℹ Using R 4.3.1 (lockfile was generated with R 4.2.1)
The following spelling errors were found:
  WORD    FOUND IN
famiy   CITATION.cff:27
All spelling errors found were copied to inst/WORDLIST assuming they were not spelling errors and will be ignored in the future. Please  review the above list and for each word that is an actual typo:
 - fix it in the source code.
 - remove it again manually from inst/WORDLIST to make sure it's not
   ignored in the future.
 Then, try committing again.
Error: Spell check failed
Execution halted
```

### `codemeta-description-updated`

If you modify the `DESCRIPTION` or `CITATION.cff` then the `codemeta-description-updated` hook will fail with error
messages similar to the following.

```bash
codemeta-description-updated.............................................Failed
- hook id: codemeta-description-updated
- exit code: 1

ℹ Using R 4.3.1 (lockfile was generated with R 4.2.1)
ℹ Using R 4.3.1 (lockfile was generated with R 4.2.1)
Error:
! codemeta.json is out of date; please re-run codemetar::write_codemeta().
Backtrace:
    ▆
 1. └─rlang::abort("codemeta.json is out of date; please re-run codemetar::write_codemeta().")
Execution halted
```

This means yo need to update the `codemeta.json` with

```R
codemetar::write_codemeta()
```

### `Warning: Undocumented code objects:`

If this error arises its because there is a `.Rd` file missing. You can generate these by ensuring you have the
appropriate docstring definition prior to your function and then use the `roxygen2:reoxygenise()` function to generate
the documentation automatically.  Don't forget to `git stage` and `git commit` the files to your repository, pushing if
needed (e.g. a Continuous Integration pipeline is failing).

## Windows

Windows doesn't come with Python by default, but [pre-commit](https://pre-commit.com) is written in Python and so an
environment is required in order to run the above pre-commit hooks. There are many options for this, including using
[Windows Subsystem for Linux (WSL)](https://learn.microsoft.com/en-us/windows/wsl/install). The solution is provided in
the [precommit vignette](https://cran.r-project.org/web/packages/precommit/vignettes/precommit.html) and uses the
[reticulate](https://rstudio.github.io/reticulate/) package (which interfaces [R](https://r-project.org) with
[Python](https://python.org)) to handle installing a [Miniconda](https://docs.conda.io/en/latest/miniconda.html)
environment.

### Install [R](https://www.r-project.org)

When installing the defaults are fine, request admin permissions if required.

### Install [Rstudio](https://posit.co/downloads/)

Defaults are fine, request admin permissions if required.

### Install [GitBash](https://git-scm.com/download/win)

During installation you'll be asked a number of questions, if you're unsure how to respond to any of them the following
provides guidance.

1. **Text Editor** - Configure with your choice of editor, obviously you'll want to have
   [Emacs](https://www.gnu.org/software/emacs/) available and select that! :wink:
2. **Adjust your PATH environment** - At the bare minimum go with the `Recommended` option and allow *Git from the command
   line and also from 3rd-party software*. Optionally I would recommend the third option of *Use Git and optional UNIX
   tools from the Command Prompt*, particularly if you are either a) familiar with UNIX commands or b) not at all familiar
   with them (as you won't have to re-learn the Windows commands, just learn the Bash commands they are more widely
   applicable).
3. **Use Bundled SSH library** - Use the bundled SSH library.
4. **Use Bundled OpenSSL library** - Use the bundled OpenSSL library.
5. **Checkout Windows-style, commit Unix-style line endings** - This is fine, it just changes the internal representation
   of the carriage return to be more universal.
6. **Use MinTTY** - The default terminal of MSYS2 is fine and more functional than the Windows' default console window.
7. **Default Merge behaviour** - The default (fast-forward or merge) this is fine.
8. **Choose a credential helper** - Select *None* here, we will let RStudio manage these.
9. **Configure Extra Options** - Defaults are fine.
10. **Configuring experimental options** - No need to enable any of these.

#### Configure Git

Start a GitBash shell and configure your email address and name.

```bash
git config --global user.email "you@example.com"
git config --global user.name "Your Name"
```

### Configure RStudio/GitHub with SSH keys

1. Start RStudio
2. Create SSH key - Navigate to *Tools > General Options  > Git/SVN > Create SSH Key* and under *SSH key type* select
   the default (*ED25519*) this is a [very secure elliptic curve
   algorithm](https://blog.g3rt.nl/upgrade-your-ssh-keys.html) and is supported by GitHub. Use a secure password
   (i.e. long), do **not** change the location it is created at.
3. Once created select *View public key* and use *Ctrl + c* to copy this to your clipboard.
4. Navigate to [GitHub](https://github.com/) and login then click on your avatar in the top right and select
   *Settings > SSH and GPG keys > New SSH Key*.
5. Give the key a name and paste into the box below where indicated/instructed then click on *Add SSH key*.

### Clone Repository

1. Navigate to the repository you wish to clone
(e.g. [https://github.com/CUREd-Plus/cuRed/](https://github.com/CUREd-Plus/cuRed/)) and click on the *Code* button
then select *SSH* under the *Local* tab in the box that appears.
2. Click on the box that has two small squares to the right of some text to copy the URL to clipboard.
3. Return to RStudio and start a new project with *File > New Project > Version Control > Git* and paste the URL into
   the *Repository URL*. Select a location to clone to under *Create project as subdirectory of:*,
   e.g. `c:/Users/<username>/work/cuRed` (replacing `<username>` with *your* username).
4. If prompted for password enter it. If asked to answer *Yes\\/No* answer *Yes* and then if prompted to *Store password
   for this session* answer *Yes*.
5. You should now have cloned the repository and have a project to work on.

### Install `pre-commit`

`pre-commit` refers to two things, primarily it is the Python package [`pre-commit`](https://pre-commit.com) that does
all the work of running  Linting, Tests etc. before making commits. It also refers to an R package
[precommit](https://cran.r-project.org/web//packages/precommit/vignettes/precommit.html) that works with the Python
package to enable use of various R packages that carry out such checks. Because it is a Python package it needs a Python
Virtual Environment to run. This may sound unfamiliar but don't worry the R `precommit` package and documentation guides
you through doing so, what follows is a rehash of the  [official
documentation](https://cran.r-project.org/web//packages/precommit/vignettes/precommit.html).

#### Install `precommit` and `reticulate`

```R
install.packages(c("remotes", "reticulate"))
remotes::install_github("lorenzwalthert/precommit")
```

#### Install Miniconda environment

**NB** This installs a [Miniconda](https://docs.conda.io/en/latest/miniconda.html) virtual environment framework for R
to run Python packages (i.e. `pre-commit`).

```R
options(timeout=600)
reticulate::install_miniconda()
```

#### Install `pre-commit` framework

**NB** This installs the Python package [`pre-commit`](https://pre-commit.com) within a new Miniconda virtual
environment (`r-precommit`), there will be a fair bit of output here as all the dependencies in Python for `pre-commit`
are downloaded.

```R
precommit::install_precommit()
precommit::autoupdate()
```

#### Use `precommit` with the existing project

You should have cloned the repository you wish to enable `precommit` to use (see above). You now need to enable
`precommit` for this local copy of the repository. This will place a script in `.git/hooks/pre-commit` that says which
Miniconda environment to use (`r-precommit`) and will activate this whenever a commit is made, the `install_hooks =
TRUE` ensures that the R specific hooks and their required environments are installed (under `\~/.config/pre-commit/`).

```R
precommit::use_precommit(install_hooks = TRUE)
```

## Links

+ [R Packages book by Hadley Wickham and Jenny Bryan](https://r-pkgs.org/)
+ [Happy Git and GitHub for the userR by Jenny Bryan](https://happygitwithr.com)

### R Packages

+ [devtools](https://devtools.r-lib.org/)
+ [usethis](https://usethis.r-lib.org)
+ [roxygen2](https://roxygen2.r-lib.org/)
+ [R precommit](https://cran.r-project.org/web//packages/precommit/vignettes/precommit.html) ([GitHub |
  lorenzwalthert/precommit](https://github.com/lorenzwalthert/precommit) check the
  [Issues](https://github.com/lorenzwalthert/precommit/issues), can be useful for troubleshooting)

### Python

+ [Miniconda](https://docs.conda.io/en/latest/miniconda.html)

### Pre-commit

+ [pre-commit](https://pre-commit.com)
+ [pre-commit.ci](https://pre-commit.ci)
+ [ns-rse | pre-commit](https://ns-rse.github.io/#category=pre-commit) blog posts I've made about `pre-commit`.
