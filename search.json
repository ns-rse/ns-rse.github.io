[
  {
    "objectID": "links.html",
    "href": "links.html",
    "title": "Links",
    "section": "",
    "text": "Site\nDescription\n\n\n\n\nkimura\nA Dokuwiki site where I keep notes.\n\n\nFlickr\nPhotography (mostly landscape, climbing and cats).\n\n\nneil-snaps.co.uk\nWhere I fail to monetise my photography.\n\n\nSheffieldBoulder.uk\nAnother Dokuwiki site detailing artificial boulders around Sheffield.\n\n\nGitLab\nGit repos.\n\n\nGitHub (Personal)\nGit repos.\n\n\nGitHub (Work)\nGit repos."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ns-rse",
    "section": "",
    "text": "code\n\n\nlinux\n\n\nbash\n\n\n\n\n\n\n\n\n\n\n\nSep 18, 2022\n\n\nNeil Shephard\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\ncode\n\n\nanalysis\n\n\nlinting\n\n\ngit\n\n\ngithub\n\n\ngitlab\n\n\n\n\n\n\n\n\n\n\n\nAug 28, 2022\n\n\nnshephard\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\nssh\n\n\ngit\n\n\ngithub\n\n\ngitlab\n\n\nkeychain\n\n\n\n\n\n\n\n\n\n\n\nAug 28, 2022\n\n\nnshephard\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\ncode\n\n\nlinting\n\n\npython\n\n\nR\n\n\n\n\n\n\n\n\n\n\n\nAug 18, 2022\n\n\nNeil Shephard\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Here you’ll find posts about Research Software Engineering, Git/GitHub/GitLab, GNU/Linux (Gentoo, Arch, OpenWRT), Python, Bash, R, Emacs, Org-mode, Statistics, Genetics, Evolution and more.\nWhen not working I enjoy climbing, running, cycling, cooking, hiking, photography, gardening and spending time with my family."
  },
  {
    "objectID": "posts/pre-commit/index.html",
    "href": "posts/pre-commit/index.html",
    "title": "Pre-Commit : Protecting your future self",
    "section": "",
    "text": "Pre-commit is a powerful tool for executing a range of hooks prior to making commits to your Git history. This is useful because it means you can automatically run a range of linting tools on your code across an array of languages to ensure your code is up-to-scratch before you make the commit."
  },
  {
    "objectID": "posts/pre-commit/index.html#background",
    "href": "posts/pre-commit/index.html#background",
    "title": "Pre-Commit : Protecting your future self",
    "section": "Background",
    "text": "Background\nPre-commit is written in Python but that isn’t a limitation as it will lint YAML, JSON, C, JavaScript, Go, Rust, TOML, Terraform, Jupyter Notebooks, and so on. The list of supported hooks is vast.\nFor those unfamiliar with version control and Git in particular this will likely all sound alien. If you are new to the world of version control and Git I can highly recommend the Git & Github through GitKraken Client - From Zero to Hero! course offered by the Research Software Engineering at the University of Sheffield and developed by Alumni Anna Krystalli.\n\nWhat is a “hook”?\nIn computing a “hook” refers to something that is run prior to or in response to a requested action. In the context of the current discussion we are talking about hooks that relate to actions undertaken in Git version control and specifically actions that are run before a “commit” is made.\nWhen you have initialised a directory to be under Git version control the settings and configuration are stored in the .git/ sub-directory. There is the .git/config file for the repositories configuration but also the .git/hooks/ directory that is populated with a host of *.sample files with various different names that give you an in-road into what different hooks you might want to run. Its worth spending a little time reading through these if you haven’t done so yet as they provide useful examples of how various hooks work.\n\n\nWhy pre-commit hooks?\nTypically when writing code you should lint your code to ensure it conforms to agreed style guides and remove any “code smells” that may be lingering (code that violates design principles). It won’t guarantee that your code is perfect but its a good starting point to improving it. People who write a lot of code have good habits of doing these checks manually prior to making commits. Experienced coders will have configured their Integrated Development Environment (IDE) to apply many such “hooks” on saving a file they have been working on.\nAt regular points in your workflow you save your work and check it into Git by making a commit and that is where pre-commit comes in to play because it will run all the hooks it has been configured to run against the files you are including in your commit. If any of the hooks fail then your commit is not made. In some cases pre-commit will automatically correct the errors (e.g. removing trailing white-space; applying black formatting if configured) but in others you have to correct them yourself before a commit can be successfully made.\nInitially this can be jarring, but it saves you, and more importantly those who you are asking to review your code, time and effort. Your code meets the required style and is a little bit cleaner before being sent out for review. Long term linting your code is beneficial (see Linting - What is all the fluff about?)."
  },
  {
    "objectID": "posts/pre-commit/index.html#installation",
    "href": "posts/pre-commit/index.html#installation",
    "title": "Pre-Commit : Protecting your future self",
    "section": "Installation",
    "text": "Installation\nPre-commit is written in Python and so you will need Python installed on your system in order to use it. Aside from that there is little else extra that is required to be manually installed as pre-commit installs virtual environments specific for each enabled hook.\nMost systems provide pre-commit in their package management system but typically you should install pre-commit within your virtual environment or under your user account.\npip install pre-commit\nconda install -c conda-forge pre-commit\nIf you are working on a Python project then you should include pre-commit as a requirement (either in requirements-dev.txt) or under the dev section of [options.extras_require] in your setup.cfg as shown below.\n[options.extras_require]\ndev =\n  pre-commit\n  pytest\n  pytest-cov"
  },
  {
    "objectID": "posts/pre-commit/index.html#configuration",
    "href": "posts/pre-commit/index.html#configuration",
    "title": "Pre-Commit : Protecting your future self",
    "section": "Configuration",
    "text": "Configuration\nConfiguration of pre-commit is via a file in the root of your Git version controlled directory called .pre-commit-config.yaml. This file should be included in your Git repository, you can create a blank file or pre-commit can generate a sample configuration for you.\n# Empty configuration\ntouch .pre-commit-config.yaml\n# Auto-generate basic configuration\npre-commit sample-config\ngit add .pre-commit-config.yaml\n\nHooks\nEach hook is associated with a repository (repo) and a version (rev) within it. Many are available from the https://github.com/pre-commit/pre-commit-hooks. The default set of pre-commit hooks might look like the following.\nrepos:\n  - repo: https://github.com/pre-commit/pre-commit-hooks\n      rev: v4.3.0 # Use the ref you want to point at\n      hooks:\n          - id: trailing-whitespace\n            types: [file, text]\n          - id: check-docstring-first\n          - id: check-case-conflict\n          - id: end-of-file-fixer\n            types: [python]\n          - id: requirements-txt-fixer\n          - id: mixed-line-ending\n            types: [python]\n            args: [--fix=no]\n          - id: debug-statements\n          - id: fix-byte-order-marker\n          - id: check-yaml\n\n\nHooks from External Repositories\nSome hooks are available from dedicated repositories, for example the following runs Black, Flake8 and Pylint on your code and should follow under the above (with the same level of indenting to be valid YAML).\n  - repo: https://github.com/psf/black\n    rev: 22.6.0\n    hooks:\n        - id: black\n          types: [python]\n\n  - repo: https://gitlab.com/pycqa/flake8.git\n    rev: 3.9.2\n    hooks:\n        - id: flake8\n          additional_dependencies: [flake8-print]\n          types: [python]\n  - repo: https://github.com/pycqa/pylint\n    rev: v2.15.3\n    hooks:\n        - id: pylint\nAn extensive list of supported hooks is available. It lists the repository from which the hook is derived along with its name.\n\n\nLocal Hooks\nYou can also define new hook and configure them under the - repo: local.\n  - repo: local\n    hooks:\n      - id: <id>\n        name: <descriptive name>\n        language: python\n        entry:\n        types: [python]\nFor some examples of locally defined hooks see the Pandas .pre-commit-config.yaml."
  },
  {
    "objectID": "posts/pre-commit/index.html#usage",
    "href": "posts/pre-commit/index.html#usage",
    "title": "Pre-Commit : Protecting your future self",
    "section": "Usage",
    "text": "Usage\nBefore pre-commit will run you need to install it within your repository. This puts the file .git/hooks/pre-commit in place that contains the hooks you have configured to run. To install this you should have your .pre-commit-config.yaml in place and then run the following.\npre-commit install\nOnce installed and configured there really isn’t much to be said for using pre-commit, just make commits and before you can make a successful commit pre-commit must run with all the hooks you have configured passing. By default pre-commit only runs on files that are staged and ready to be committed, if you have unstaged files these will be stashed prior to running the pre-commit hook and restored afterwards. Should you wish to run these manually without making a commit then, after activating a virtual environment if you are using one, simply make a git commit or you can run.\npre-commit run\nIf any of the configured hooks fail then the commit will not be made. Some hooks such as black may reformat files in place and you can then make another commit recording those changes and the hook should pass. Its important to pay close attention to the output.\nIf you want to run a specific hook you simply add the <id> after run.\npre-commit run <id>\nOr if you want to force running against all files (except unstaged ones) you can do so.\npre-commit run --all-files # Across all files/hooks\nAnd these two options can be combined to run a specific hook against all files.\npre-commit run <id> --all-files\nYou may find that you wish to switch branches to work on another feature or fix a bug but that your current work doesn’t pass the pre-commit and you don’t wish to sort that out immediately. The solution to this is to use git stash to temporarily save your current uncommitted work and restore the working directory and index to its previous state. You are then free to switch branches and work on another feature or fix a bug, commit and push those changes and then switch back.\nImagine you are working on branch a but are asked to fix a bug on branch b. You go to commit your work but find that a does not pass pre-commit but you wish to work on b anyway. Starting on branch a you stash your changes, switch branches, make and commit your changes to branch b then switch back to a and unstash your work there.\ngit stash\ngit checkout b\n... # Work on branch b\ngit add <changed_files_on_branch_b>\ngit commit -m \"Fixing bug on branch b\"\ngit push\ngit checkout a\ngit stash apply"
  },
  {
    "objectID": "posts/pre-commit/index.html#updating",
    "href": "posts/pre-commit/index.html#updating",
    "title": "Pre-Commit : Protecting your future self",
    "section": "Updating",
    "text": "Updating\nYou can update hooks locally by running pre-commit autoupdate. This will update your .pre-commit-config.yaml with the latest version of repositories you have configured and these will run both locally and if you use CI/CD as described below. However this will not update any packages that are part of the - repo: local that you may have implemented and it is your responsibility to handle these."
  },
  {
    "objectID": "posts/pre-commit/index.html#pre-commit-cicd",
    "href": "posts/pre-commit/index.html#pre-commit-cicd",
    "title": "Pre-Commit : Protecting your future self",
    "section": "Pre-commit CI/CD",
    "text": "Pre-commit CI/CD\nIdeally contributors will have setup their system to work with pre-commit and be running such checks prior to making pushes. It is however useful to enable running pre-commit as part of your Continuous Integration/Development pipeline (CI/CD). This can be done with both GitLab and GitHub although similar methods are available for many continuous integration systems.\n\nGitHub\nGitHub actions reside in the .github/workflows/ directory of your project. A simple pre-commit action is available on the Marketplace at pre-commit/action. Copy this template to .github/workflows/pre-commit.yml and include it in your Git repository.\ngit add .github/workflows/pre-commit.yml\ngit commit -m \"Adding pre-commit GitHub Action\" && git push\n\n\nGitLab\nIf you use GitLab the following article describes how to configure a CI job to run as part of your repository.\n\nHow to use pre-commit to automatically correct commits and merge requests with GitLab CI"
  },
  {
    "objectID": "posts/pre-commit/index.html#links",
    "href": "posts/pre-commit/index.html#links",
    "title": "Pre-Commit : Protecting your future self",
    "section": "Links",
    "text": "Links\n\nPre-commit\nSupported hooks\nGitHub Action\nGitLab CI"
  },
  {
    "objectID": "posts/git-ssh/index.html",
    "href": "posts/git-ssh/index.html",
    "title": "Git : Custom SSH credentials for git repositories",
    "section": "",
    "text": "How to configure individual Git repositories to use specific SSH keys. This is useful if you have more than one account on a forge, for example a personal and work account."
  },
  {
    "objectID": "posts/git-ssh/index.html#background",
    "href": "posts/git-ssh/index.html#background",
    "title": "Git : Custom SSH credentials for git repositories",
    "section": "Background",
    "text": "Background\nTypically when pushing and pulling changes to a forge such as GitHub, GitLab or Codeberg you use an SSH (Secure SHell) key to authenticate that you have permission to access the repository."
  },
  {
    "objectID": "posts/git-ssh/index.html#ssh-keys",
    "href": "posts/git-ssh/index.html#ssh-keys",
    "title": "Git : Custom SSH credentials for git repositories",
    "section": "SSH Keys",
    "text": "SSH Keys\n\nConcept\nSSH keys are, in conjunction with “keychains”, used to save you having to enter a password each time you connect from one computer to another. They are generated on your computer and consist of two parts, a private key which remains on your computer and a public key which you place on remote computers you wish to connect to. There is a password associated with your key which is required to “unlock” your private key on your computer. Only an unlocked private key will match with a public key. Think of the public key as the lock on your front door, and the private key the key you carry on your traditional, physical, keychain/keyring. Only when the two match will things be unlocked, although you have to unlock your private key when you want to use it just as you have to get your keys out of your pocket (although “keychains” help with this).\n\n\nGeneration\nThere are different algorithms for generating SSH key pairs. DSA is no longer considered secure and RSA keys should have at least 2048-bits if not 4096-bits. A good choice these days is to use an elliptic curve based key such as ed25519 as they are shorter and faster. For more on why you should use this key see the article Upgrade your SSH keys!.\nTo generate a key use the following command entering a secure (i.e. long) password.\nssh-keygen -o -a 100 -t ed25519\nYou will be prompted for a filename to save your keys to, so you should know where to find them (the default is ~/.ssh/id_ed25519[.pub]). You have a private key ~/.ssh/id_ed25519 and a public ~/.ssh/id_ed25519.pub and we will use this to set up authentication on your Git Forge.\n\n\nForge Configuration\nUnder your account settings on your chosen Git Forge navigate to Settings > SSH and GPG Keys and select Add New Key on (GitHub). On GitLab navigate to Preferences > SSH Keys GitLab), this page allows you to add a new key.\nYou need to copy and paste your public key into the Key box on these pages and give it a name (typically the hostname of your computer is a good choice). To view your public key simply use cat and copy and paste it. You can optionally choose to set an expiration date for your key which is good practice but means you have to generate new keys in the future.\ncat ~/.ssh/id_ed25519.pub"
  },
  {
    "objectID": "posts/git-ssh/index.html#git-global-ssh-configuration",
    "href": "posts/git-ssh/index.html#git-global-ssh-configuration",
    "title": "Git : Custom SSH credentials for git repositories",
    "section": "Git Global SSH Configuration",
    "text": "Git Global SSH Configuration\nTypically your global configuration for which key to use is set in ~/.ssh/config with an entry similar to the below.\nHost github.com\n     User git\n     Port 22\n     PreferredAuthentications publickey\n     IdentityFile ~/.ssh/id_ed25519\nHere it uses the User name git on port 22. The preferred authentication method is using a publickey and the private key used is stored locally at ~/.ssh/id_ed25519.\nWhen asked to connect to a forge using SSH (e.g. git pull or git push) will look through the ~/.ssh/config file to see if there is a configuration section that matches the target and if so use the configuration defined there-in. You will then be prompted for your SSH private key password.\n\nWhat are Keychains?\nYou may be wondering how an SSH key makes your life easier, you are still prompted to enter a password when trying to interact with a Git Forge, or use it in a more traditional manner to connect over SSH to another server. This is where the magic of a “keychain” steps in to make your life easier, you still have to enter a password but only once to add your SSH key to the “keychain”. Typically keychains are front-ends for interacting with and managing SSH agent. The name is apt since you add your SSH key to the keychain once, typically on log-in, and are asked for your password to unlock it and then stores it in the SSH agent. Then each time SSH requires an SSH key it retrieves it from the keychain rather than prompting you for a password.\nThere are many different implementations of keychain such as the Funtoo Keychain Project, Seahorse the GNOME GUI management tool,"
  },
  {
    "objectID": "posts/git-ssh/index.html#git-per-repository-configuration",
    "href": "posts/git-ssh/index.html#git-per-repository-configuration",
    "title": "Git : Custom SSH credentials for git repositories",
    "section": "Git Per Repository Configuration",
    "text": "Git Per Repository Configuration\nWe now get to the meat of this post, how to configure individual repositories to use specific SSH keys. This may be desirable if you have two accounts on the same forge e.g. both on GitHub.com or both on GitLab.com? As of Git 2.10.0 you can configure each repository to use a specific key (source). At the command line…\ncd a/git/repository\ngit config core.sshCommand \"ssh -i ~/.ssh/different_ed25519 -F /dev/null\"\ngit config --local user.name \"Username\"\ngit config --local user.email \"repos@username.com\"\nThis adds the following to the repositories configuration which is stored under .git/config and you can of course enter this directly to the configuration file yourself.\n[core]\n    sshCommand = ssh -i ~/.ssh/different_ed25519 -F /dev/null\n[user]\n    name = Username\n    email = repos@username.com\nWhat is this doing? Well it’s instructing Git to run ssh using the private key file (with the -i flag to specify the identity_file) that is located at ~/.ssh/different_ed25519. Providing you have…\n\nAlready uploaded the public key (different_ed25519.pub) to your GitHub account.\nStored this key in a Keychain as described above.\n\n…you shouldn’t be prompted for a password.\nYou can now configure, on a repository basis, which SSH key is used by Git when pushing/pulling changes from the remote origin (typically a forge such as GitHub, GitLab, Codeberg or so forth)."
  },
  {
    "objectID": "posts/git-ssh/index.html#commit-verification-with-ssh",
    "href": "posts/git-ssh/index.html#commit-verification-with-ssh",
    "title": "Git : Custom SSH credentials for git repositories",
    "section": "Commit verification with SSH",
    "text": "Commit verification with SSH\nVerification of commits is a usefl security feature, but beyond the scope of this article but as doing so with SSH keys is a recently supported feature on GitHub (see blog SSH commit verification now supported) I felt it worth mentioning."
  },
  {
    "objectID": "posts/git-ssh/index.html#links",
    "href": "posts/git-ssh/index.html#links",
    "title": "Git : Custom SSH credentials for git repositories",
    "section": "Links",
    "text": "Links\n\nSSH\n\nSSH Academy\nOpenSSH Key Management, Part 1\nOpenSSH Key Management, Part 2\nOpenSSH Key Management, Part 3\n\n\n\nForges\n\nGitHub | Connect with SSH\nGitLab | Use SSH keys to communicate with GitLab\nCodeberg | Adding an SSH key to your account"
  },
  {
    "objectID": "posts/linting/index.html",
    "href": "posts/linting/index.html",
    "title": "Linting - What is all the fluff about?",
    "section": "",
    "text": "NB This article originally appeared on RSE University of Sheffield but is updated here.\nIf you’ve been dabbling in programming for a while you may have heard of “linting your code” which is a process of static code analysis to remove the “fluff” from your code. Just as physically linting your clothes removes unwanted fluff, linting your code removes “fluff” and can help…\nThis helps reduce the technical debt which impacts the amount of time required for maintenance and further development of a code base. The main focus of this article is the use of linting to ensure consistent coding style, it focuses on Python under Linux but similar tools are available for other operating systems and languages."
  },
  {
    "objectID": "posts/linting/index.html#style-matters",
    "href": "posts/linting/index.html#style-matters",
    "title": "Linting - What is all the fluff about?",
    "section": "Style Matters",
    "text": "Style Matters\nWhat has style got to do with writing code? Trends come and go in fashion but coding styles are meant to be relatively static and not change with the season, although they can and do evolve over time. This is because using a consistent and widely used style when writing code makes it easier for other people, often your future self, to read and understand the code you have written. If code is easier to understand then its easier to modify, update, extend, improve and in general maintain.\nA useful insight from Gudio van Rossum, the creator of Python is that “code is read much more often than it is written” and so it should be easy to understand and not obfuscate its intent. Python is quite good for this as it is an expressive language which encourages coders to be explicit when naming variables, functions, classes and so forth so that their purpose and intention is clear, although the same is true of most modern languages. However, going a step further and using consistent styles to format and layout code helps enhance this."
  },
  {
    "objectID": "posts/linting/index.html#linting-in-python",
    "href": "posts/linting/index.html#linting-in-python",
    "title": "Linting - What is all the fluff about?",
    "section": "Linting in Python",
    "text": "Linting in Python\nThe most widely used Python style is defined in the long established PEP 8: The Style Guide for Python Code. There are a number of tools available that will lint your Python code for you and most integrate with your IDE, whether that is Visual Studio Code, PyCharm or Emacs. Some of the formatting and linting tools available for Python are…\n\nPylint - checks for errors in Python code, tries to enforce a coding standard and looks for code smells.\nYAPF - takes the code and reformats it to the best formatting that conforms to the style guide.\nBlack - The Uncompromising Code Formatter\nFlake8 - Your Tool For Style Guide Enforcement\nProspector - Python Static Analysis\nmypy - Optional Static Typing for Python\n\nHere we will work through linting and formatting the simple file below (available as a download here) using PyLint and Black.\nimport numpy as np\nfrom pathlib import Path\nfrom typing import Union\nimport csv\n\ndef save_random_numbers(size: int, seed: int = 87653546, save_as: Union[str, Path] = \"./random_numbers.txt\") -> None:\n    \"\"\"Save a list of random numbers (floats) to the given file.\n\n    The stated number of random numbers will be saved to the given target file, if the directory structure\n    doesn't exist it will be created. Output will by default be over-written.\n    Parameters\n    ----------\n    size : int\n        Number of random numbers to generate\n    seed: int\n        Seed for random number generation\n    save_as : Union[str, Path]\n        Directory/file to save numbers to.\n    \"\"\"\n    rng = np.random.default_rng()\n    random_numbers = rng.random(size)\n\n    with Path(save_as).open('w') as out:\n        writer = csv.write(out)\n        writer.writerows(random_numbers)\n\nLinting with PyLint\nWe will lint this file using Pylint to find out what errors there are and how its style can be improved to conform with PEP8 guidelines.\nFirst you need to install pylint, typically in your virtual environment.\npip install pylint\nPylint can be configured using a ~/.pylintrc file in your home directory and over time this will grow as you customise your configuration but for now we will make one simple change from the default which is to increase the accepted line length. Create the file and save it with the following content.\n[FORMAT]\n## Maximum number of characters on a single line.\nmax-line-length=120\nOpen a terminal and navigate to the location you saved the example file save_random_numbers.py activate the virtual environment you installed pylint under if its not already being used and then type the following to run Pylint against your code…\npylint save_random_numbers.py\nYou should see output similar to the following…\n ❱ pylint save_random_numbers.py\n************* Module save_random_numbers\nsave_random_numbers.py:1:0: C0114: Missing module docstring (missing-module-docstring)\nsave_random_numbers.py:5:66: E0602: Undefined variable 'Union' (undefined-variable)\nsave_random_numbers.py:5:35: W0613: Unused argument 'seed' (unused-argument)\nsave_random_numbers.py:2:0: C0411: standard import \"from pathlib import Path\" should be placed before \"import numpy as np\" (wrong-import-order)\nsave_random_numbers.py:3:0: C0411: standard import \"import csv\" should be placed before \"import numpy as np\" (wrong-import-order)\n\n-------------------------------------------------------------------\nYour code has been rated at 0.00/10\nThe output tells us which module has been inspected on the first line. Each subsequent line indicates\n\nThe file.\nThe line the problem has been encountered on.\nThe column.\nA somewhat cryptic error code and then a message about the problem\nA more descriptive generic message associated with the error code.\n\nAt the moment we are only looking at one file, but when using PyLint against larger code bases this information is vital in helping direct you to the location of code that needs changing. At the end PyLint rates your code, ideally you should aim to get a score of 10.0/10.\nThe messages are quite informative, taking each in turn we can work through resolving them.\n\nMissing module docstring (missing-module-docstring)\nEach Python module should have a docstring as the very first line that describes what it does. In this example it might be considered superflous but its good practice to get in the habit of writing these as it comes in useful when documentation is automatically generated from the docstrings in the code. To fix it we can add a short docstring at the top.\n\"\"\"Module for saving randomly generated numbers.\"\"\"\nimport numpy as np\nfrom pathlib import Path\n\n\nUndefined variable 'Union' (undefined-variable)\nThis error arises because the type hint uses Union but it hasn’t been imported. It’s from the typing module so we can import it.\n\"\"\"Module for saving randomly generated numbers.\"\"\"\nimport numpy as np\nfrom pathlib import Path\nfrom typing import Union\n\n\nUnused argument 'seed' (unused-argument)\nThis is very useful to be informed about because the seed argument, according to the docstring, is meant to be used in the call to the random number generator and ensures we will get the same set of random numbers generated each time we call the function with that seed, however, as Pylint has informed us we haven’t actually used it within the save_random_number() function. We can correct that by adding it when we instantiate the random number generator.\nrng = np.random.default_rng(seed=seed)\n\n\nstandard import \"from pathlib import Path\" should be placed before \"import numpy as np\" (wrong-import-order)\nThis message, like the one that follows it, is telling us that the order in which we have imported modules is incorrect, because the PEP8 guide recommends that core modules, which both csv and pathlib are, should be imported before other modules. We can correct this by changing the order (and because we have added an import from the typing module which is also a core module we move that too).\n\"\"\"Module for saving randomly generated numbers.\"\"\"\nimport csv\nfrom pathlib import Path\nfrom typing import Union\n\nimport numpy as np\nOnce corrected your file should look like this…\n\"\"\"Module for saving randomly generated numbers.\"\"\"\nimport csv\nfrom pathlib import Path\nfrom typing import Union\nimport numpy as np\n\ndef save_random_numbers(size: int, seed: int = 87653546, save_as: Union[str, Path] = \"./random_numbers.txt\") -> None:\n    \"\"\"Save a list of random numbers (floats) to the given file.\n\n    The stated number of random numbers will be saved to the given target file, if the directory structure\n    doesn't exist it will be created. Output will by default be over-written.\n\n    Parameters\n    ----------\n    size : int\n        Number of random numbers to generate\n    seed: int\n        Seed for random number generation\n    save_as : Union[str, Path]\n        Directory/file to save numbers to.\n    \"\"\"\n    rng = np.random.default_rng(seed)\n    random_numbers = rng.random(size)\n\n    with Path(save_as).open('w') as out:\n        writer = csv.write(out)\n        writer.writerows(random_numbers)\n…and you can now run PyLint against it to see if you’ve improved your score.\n ❱ pylint save_random_numbers.py\n************* Module save_random_numbers\nsave_random_numbers.py:7:66: E1136: Value 'Union' is unsubscriptable (unsubscriptable-object)\n\n------------------------------------------------------------------\nYour code has been rated at 5.00/10 (previous run: 4.00/10, +1.00)\nThat is an improvement in score (of +1.00) but we now have another error telling us that E1136: Value 'Union' is unsubscriptable (unsubscriptable-object). You are unlikely to know what all the error codes mean, but there are a few handy on-line lists all PyLint codes or all PyLint messages and what they are telling you are worth consulting (The Little Book of Python Anti-Patterns is also useful). In this instance PyLint has returned a false-positive because Union can and should be subscripted here because it means the argument can be either a string (str) or a pathlib Path (Path). So how do we get around this complaint?\nYou can disable PyLint from complaining about specific error codes/messages on a per-file basis by adding a line that disables them. You can use either codes or messages (the bit in the brackets at the end of the line, in this case unsubscriptable-object) and it is advisable to use the message form as it is more informative to those who read your code subequently.\nIf we add the following line it prevents PyLint from reporting the specific error…\nimport numpy as np\n\n# pylint: disable=unsubscriptable-object\n\ndef save_random_numbers(size: int, seed: int = 87653546, save_as: Union[str, Path] = \"./random_numbers.txt\") -> None:\n…running PyLint against our code again we get a much better score.\n ❱ pylint save_random_numbers_tidy.py\n\n-------------------------------------------------------------------\nYour code has been rated at 10.00/10 (previous run: 5.00/10, +5.00)\n\n\n\nConfiguring PyLint\nThe last error we encountered is something that is likely to crop up again if you use Typehints liberally throughout your Python code (and I would encourage you to do so). Rather than having to remember to disable the error in each file/module we create we can configure PyLint via its configuration file ~/.pylintrc to always ignore this error. To do so add the following…\n[MESSAGES CONTROL]\n# Disable the message, report, category or checker with the given id(s). You\n# can either give multiple identifiers separated by comma (,) or put this\n# option multiple times (only on the command line, not in the configuration\n# file where it should appear only once).\ndisable=unsubscriptable-object\nFor more on configuriong PyLint refer to the documentation and also details of how to integrate with your editor and IDE\n\n\nAutomated Formatting with Black\nBlack is The Uncompromising Code Formatter and is very strict about the way in which it formats code. This could be a good or bad thing depending on your point of view, but it does result in highly consistent code when applied to all files. It formats files in place, so be mindful of this if you run it against one of your files it will change it.\nInstall black in your virtual environment and make a backup of your save_random_number.py file that you have just tidied up with linting.\npip install black\ncp save_random_numbers.py tidy_save_random_numbers.py\nTo run black against your code pass it the input file, it will re-write it and you can then compare it against the backup you just made…\nblack save_random_numbers.py\n❱ diff save_random_numbers.py tidy_save_random_numbers.py\n5,8c5\n<\n< def save_random_numbers(\n  <     size: int, seed: int = 87653546, save_as: Union[str, Path] = \"./random_numbers.txt\"\n  < ) -> None:\n---\n> def save_random_numbers(size: int, seed: int = 87653546, save_as: Union[str, Path] = \"./random_numbers.txt\") -> None:\n27c24\n<     with Path(save_as).open(\"w\") as out:\n---\n>     with Path(save_as).open('w') as out:\nIn this instance Black hasn’t changed much but it has reformatted the def save~randomnumbers~(...) line and moved the with Path() line as a consequence."
  },
  {
    "objectID": "posts/linting/index.html#when-to-lint",
    "href": "posts/linting/index.html#when-to-lint",
    "title": "Linting - What is all the fluff about?",
    "section": "When to Lint",
    "text": "When to Lint\nIt is worth linting your code from the outset of a project as not only does it result in a consistent style across your code base it also avoids the problem that can arise when applying linting retrospectively. If an existing code base has linting applied then the git blame, which indicates who the last person to edit a section was, then resides with the person who applied the linting, rather than the original author of the code. Its possible though that the person who applied the linting knows very little about the underlying functionality of the code but they may receive questions about it if they are indicated as the last person to have modified particular lines.\nFortunately there are a number of ways to automate and integrate linting into your workflow."
  },
  {
    "objectID": "posts/linting/index.html#automating-linting",
    "href": "posts/linting/index.html#automating-linting",
    "title": "Linting - What is all the fluff about?",
    "section": "Automating Linting",
    "text": "Automating Linting\n\nIDE Integration\nWhen programming it is really useful to use an Integrated Development Environment (IDE) as most allow the integration of linting tools and apply them to your code automatically, whether its using PyLint, YAPF, Black or otherwise. Setup and configuration is beyond the scope of this article but some links are provided to useful resources to get you started.\n\n\nVSCode\nVSCode supports linting in most languages, and both Python and R are supported along with other languages.\n\n\nPyCharm\nPyCharm supports automated formatting of code, for more information please refer to Reformat and rearrange code | PyCharm.\n\n\nEmacs\nThere are various options available for linting within Emacs, which you use depends on your preferences but LSP mode integrates with YAPF (via yapfify), Flake8 (via flycheck) and Black (via blacken)."
  },
  {
    "objectID": "posts/linting/index.html#git-integration",
    "href": "posts/linting/index.html#git-integration",
    "title": "Linting - What is all the fluff about?",
    "section": "Git Integration",
    "text": "Git Integration\nIf you are using an IDE then if configured correctly your code should be linted automatically for you, but an additional step that can capture anything that hasn’t been correctly formatted is to use a git hook to run linting on your code prior to making commits. There is git-pylint-commit-hook available on PyPi which runs automatically when you make commits to .py files."
  },
  {
    "objectID": "posts/linting/index.html#continuous-integration",
    "href": "posts/linting/index.html#continuous-integration",
    "title": "Linting - What is all the fluff about?",
    "section": "Continuous Integration",
    "text": "Continuous Integration\nIncluding a linting stage in your Continuous Integration (CI) pipeline pays dividends as we all make mistakes and sometimes forget to lint our code before making pushes."
  },
  {
    "objectID": "posts/linting/index.html#megalinter",
    "href": "posts/linting/index.html#megalinter",
    "title": "Linting - What is all the fluff about?",
    "section": "Megalinter",
    "text": "Megalinter\nPerhaps not necessary for everyone but worth mentioning the beast that is MegaLinter which will lint code across multiple languages and integrates easily into your pipeline (GitHub Action, CI on GitLab, Jenkins etc.). A useful article on doing so is Limit your technical debt and secure your code base using MegaLinter."
  },
  {
    "objectID": "posts/linting/index.html#pre-commit",
    "href": "posts/linting/index.html#pre-commit",
    "title": "Linting - What is all the fluff about?",
    "section": "Pre-commit",
    "text": "Pre-commit\nPre-commit is a Python package that adds a set of configurable hooks for linting your code, and not just Python, using a Git pre-commit hook. Hooks are run conditional on certain changes in states, in this case code that is run before commits are made. It creates a virtual Python Environment and installs the required packages there to lint your code. More will be written on this in a subsequent post."
  },
  {
    "objectID": "posts/linting/index.html#links",
    "href": "posts/linting/index.html#links",
    "title": "Linting - What is all the fluff about?",
    "section": "Links",
    "text": "Links\n\nPython\n\nFlake8 - Your Tool For Style Guide Enforcement\nBlack - The Uncompromising Code Formatter\nLinting Python in Visual Studio Code\nPylint - Overview of all Pylint messages\n\n\n\nR\n\nGitHub - r-lib/lintr: Static Code Analysis for R\nIntroduction to R: Linting R (and R Markdown)\n\n\n\nC++\n\ncpplint"
  },
  {
    "objectID": "posts/cli-alternatives/index.html",
    "href": "posts/cli-alternatives/index.html",
    "title": "Linux Command Line Alternatives",
    "section": "",
    "text": "The command line is my second home when sat at a computer (Emacs is my first ;-) and the UNIX Philosophy is the key to the huge amount of highly productive tools that are available under UNIX, GNU/Linux, BSD, OSX, PowerShell etc.\nMany of these tools work and have done for many years, but there are some new alternatives that are coming through that build and modernise on these tools without breaking the core functionality. Here I detail some of the tools and why you might want to use them. Each tool has a brief introduction with some example output shown and then some aliases listed that you can drop into ~/.bash_aliases or ~/.oh-my-zsh/custom/aliases to use on your system."
  },
  {
    "objectID": "posts/cli-alternatives/index.html#alternatives",
    "href": "posts/cli-alternatives/index.html#alternatives",
    "title": "Linux Command Line Alternatives",
    "section": "Alternatives",
    "text": "Alternatives\n\nbat\nbat is “A cat(1) clone with wings.”. It automatically uses syntax highlighting and integrates with git if a file is version controlled to show changes and lots more. You can pipe input to it, including from e.g. curl -s https://server.com/some_file\n\nExamples\n❱ bat pyproject.toml\n───────┬──────────────────────────────────────────────\n       │ File: pyproject.toml\n───────┼──────────────────────────────────────────────\n   1   │ [build-system]\n   2   │ requires = [\n   3   │   \"setuptools\",\n   4   │   \"versioneer==0.26\",\n   5   │   \"wheel\"]\n   6   │ build-backend = \"setuptools.build_meta\"\n   7   │\n   8   │ [tool.black]\n   9   │ line-length = 120\n  10   │ target-version = ['py38', 'py39', 'py310']\n  11   │ include = '\\.pyi?$'\n───────┴──────────────────────────────────────────────\n\n\nConfiguration\nYou can generate a default configuration file with\nbat --generate-config-file\nThis will be saved at ~/.config/bat/config and you can edit it as desired.\n\n\n\ncheat\ncheat is actually a web-service that returns short “cheats” for command line programmes which will often cover many use cases and save you having to read the rather dry man pages for functions.\n\nExamples\n❱ cheat cheat\n cheat:cheat\n# To see example usage of a program:\ncheat <command>\n\n# To edit a cheatsheet\ncheat -e <command>\n\n# To list available cheatsheets\ncheat -l\n\n# To search available cheatsheets\ncheat -s <command>\n\n# To get the current `cheat' version\ncheat -v\n\n tldr:cheat\n# cheat\n# Create and view interactive cheat sheets on the command-line.\n# More information: <https://github.com/cheat/cheat>.\n\n# Show example usage of a command:\ncheat command\n\n# Edit the cheat sheet for a command:\ncheat -e command\n\n# List the available cheat sheets:\ncheat -l\n\n# Search available the cheat sheets for a specified command name:\ncheat -s command\n\n# Get the current cheat version:\ncheat -v\n\n\nAliases\nYou don’t need to install anything to use this, instead define an alias for your shell (e.g. in ~/.bashrc/~/.zshrc/~/.oh-my-zsh/custom/aliases.zsh)\n## Linux commands https://github.com/chubin/cheat.sheets\ncheat () {\n    curl cheat.sh/\"$@\"\n}\n\n\n\ndifftastic\ndifftastic (GitHub) is an alternative to the default GNU diff packaged with most systems. It is “aware” of some 30 or so programming languages and will show diffs side-by-side rather than the traditional linear manner. It integrates easily with Git so when you git diff it uses difft to show the differences.\nHighly recommended, but don’t take my word for it, give it a whirl yourself.\n\n\nduf\nduf is a nice alternative to the traditional du and df commands which report disk usage and file/directory usage respectively.\n\nExamples\n❱ tldr duf\n\n  duf\n\n  Disk Usage/Free Utility.\n  More information: https://github.com/muesli/duf.\n\n  - List accessible devices:\n    duf\n\n  - List everything (such as pseudo, duplicate or inaccessible file systems):\n    duf --all\n\n  - Only show specified devices or mount points:\n    duf path/to/directory1 path/to/directory2 ...\n\n  - Sort the output by a specified criteria:\n  duf --sort size|used|avail|usage\n\n❱ duf\n╭──────────────────────────────────────────────────────────────────────────────────────────────╮\n│ 4 local devices                                                                              │\n├────────────┬────────┬───────┬────────┬───────────────────────────────┬──────┬────────────────┤\n│ MOUNTED ON │   SIZE │  USED │  AVAIL │              USE%             │ TYPE │ FILESYSTEM     │\n├────────────┼────────┼───────┼────────┼───────────────────────────────┼──────┼────────────────┤\n│ /          │  19.5G │  9.5G │   9.0G │ [#########...........]  48.9% │ ext4 │ /dev/mmcblk0p2 │\n│ /boot      │ 199.8M │ 38.8M │ 161.0M │ [###.................]  19.4% │ vfat │ /dev/mmcblk0p1 │\n│ /home      │   9.3G │  3.7G │   5.0G │ [########............]  40.4% │ ext4 │ /dev/mmcblk0p3 │\n│ /mnt/usb   │   4.5T │  3.2T │   1.1T │ [##############......]  71.3% │ ext4 │ /dev/sda1      │\n╰────────────┴────────┴───────┴────────┴───────────────────────────────┴──────┴────────────────╯\n╭───────────────────────────────────────────────────────────────────────────────────────────────────╮\n│ 6 special devices                                                                                 │\n├────────────────┬────────┬────────┬────────┬───────────────────────────────┬──────────┬────────────┤\n│ MOUNTED ON     │   SIZE │   USED │  AVAIL │              USE%             │ TYPE     │ FILESYSTEM │\n├────────────────┼────────┼────────┼────────┼───────────────────────────────┼──────────┼────────────┤\n│ /dev           │   3.7G │     0B │   3.7G │                               │ devtmpfs │ dev        │\n│ /dev/shm       │   3.9G │     0B │   3.9G │                               │ tmpfs    │ tmpfs      │\n│ /run           │   3.9G │ 812.0K │   3.9G │ [....................]   0.0% │ tmpfs    │ run        │\n│ /run/user/1001 │ 789.3M │  20.0K │ 789.3M │ [....................]   0.0% │ tmpfs    │ tmpfs      │\n│ /run/user/966  │ 789.3M │  24.0K │ 789.2M │ [....................]   0.0% │ tmpfs    │ tmpfs      │\n│ /tmp           │   3.9G │   4.0K │   3.9G │ [....................]   0.0% │ tmpfs    │ tmpfs      │\n╰────────────────┴────────┴────────┴────────┴───────────────────────────────┴──────────┴────────────╯\n\n\n\n\nfd\nfd is an alternative to find that is easier to use. It is “opinionated” (i.e. decisions have been made about default options that you may not agree with) but purportedly covers ~80% of use cases. It works directly with regular expressions.\n\nExamples\n❱ tldr fd\n\n  fd\n\n  An alternative to `find`.\n  Aims to be faster and easier to use than `find`.\n  More information: https://github.com/sharkdp/fd.\n\n  - Recursively find files matching the given pattern in the current directory:\n    fd pattern\n\n  - Find files that begin with \"foo\":\n    fd '^foo'\n\n  - Find files with a specific extension:\n    fd --extension txt\n\n  - Find files in a specific directory:\n    fd pattern path/to/directory\n\n  - Include ignored and hidden files in the search:\n    fd --hidden --no-ignore pattern\n\n  - Execute a command on each search result returned:\n    fd pattern --exec command\n\n\n\njq\njq is to JSON (JavaScript Object Notation) what awk/grep/sed is to text files. It allows parsing, searching and selecting of JSON files, which if you’ve not encountered them before take a bit of getting used to.\n\nExamples\nDetails of using jq are really beyond the scope of this short article, like awk its almost a language in itself.\n❱ tldr jq\n\n  jq\n\n  A command-line JSON processor that uses a domain-specific language.\n  More information: https://stedolan.github.io/jq/manual/.\n\n  - Execute a specific expression (print a colored and formatted json):\n    cat path/to/file.json | jq '.'\n\n  - Execute a specific script:\n    cat path/to/file.json | jq --from-file path/to/script.jq\n\n  - Pass specific arguments:\n    cat path/to/file.json | jq --arg \"name1\" \"value1\" --arg \"name2\" \"value2\" ... '. + $ARGS.named'\n\n  - Print specific keys:\n    cat path/to/file.json | jq '.key1, .key2, ...'\n\n  - Print specific array items:\n    cat path/to/file.json | jq '.[index1], .[index2], ...'\n\n  - Print all array items/object keys:\n    cat path/to/file.json | jq '.[]'\n\n  - Add/remove specific keys:\n    cat path/to/file.json | jq '. +|- {\"key1\": \"value1\", \"key2\": \"value2\", ...}'\n\n\n\nlsd\nlsd is lsDeluxe and is very similar to exa but with a few additions such as icons.\n\nExamples\n❱ l\n.rw-r--r-- neil neil  144 B  Sun Aug 14 19:56:53 2022  #.gitlab-ci.yml#\ndrwxr-xr-x neil neil  4.0 KB Thu Sep 15 22:21:25 2022  .\ndrwxrwxr-x root users 4.0 KB Tue Aug 30 20:46:37 2022  ..\ndrwxr-xr-x neil neil  4.0 KB Thu Sep 15 22:21:56 2022  .git\ndrwxr-xr-x neil neil  4.0 KB Sun Aug 14 21:51:03 2022  .github\n.rw-r--r-- neil neil  613 B  Sun Aug 14 21:44:38 2022  .gitignore\n.rw-r--r-- neil neil  151 B  Sun Aug 14 19:56:13 2022  .gitlab-ci.yml\ndrwxr-xr-x neil neil  4.0 KB Thu Sep 15 22:21:25 2022  .quarto\n.rw-r--r-- neil neil  386 B  Thu Sep 15 22:05:23 2022  _quarto.yaml\n.rw-r--r-- neil neil  263 B  Sun Aug 14 10:59:13 2022  _quarto.yml~\ndrwxr-xr-x neil neil  4.0 KB Thu Sep 15 22:05:24 2022  _site\n.rw-r--r-- neil neil  1.1 KB Thu Sep 15 22:05:23 2022  about.qmd\n.rw-r--r-- neil neil  455 B  Sun Aug 14 11:02:13 2022  about.qmd~\ndrwxr-xr-x neil neil  4.0 KB Thu Sep 15 22:05:23 2022  img\n.rw-r--r-- neil neil  185 B  Sun Aug 14 22:22:04 2022  index.qmd\n.rw-r--r-- neil neil  191 B  Sun Aug 14 10:59:13 2022  index.qmd~\n.rw-r--r-- neil neil   34 KB Sun Aug 14 21:14:38 2022  LICENSE\n.rw-r--r-- neil neil  1.7 KB Thu Sep 15 22:05:23 2022  links.qmd\n.rw-r--r-- neil neil  237 B  Thu Sep 15 21:46:30 2022  links.qmd~\ndrwxr-xr-x neil neil  4.0 KB Wed Sep 14 20:24:25 2022  posts\n.rw-r--r-- neil neil  378 B  Thu Aug 25 23:20:16 2022  README.md\n.rw-r--r-- neil neil   13 B  Sun Aug 14 21:58:38 2022  requirements.txt\n.rw-r--r-- neil neil   17 B  Sun Aug 14 21:24:35 2022  styles.css\ndrwxr-xr-x neil neil  4.0 KB Thu Aug 25 23:20:16 2022  www\n\n\nAliases\nalias ls='lsd'\nalias l='ls -lha'\nalias lla='ls -la'\nalias lt='ls --tree'\n\n\n\ntldr\ntldr is very similar to cheat in that it shows short, simple examples of using a command. There are a number of different clients written in C, Node and Python as well as a few others. It depends on jq so you will have to install that if you want to use yq.\n\nExamples\n❱ tldr tldr\n\n  tldr\n\n  Display simple help pages for command-line tools from the tldr-pages project.\n  More information: https://tldr.sh.\n\n  - Print the tldr page for a specific command (hint: this is how you got here!):\n    tldr command\n\n  - Print the tldr page for a specific subcommand:\n    tldr command-subcommand\n\n  - Print the tldr page for a command for a specific [p]latform:\n    tldr -p android|linux|osx|sunos|windows command\n\n  - [u]pdate the local cache of tldr pages:\n    tldr -u\n\n\n\nyq\nyq is to YAML (YAML Ain’t Markup Language) what jq is to JSON. Written in Python it allows fast and efficient parsing, searching and selecting of YAML files.\n\nExamples\n❱ tldr yq\n\n  yq\n\n  A lightweight and portable command-line YAML processor.\n  More information: https://mikefarah.gitbook.io/yq/.\n\n  - Output a YAML file, in pretty-print format (v4+):\n    yq eval path/to/file.yaml\n\n  - Output a YAML file, in pretty-print format (v3):\n    yq read path/to/file.yaml --colors\n\n  - Output the first element in a YAML file that contains only an array (v4+):\n    yq eval '.[0]' path/to/file.yaml\n\n  - Output the first element in a YAML file that contains only an array (v3):\n    yq read path/to/file.yaml '[0]'\n\n  - Set (or overwrite) a key to a value in a file (v4+):\n    yq eval '.key = \"value\"' --inplace path/to/file.yaml\n\n  - Set (or overwrite) a key to a value in a file (v3):\n    yq write --inplace path/to/file.yaml 'key' 'value'\n\n  - Merge two files and print to stdout (v4+):\n    yq eval-all 'select(filename == \"path/to/file1.yaml\") * select(filename == \"path/to/file2.yaml\")' path/to/file1.yaml path/to/file2.yaml\n\n  - Merge two files and print to stdout (v3):\n    yq merge path/to/file1.yaml path/to/file2.yaml --colors"
  },
  {
    "objectID": "posts/cli-alternatives/index.html#installation",
    "href": "posts/cli-alternatives/index.html#installation",
    "title": "Linux Command Line Alternatives",
    "section": "Installation",
    "text": "Installation\nMost of these programmes will be available in your systems package manager, if they are not you should consult the project page directly for install instructions.\n\nLinux\n# Gentoo\nemerge -av bat duf fd jq lsd tldr yq\n\n# Arch\npacman -Syu bat duf fd jq lsd tldr yq\n\n# Ubuntu\nsudo apt-install bat duf fd jq lsd tldr yq\n\n\nOSX\nbrew install bat duf fd jq lsd tldr yq\n\n\nWindows\nWARNING None of these have been tested I do not have access to a Windows system running PowerShell. They use Scoop a command-line installer for Windows.\nscoop install lsd"
  },
  {
    "objectID": "posts/cli-alternatives/index.html#links",
    "href": "posts/cli-alternatives/index.html#links",
    "title": "Linux Command Line Alternatives",
    "section": "Links",
    "text": "Links\n\nbat\ncheat\nduf\nexa\nfd\njq\nlsd\ntldr\nyq"
  }
]